
GSA1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d0  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08109a68  08109a68  0000aa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109aec  08109aec  0000aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109af4  08109af4  0000aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08109af8  08109af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  08109afc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  10000010  08109b0c  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  10000070  08109b6c  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bfc  100000d0  08109bcc  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000ccc  08109bcc  0000bccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002542c  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abf  00000000  00000000  0003052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e4  00000000  00000000  00035c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f0b6  00000000  00000000  000371f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021fe4  00000000  00000000  000762aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a4a3  00000000  00000000  0009828e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00232731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bb8  00000000  00000000  00232774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0023a32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08109a50 	.word	0x08109a50

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	08109a50 	.word	0x08109a50

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b082      	sub	sp, #8
 8100668:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810066a:	4b25      	ldr	r3, [pc, #148]	@ (8100700 <main+0x9c>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a23      	ldr	r2, [pc, #140]	@ (8100700 <main+0x9c>)
 8100672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b21      	ldr	r3, [pc, #132]	@ (8100700 <main+0x9c>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100688:	2001      	movs	r0, #1
 810068a:	f002 fd85 	bl	8103198 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810068e:	f003 fe69 	bl	8104364 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100692:	2201      	movs	r2, #1
 8100694:	2102      	movs	r1, #2
 8100696:	2000      	movs	r0, #0
 8100698:	f003 fdea 	bl	8104270 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810069c:	4b19      	ldr	r3, [pc, #100]	@ (8100704 <main+0xa0>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006a4:	2b70      	cmp	r3, #112	@ 0x70
 81006a6:	d108      	bne.n	81006ba <main+0x56>
 81006a8:	4b17      	ldr	r3, [pc, #92]	@ (8100708 <main+0xa4>)
 81006aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ae:	4a16      	ldr	r2, [pc, #88]	@ (8100708 <main+0xa4>)
 81006b0:	f043 0301 	orr.w	r3, r3, #1
 81006b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006b8:	e007      	b.n	81006ca <main+0x66>
 81006ba:	4b13      	ldr	r3, [pc, #76]	@ (8100708 <main+0xa4>)
 81006bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c0:	4a11      	ldr	r2, [pc, #68]	@ (8100708 <main+0xa4>)
 81006c2:	f043 0301 	orr.w	r3, r3, #1
 81006c6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ca:	f001 fa25 	bl	8101b18 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006ce:	f000 fb2b 	bl	8100d28 <MX_GPIO_Init>
  MX_DMA_Init();
 81006d2:	f000 fac1 	bl	8100c58 <MX_DMA_Init>
  MX_ETH_Init();
 81006d6:	f000 f819 	bl	810070c <MX_ETH_Init>
  MX_FDCAN1_Init();
 81006da:	f000 f863 	bl	81007a4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 81006de:	f000 f8c5 	bl	810086c <MX_FDCAN2_Init>
  MX_FMC_Init();
 81006e2:	f000 fad3 	bl	8100c8c <MX_FMC_Init>
  MX_QUADSPI_Init();
 81006e6:	f000 f925 	bl	8100934 <MX_QUADSPI_Init>
  MX_SAI2_Init();
 81006ea:	f000 f94f 	bl	810098c <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 81006ee:	f000 fa11 	bl	8100b14 <MX_SDMMC1_MMC_Init>
  MX_USART3_UART_Init();
 81006f2:	f000 fa33 	bl	8100b5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 81006f6:	f000 fa7d 	bl	8100bf4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006fa:	bf00      	nop
 81006fc:	e7fd      	b.n	81006fa <main+0x96>
 81006fe:	bf00      	nop
 8100700:	58024400 	.word	0x58024400
 8100704:	e000ed00 	.word	0xe000ed00
 8100708:	58026400 	.word	0x58026400

0810070c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 810070c:	b580      	push	{r7, lr}
 810070e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100710:	4b1e      	ldr	r3, [pc, #120]	@ (810078c <MX_ETH_Init+0x80>)
 8100712:	4a1f      	ldr	r2, [pc, #124]	@ (8100790 <MX_ETH_Init+0x84>)
 8100714:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100716:	4b1f      	ldr	r3, [pc, #124]	@ (8100794 <MX_ETH_Init+0x88>)
 8100718:	2200      	movs	r2, #0
 810071a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 810071c:	4b1d      	ldr	r3, [pc, #116]	@ (8100794 <MX_ETH_Init+0x88>)
 810071e:	2280      	movs	r2, #128	@ 0x80
 8100720:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100722:	4b1c      	ldr	r3, [pc, #112]	@ (8100794 <MX_ETH_Init+0x88>)
 8100724:	22e1      	movs	r2, #225	@ 0xe1
 8100726:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100728:	4b1a      	ldr	r3, [pc, #104]	@ (8100794 <MX_ETH_Init+0x88>)
 810072a:	2200      	movs	r2, #0
 810072c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810072e:	4b19      	ldr	r3, [pc, #100]	@ (8100794 <MX_ETH_Init+0x88>)
 8100730:	2200      	movs	r2, #0
 8100732:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100734:	4b17      	ldr	r3, [pc, #92]	@ (8100794 <MX_ETH_Init+0x88>)
 8100736:	2200      	movs	r2, #0
 8100738:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 810073a:	4b14      	ldr	r3, [pc, #80]	@ (810078c <MX_ETH_Init+0x80>)
 810073c:	4a15      	ldr	r2, [pc, #84]	@ (8100794 <MX_ETH_Init+0x88>)
 810073e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8100740:	4b12      	ldr	r3, [pc, #72]	@ (810078c <MX_ETH_Init+0x80>)
 8100742:	2200      	movs	r2, #0
 8100744:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100746:	4b11      	ldr	r3, [pc, #68]	@ (810078c <MX_ETH_Init+0x80>)
 8100748:	4a13      	ldr	r2, [pc, #76]	@ (8100798 <MX_ETH_Init+0x8c>)
 810074a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810074c:	4b0f      	ldr	r3, [pc, #60]	@ (810078c <MX_ETH_Init+0x80>)
 810074e:	4a13      	ldr	r2, [pc, #76]	@ (810079c <MX_ETH_Init+0x90>)
 8100750:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8100752:	4b0e      	ldr	r3, [pc, #56]	@ (810078c <MX_ETH_Init+0x80>)
 8100754:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100758:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810075a:	480c      	ldr	r0, [pc, #48]	@ (810078c <MX_ETH_Init+0x80>)
 810075c:	f001 fbca 	bl	8101ef4 <HAL_ETH_Init>
 8100760:	4603      	mov	r3, r0
 8100762:	2b00      	cmp	r3, #0
 8100764:	d001      	beq.n	810076a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100766:	f000 fb89 	bl	8100e7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810076a:	2238      	movs	r2, #56	@ 0x38
 810076c:	2100      	movs	r1, #0
 810076e:	480c      	ldr	r0, [pc, #48]	@ (81007a0 <MX_ETH_Init+0x94>)
 8100770:	f009 f933 	bl	81099da <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100774:	4b0a      	ldr	r3, [pc, #40]	@ (81007a0 <MX_ETH_Init+0x94>)
 8100776:	2221      	movs	r2, #33	@ 0x21
 8100778:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810077a:	4b09      	ldr	r3, [pc, #36]	@ (81007a0 <MX_ETH_Init+0x94>)
 810077c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8100780:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100782:	4b07      	ldr	r3, [pc, #28]	@ (81007a0 <MX_ETH_Init+0x94>)
 8100784:	2200      	movs	r2, #0
 8100786:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100788:	bf00      	nop
 810078a:	bd80      	pop	{r7, pc}
 810078c:	10000124 	.word	0x10000124
 8100790:	40028000 	.word	0x40028000
 8100794:	10000cb4 	.word	0x10000cb4
 8100798:	10000070 	.word	0x10000070
 810079c:	10000010 	.word	0x10000010
 81007a0:	100000ec 	.word	0x100000ec

081007a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 81007a8:	4b2e      	ldr	r3, [pc, #184]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007aa:	4a2f      	ldr	r2, [pc, #188]	@ (8100868 <MX_FDCAN1_Init+0xc4>)
 81007ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81007ae:	4b2d      	ldr	r3, [pc, #180]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007b0:	2200      	movs	r2, #0
 81007b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 81007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 81007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007bc:	2200      	movs	r2, #0
 81007be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 81007c0:	4b28      	ldr	r3, [pc, #160]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007c2:	2200      	movs	r2, #0
 81007c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 81007c6:	4b27      	ldr	r3, [pc, #156]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007c8:	2200      	movs	r2, #0
 81007ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 81007cc:	4b25      	ldr	r3, [pc, #148]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007ce:	2210      	movs	r2, #16
 81007d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 81007d2:	4b24      	ldr	r3, [pc, #144]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007d4:	2201      	movs	r2, #1
 81007d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 81007d8:	4b22      	ldr	r3, [pc, #136]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007da:	2201      	movs	r2, #1
 81007dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 81007de:	4b21      	ldr	r3, [pc, #132]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007e0:	2201      	movs	r2, #1
 81007e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 81007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007e6:	2201      	movs	r2, #1
 81007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 81007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007ec:	2201      	movs	r2, #1
 81007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 81007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007f2:	2201      	movs	r2, #1
 81007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 81007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007f8:	2201      	movs	r2, #1
 81007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 81007fc:	4b19      	ldr	r3, [pc, #100]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 81007fe:	2200      	movs	r2, #0
 8100800:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100802:	4b18      	ldr	r3, [pc, #96]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100804:	2200      	movs	r2, #0
 8100806:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100808:	4b16      	ldr	r3, [pc, #88]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 810080a:	2200      	movs	r2, #0
 810080c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 810080e:	4b15      	ldr	r3, [pc, #84]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100810:	2200      	movs	r2, #0
 8100812:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100814:	4b13      	ldr	r3, [pc, #76]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100816:	2204      	movs	r2, #4
 8100818:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 810081a:	4b12      	ldr	r3, [pc, #72]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 810081c:	2200      	movs	r2, #0
 810081e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100820:	4b10      	ldr	r3, [pc, #64]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100822:	2204      	movs	r2, #4
 8100824:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8100826:	4b0f      	ldr	r3, [pc, #60]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100828:	2200      	movs	r2, #0
 810082a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 810082c:	4b0d      	ldr	r3, [pc, #52]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 810082e:	2204      	movs	r2, #4
 8100830:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8100832:	4b0c      	ldr	r3, [pc, #48]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100834:	2200      	movs	r2, #0
 8100836:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100838:	4b0a      	ldr	r3, [pc, #40]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 810083a:	2200      	movs	r2, #0
 810083c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 810083e:	4b09      	ldr	r3, [pc, #36]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100840:	2200      	movs	r2, #0
 8100842:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100844:	4b07      	ldr	r3, [pc, #28]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100846:	2200      	movs	r2, #0
 8100848:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810084a:	4b06      	ldr	r3, [pc, #24]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 810084c:	2204      	movs	r2, #4
 810084e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100850:	4804      	ldr	r0, [pc, #16]	@ (8100864 <MX_FDCAN1_Init+0xc0>)
 8100852:	f001 ff83 	bl	810275c <HAL_FDCAN_Init>
 8100856:	4603      	mov	r3, r0
 8100858:	2b00      	cmp	r3, #0
 810085a:	d001      	beq.n	8100860 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 810085c:	f000 fb0e 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8100860:	bf00      	nop
 8100862:	bd80      	pop	{r7, pc}
 8100864:	100001d4 	.word	0x100001d4
 8100868:	4000a000 	.word	0x4000a000

0810086c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 810086c:	b580      	push	{r7, lr}
 810086e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8100870:	4b2e      	ldr	r3, [pc, #184]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100872:	4a2f      	ldr	r2, [pc, #188]	@ (8100930 <MX_FDCAN2_Init+0xc4>)
 8100874:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100876:	4b2d      	ldr	r3, [pc, #180]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100878:	2200      	movs	r2, #0
 810087a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 810087c:	4b2b      	ldr	r3, [pc, #172]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 810087e:	2200      	movs	r2, #0
 8100880:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100882:	4b2a      	ldr	r3, [pc, #168]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100884:	2200      	movs	r2, #0
 8100886:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8100888:	4b28      	ldr	r3, [pc, #160]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 810088a:	2200      	movs	r2, #0
 810088c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 810088e:	4b27      	ldr	r3, [pc, #156]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100890:	2200      	movs	r2, #0
 8100892:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8100894:	4b25      	ldr	r3, [pc, #148]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100896:	2210      	movs	r2, #16
 8100898:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 810089a:	4b24      	ldr	r3, [pc, #144]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 810089c:	2201      	movs	r2, #1
 810089e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 81008a0:	4b22      	ldr	r3, [pc, #136]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008a2:	2201      	movs	r2, #1
 81008a4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 81008a6:	4b21      	ldr	r3, [pc, #132]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008a8:	2201      	movs	r2, #1
 81008aa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 81008ac:	4b1f      	ldr	r3, [pc, #124]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008ae:	2201      	movs	r2, #1
 81008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 81008b2:	4b1e      	ldr	r3, [pc, #120]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008b4:	2201      	movs	r2, #1
 81008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 81008b8:	4b1c      	ldr	r3, [pc, #112]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008ba:	2201      	movs	r2, #1
 81008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 81008be:	4b1b      	ldr	r3, [pc, #108]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008c0:	2201      	movs	r2, #1
 81008c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 81008c4:	4b19      	ldr	r3, [pc, #100]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008c6:	2200      	movs	r2, #0
 81008c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 81008ca:	4b18      	ldr	r3, [pc, #96]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008cc:	2200      	movs	r2, #0
 81008ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 81008d0:	4b16      	ldr	r3, [pc, #88]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008d2:	2200      	movs	r2, #0
 81008d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 81008d6:	4b15      	ldr	r3, [pc, #84]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008d8:	2200      	movs	r2, #0
 81008da:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81008dc:	4b13      	ldr	r3, [pc, #76]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008de:	2204      	movs	r2, #4
 81008e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 81008e2:	4b12      	ldr	r3, [pc, #72]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008e4:	2200      	movs	r2, #0
 81008e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81008e8:	4b10      	ldr	r3, [pc, #64]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008ea:	2204      	movs	r2, #4
 81008ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 81008ee:	4b0f      	ldr	r3, [pc, #60]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008f0:	2200      	movs	r2, #0
 81008f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81008f4:	4b0d      	ldr	r3, [pc, #52]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008f6:	2204      	movs	r2, #4
 81008f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 81008fa:	4b0c      	ldr	r3, [pc, #48]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 81008fc:	2200      	movs	r2, #0
 81008fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100900:	4b0a      	ldr	r3, [pc, #40]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100902:	2200      	movs	r2, #0
 8100904:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8100906:	4b09      	ldr	r3, [pc, #36]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100908:	2200      	movs	r2, #0
 810090a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 810090c:	4b07      	ldr	r3, [pc, #28]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 810090e:	2200      	movs	r2, #0
 8100910:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100912:	4b06      	ldr	r3, [pc, #24]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 8100914:	2204      	movs	r2, #4
 8100916:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100918:	4804      	ldr	r0, [pc, #16]	@ (810092c <MX_FDCAN2_Init+0xc0>)
 810091a:	f001 ff1f 	bl	810275c <HAL_FDCAN_Init>
 810091e:	4603      	mov	r3, r0
 8100920:	2b00      	cmp	r3, #0
 8100922:	d001      	beq.n	8100928 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8100924:	f000 faaa 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8100928:	bf00      	nop
 810092a:	bd80      	pop	{r7, pc}
 810092c:	10000274 	.word	0x10000274
 8100930:	4000a400 	.word	0x4000a400

08100934 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100934:	b580      	push	{r7, lr}
 8100936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100938:	4b12      	ldr	r3, [pc, #72]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 810093a:	4a13      	ldr	r2, [pc, #76]	@ (8100988 <MX_QUADSPI_Init+0x54>)
 810093c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 810093e:	4b11      	ldr	r3, [pc, #68]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100940:	22ff      	movs	r2, #255	@ 0xff
 8100942:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100944:	4b0f      	ldr	r3, [pc, #60]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100946:	2201      	movs	r2, #1
 8100948:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 810094a:	4b0e      	ldr	r3, [pc, #56]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 810094c:	2200      	movs	r2, #0
 810094e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100950:	4b0c      	ldr	r3, [pc, #48]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100952:	2201      	movs	r2, #1
 8100954:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100956:	4b0b      	ldr	r3, [pc, #44]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100958:	2200      	movs	r2, #0
 810095a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 810095c:	4b09      	ldr	r3, [pc, #36]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 810095e:	2200      	movs	r2, #0
 8100960:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8100962:	4b08      	ldr	r3, [pc, #32]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100964:	2200      	movs	r2, #0
 8100966:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8100968:	4b06      	ldr	r3, [pc, #24]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 810096a:	2200      	movs	r2, #0
 810096c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 810096e:	4805      	ldr	r0, [pc, #20]	@ (8100984 <MX_QUADSPI_Init+0x50>)
 8100970:	f003 fd16 	bl	81043a0 <HAL_QSPI_Init>
 8100974:	4603      	mov	r3, r0
 8100976:	2b00      	cmp	r3, #0
 8100978:	d001      	beq.n	810097e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 810097a:	f000 fa7f 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 810097e:	bf00      	nop
 8100980:	bd80      	pop	{r7, pc}
 8100982:	bf00      	nop
 8100984:	10000314 	.word	0x10000314
 8100988:	52005000 	.word	0x52005000

0810098c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100990:	4b5b      	ldr	r3, [pc, #364]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100992:	4a5c      	ldr	r2, [pc, #368]	@ (8100b04 <MX_SAI2_Init+0x178>)
 8100994:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100996:	4b5a      	ldr	r3, [pc, #360]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100998:	2200      	movs	r2, #0
 810099a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 810099c:	4b58      	ldr	r3, [pc, #352]	@ (8100b00 <MX_SAI2_Init+0x174>)
 810099e:	2200      	movs	r2, #0
 81009a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 81009a2:	4b57      	ldr	r3, [pc, #348]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009a4:	2240      	movs	r2, #64	@ 0x40
 81009a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81009a8:	4b55      	ldr	r3, [pc, #340]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009aa:	2200      	movs	r2, #0
 81009ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81009ae:	4b54      	ldr	r3, [pc, #336]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009b0:	2200      	movs	r2, #0
 81009b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 81009b4:	4b52      	ldr	r3, [pc, #328]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009b6:	2200      	movs	r2, #0
 81009b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81009ba:	4b51      	ldr	r3, [pc, #324]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009bc:	2200      	movs	r2, #0
 81009be:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 81009c0:	4b4f      	ldr	r3, [pc, #316]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009c2:	2200      	movs	r2, #0
 81009c4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 81009c6:	4b4e      	ldr	r3, [pc, #312]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009c8:	2200      	movs	r2, #0
 81009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81009cc:	4b4c      	ldr	r3, [pc, #304]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009ce:	2200      	movs	r2, #0
 81009d0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81009d2:	4b4b      	ldr	r3, [pc, #300]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009d4:	4a4c      	ldr	r2, [pc, #304]	@ (8100b08 <MX_SAI2_Init+0x17c>)
 81009d6:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81009d8:	4b49      	ldr	r3, [pc, #292]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009da:	2200      	movs	r2, #0
 81009dc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 81009de:	4b48      	ldr	r3, [pc, #288]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009e0:	2200      	movs	r2, #0
 81009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 81009e4:	4b46      	ldr	r3, [pc, #280]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009e6:	2200      	movs	r2, #0
 81009e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81009ea:	4b45      	ldr	r3, [pc, #276]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009ec:	2200      	movs	r2, #0
 81009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 81009f0:	4b43      	ldr	r3, [pc, #268]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009f2:	2200      	movs	r2, #0
 81009f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 81009f8:	4b41      	ldr	r3, [pc, #260]	@ (8100b00 <MX_SAI2_Init+0x174>)
 81009fa:	2201      	movs	r2, #1
 81009fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81009fe:	4b40      	ldr	r3, [pc, #256]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8100a06:	4b3e      	ldr	r3, [pc, #248]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a08:	2208      	movs	r2, #8
 8100a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8100a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a0e:	2201      	movs	r2, #1
 8100a10:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100a12:	4b3b      	ldr	r3, [pc, #236]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a14:	2200      	movs	r2, #0
 8100a16:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100a18:	4b39      	ldr	r3, [pc, #228]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a1a:	2200      	movs	r2, #0
 8100a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100a1e:	4b38      	ldr	r3, [pc, #224]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a20:	2200      	movs	r2, #0
 8100a22:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8100a24:	4b36      	ldr	r3, [pc, #216]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a26:	2200      	movs	r2, #0
 8100a28:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100a2a:	4b35      	ldr	r3, [pc, #212]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a2c:	2200      	movs	r2, #0
 8100a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8100a30:	4b33      	ldr	r3, [pc, #204]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a32:	2201      	movs	r2, #1
 8100a34:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8100a36:	4b32      	ldr	r3, [pc, #200]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a38:	2200      	movs	r2, #0
 8100a3a:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8100a3c:	4830      	ldr	r0, [pc, #192]	@ (8100b00 <MX_SAI2_Init+0x174>)
 8100a3e:	f006 fc3f 	bl	81072c0 <HAL_SAI_Init>
 8100a42:	4603      	mov	r3, r0
 8100a44:	2b00      	cmp	r3, #0
 8100a46:	d001      	beq.n	8100a4c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8100a48:	f000 fa18 	bl	8100e7c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8100a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a4e:	4a30      	ldr	r2, [pc, #192]	@ (8100b10 <MX_SAI2_Init+0x184>)
 8100a50:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100a52:	4b2e      	ldr	r3, [pc, #184]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a54:	2200      	movs	r2, #0
 8100a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8100a58:	4b2c      	ldr	r3, [pc, #176]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a5a:	2203      	movs	r2, #3
 8100a5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8100a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a60:	2240      	movs	r2, #64	@ 0x40
 8100a62:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100a64:	4b29      	ldr	r3, [pc, #164]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100a6a:	4b28      	ldr	r3, [pc, #160]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a6c:	2200      	movs	r2, #0
 8100a6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8100a70:	4b26      	ldr	r3, [pc, #152]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a72:	2201      	movs	r2, #1
 8100a74:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100a76:	4b25      	ldr	r3, [pc, #148]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a78:	2200      	movs	r2, #0
 8100a7a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100a7c:	4b23      	ldr	r3, [pc, #140]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a7e:	2200      	movs	r2, #0
 8100a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100a82:	4b22      	ldr	r3, [pc, #136]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a84:	2200      	movs	r2, #0
 8100a86:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100a88:	4b20      	ldr	r3, [pc, #128]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a8a:	2200      	movs	r2, #0
 8100a8c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a90:	2200      	movs	r2, #0
 8100a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100a94:	4b1d      	ldr	r3, [pc, #116]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a96:	2200      	movs	r2, #0
 8100a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100a9c:	2200      	movs	r2, #0
 8100a9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8100aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100aa2:	2200      	movs	r2, #0
 8100aa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8100aa8:	4b18      	ldr	r3, [pc, #96]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100aaa:	2201      	movs	r2, #1
 8100aac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100aae:	4b17      	ldr	r3, [pc, #92]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8100ab6:	4b15      	ldr	r3, [pc, #84]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ab8:	2208      	movs	r2, #8
 8100aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8100abc:	4b13      	ldr	r3, [pc, #76]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100abe:	2201      	movs	r2, #1
 8100ac0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100ac2:	4b12      	ldr	r3, [pc, #72]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ac4:	2200      	movs	r2, #0
 8100ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100ac8:	4b10      	ldr	r3, [pc, #64]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100aca:	2200      	movs	r2, #0
 8100acc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100ace:	4b0f      	ldr	r3, [pc, #60]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ad0:	2200      	movs	r2, #0
 8100ad2:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8100ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ad6:	2200      	movs	r2, #0
 8100ad8:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100ada:	4b0c      	ldr	r3, [pc, #48]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100adc:	2200      	movs	r2, #0
 8100ade:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8100ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ae2:	2201      	movs	r2, #1
 8100ae4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8100ae6:	4b09      	ldr	r3, [pc, #36]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100ae8:	2200      	movs	r2, #0
 8100aea:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8100aec:	4807      	ldr	r0, [pc, #28]	@ (8100b0c <MX_SAI2_Init+0x180>)
 8100aee:	f006 fbe7 	bl	81072c0 <HAL_SAI_Init>
 8100af2:	4603      	mov	r3, r0
 8100af4:	2b00      	cmp	r3, #0
 8100af6:	d001      	beq.n	8100afc <MX_SAI2_Init+0x170>
  {
    Error_Handler();
 8100af8:	f000 f9c0 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8100afc:	bf00      	nop
 8100afe:	bd80      	pop	{r7, pc}
 8100b00:	10000360 	.word	0x10000360
 8100b04:	40015c04 	.word	0x40015c04
 8100b08:	0002ee00 	.word	0x0002ee00
 8100b0c:	100003f8 	.word	0x100003f8
 8100b10:	40015c24 	.word	0x40015c24

08100b14 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8100b14:	b580      	push	{r7, lr}
 8100b16:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8100b18:	4b0e      	ldr	r3, [pc, #56]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8100b58 <MX_SDMMC1_MMC_Init+0x44>)
 8100b1c:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b20:	2200      	movs	r2, #0
 8100b22:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100b24:	4b0b      	ldr	r3, [pc, #44]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b26:	2200      	movs	r2, #0
 8100b28:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8100b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8100b30:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100b32:	4b08      	ldr	r3, [pc, #32]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b34:	2200      	movs	r2, #0
 8100b36:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8100b38:	4b06      	ldr	r3, [pc, #24]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b3a:	2200      	movs	r2, #0
 8100b3c:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8100b3e:	4805      	ldr	r0, [pc, #20]	@ (8100b54 <MX_SDMMC1_MMC_Init+0x40>)
 8100b40:	f002 fb3c 	bl	81031bc <HAL_MMC_Init>
 8100b44:	4603      	mov	r3, r0
 8100b46:	2b00      	cmp	r3, #0
 8100b48:	d001      	beq.n	8100b4e <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8100b4a:	f000 f997 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100b4e:	bf00      	nop
 8100b50:	bd80      	pop	{r7, pc}
 8100b52:	bf00      	nop
 8100b54:	10000490 	.word	0x10000490
 8100b58:	52007000 	.word	0x52007000

08100b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100b5c:	b580      	push	{r7, lr}
 8100b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100b60:	4b22      	ldr	r3, [pc, #136]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b62:	4a23      	ldr	r2, [pc, #140]	@ (8100bf0 <MX_USART3_UART_Init+0x94>)
 8100b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100b66:	4b21      	ldr	r3, [pc, #132]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b70:	2200      	movs	r2, #0
 8100b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100b74:	4b1d      	ldr	r3, [pc, #116]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b76:	2200      	movs	r2, #0
 8100b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b7c:	2200      	movs	r2, #0
 8100b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100b80:	4b1a      	ldr	r3, [pc, #104]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b82:	220c      	movs	r2, #12
 8100b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100b86:	4b19      	ldr	r3, [pc, #100]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b88:	2200      	movs	r2, #0
 8100b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100b8c:	4b17      	ldr	r3, [pc, #92]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b8e:	2200      	movs	r2, #0
 8100b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100b92:	4b16      	ldr	r3, [pc, #88]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b94:	2200      	movs	r2, #0
 8100b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b98:	4b14      	ldr	r3, [pc, #80]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b9e:	4b13      	ldr	r3, [pc, #76]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100ba4:	4811      	ldr	r0, [pc, #68]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100ba6:	f006 feab 	bl	8107900 <HAL_UART_Init>
 8100baa:	4603      	mov	r3, r0
 8100bac:	2b00      	cmp	r3, #0
 8100bae:	d001      	beq.n	8100bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100bb0:	f000 f964 	bl	8100e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100bb4:	2100      	movs	r1, #0
 8100bb6:	480d      	ldr	r0, [pc, #52]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100bb8:	f007 feb2 	bl	8108920 <HAL_UARTEx_SetTxFifoThreshold>
 8100bbc:	4603      	mov	r3, r0
 8100bbe:	2b00      	cmp	r3, #0
 8100bc0:	d001      	beq.n	8100bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100bc2:	f000 f95b 	bl	8100e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100bc6:	2100      	movs	r1, #0
 8100bc8:	4808      	ldr	r0, [pc, #32]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100bca:	f007 fee7 	bl	810899c <HAL_UARTEx_SetRxFifoThreshold>
 8100bce:	4603      	mov	r3, r0
 8100bd0:	2b00      	cmp	r3, #0
 8100bd2:	d001      	beq.n	8100bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100bd4:	f000 f952 	bl	8100e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100bd8:	4804      	ldr	r0, [pc, #16]	@ (8100bec <MX_USART3_UART_Init+0x90>)
 8100bda:	f007 fe68 	bl	81088ae <HAL_UARTEx_DisableFifoMode>
 8100bde:	4603      	mov	r3, r0
 8100be0:	2b00      	cmp	r3, #0
 8100be2:	d001      	beq.n	8100be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100be4:	f000 f94a 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100be8:	bf00      	nop
 8100bea:	bd80      	pop	{r7, pc}
 8100bec:	10000708 	.word	0x10000708
 8100bf0:	40004800 	.word	0x40004800

08100bf4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8100bf4:	b580      	push	{r7, lr}
 8100bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8100bf8:	4b15      	ldr	r3, [pc, #84]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bfa:	4a16      	ldr	r2, [pc, #88]	@ (8100c54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8100bfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8100bfe:	4b14      	ldr	r3, [pc, #80]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c00:	2209      	movs	r2, #9
 8100c02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8100c04:	4b12      	ldr	r3, [pc, #72]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c06:	2202      	movs	r2, #2
 8100c08:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8100c0a:	4b11      	ldr	r3, [pc, #68]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c0c:	2200      	movs	r2, #0
 8100c0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8100c10:	4b0f      	ldr	r3, [pc, #60]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c12:	2202      	movs	r2, #2
 8100c14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8100c16:	4b0e      	ldr	r3, [pc, #56]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c18:	2200      	movs	r2, #0
 8100c1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8100c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c1e:	2200      	movs	r2, #0
 8100c20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8100c22:	4b0b      	ldr	r3, [pc, #44]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c24:	2200      	movs	r2, #0
 8100c26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8100c28:	4b09      	ldr	r3, [pc, #36]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c2a:	2201      	movs	r2, #1
 8100c2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8100c2e:	4b08      	ldr	r3, [pc, #32]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c30:	2201      	movs	r2, #1
 8100c32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8100c34:	4b06      	ldr	r3, [pc, #24]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c36:	2200      	movs	r2, #0
 8100c38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8100c3a:	4805      	ldr	r0, [pc, #20]	@ (8100c50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c3c:	f003 f9e8 	bl	8104010 <HAL_PCD_Init>
 8100c40:	4603      	mov	r3, r0
 8100c42:	2b00      	cmp	r3, #0
 8100c44:	d001      	beq.n	8100c4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8100c46:	f000 f919 	bl	8100e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8100c4a:	bf00      	nop
 8100c4c:	bd80      	pop	{r7, pc}
 8100c4e:	bf00      	nop
 8100c50:	1000079c 	.word	0x1000079c
 8100c54:	40080000 	.word	0x40080000

08100c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100c58:	b480      	push	{r7}
 8100c5a:	b083      	sub	sp, #12
 8100c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8100c88 <MX_DMA_Init+0x30>)
 8100c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c64:	4a08      	ldr	r2, [pc, #32]	@ (8100c88 <MX_DMA_Init+0x30>)
 8100c66:	f043 0301 	orr.w	r3, r3, #1
 8100c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100c6e:	4b06      	ldr	r3, [pc, #24]	@ (8100c88 <MX_DMA_Init+0x30>)
 8100c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c74:	f003 0301 	and.w	r3, r3, #1
 8100c78:	607b      	str	r3, [r7, #4]
 8100c7a:	687b      	ldr	r3, [r7, #4]

}
 8100c7c:	bf00      	nop
 8100c7e:	370c      	adds	r7, #12
 8100c80:	46bd      	mov	sp, r7
 8100c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c86:	4770      	bx	lr
 8100c88:	58024400 	.word	0x58024400

08100c8c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100c8c:	b580      	push	{r7, lr}
 8100c8e:	b088      	sub	sp, #32
 8100c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100c92:	1d3b      	adds	r3, r7, #4
 8100c94:	2200      	movs	r2, #0
 8100c96:	601a      	str	r2, [r3, #0]
 8100c98:	605a      	str	r2, [r3, #4]
 8100c9a:	609a      	str	r2, [r3, #8]
 8100c9c:	60da      	str	r2, [r3, #12]
 8100c9e:	611a      	str	r2, [r3, #16]
 8100ca0:	615a      	str	r2, [r3, #20]
 8100ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8100d24 <MX_FMC_Init+0x98>)
 8100ca8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100caa:	4b1d      	ldr	r3, [pc, #116]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cac:	2201      	movs	r2, #1
 8100cae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cb2:	2200      	movs	r2, #0
 8100cb4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cb8:	2204      	movs	r2, #4
 8100cba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100cbc:	4b18      	ldr	r3, [pc, #96]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cbe:	2210      	movs	r2, #16
 8100cc0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8100cc2:	4b17      	ldr	r3, [pc, #92]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cc4:	2240      	movs	r2, #64	@ 0x40
 8100cc6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100cc8:	4b15      	ldr	r3, [pc, #84]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cca:	2280      	movs	r2, #128	@ 0x80
 8100ccc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100cce:	4b14      	ldr	r3, [pc, #80]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cd0:	2200      	movs	r2, #0
 8100cd2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100cd4:	4b12      	ldr	r3, [pc, #72]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cd6:	2200      	movs	r2, #0
 8100cd8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100cda:	4b11      	ldr	r3, [pc, #68]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100cdc:	2200      	movs	r2, #0
 8100cde:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100ce2:	2200      	movs	r2, #0
 8100ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100ce6:	2310      	movs	r3, #16
 8100ce8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100cea:	2310      	movs	r3, #16
 8100cec:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100cee:	2310      	movs	r3, #16
 8100cf0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100cf2:	2310      	movs	r3, #16
 8100cf4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100cf6:	2310      	movs	r3, #16
 8100cf8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100cfa:	2310      	movs	r3, #16
 8100cfc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100cfe:	2310      	movs	r3, #16
 8100d00:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100d02:	1d3b      	adds	r3, r7, #4
 8100d04:	4619      	mov	r1, r3
 8100d06:	4806      	ldr	r0, [pc, #24]	@ (8100d20 <MX_FMC_Init+0x94>)
 8100d08:	f006 fdbe 	bl	8107888 <HAL_SDRAM_Init>
 8100d0c:	4603      	mov	r3, r0
 8100d0e:	2b00      	cmp	r3, #0
 8100d10:	d001      	beq.n	8100d16 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100d12:	f000 f8b3 	bl	8100e7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100d16:	bf00      	nop
 8100d18:	3720      	adds	r7, #32
 8100d1a:	46bd      	mov	sp, r7
 8100d1c:	bd80      	pop	{r7, pc}
 8100d1e:	bf00      	nop
 8100d20:	10000c80 	.word	0x10000c80
 8100d24:	52004140 	.word	0x52004140

08100d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100d28:	b580      	push	{r7, lr}
 8100d2a:	b08e      	sub	sp, #56	@ 0x38
 8100d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d32:	2200      	movs	r2, #0
 8100d34:	601a      	str	r2, [r3, #0]
 8100d36:	605a      	str	r2, [r3, #4]
 8100d38:	609a      	str	r2, [r3, #8]
 8100d3a:	60da      	str	r2, [r3, #12]
 8100d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d44:	4a4b      	ldr	r2, [pc, #300]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d4e:	4b49      	ldr	r3, [pc, #292]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100d58:	623b      	str	r3, [r7, #32]
 8100d5a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d5c:	4b45      	ldr	r3, [pc, #276]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d62:	4a44      	ldr	r2, [pc, #272]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d64:	f043 0302 	orr.w	r3, r3, #2
 8100d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d6c:	4b41      	ldr	r3, [pc, #260]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d72:	f003 0302 	and.w	r3, r3, #2
 8100d76:	61fb      	str	r3, [r7, #28]
 8100d78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d80:	4a3c      	ldr	r2, [pc, #240]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100d94:	61bb      	str	r3, [r7, #24]
 8100d96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100d98:	4b36      	ldr	r3, [pc, #216]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d9e:	4a35      	ldr	r2, [pc, #212]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100da0:	f043 0304 	orr.w	r3, r3, #4
 8100da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100da8:	4b32      	ldr	r3, [pc, #200]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100dae:	f003 0304 	and.w	r3, r3, #4
 8100db2:	617b      	str	r3, [r7, #20]
 8100db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100db6:	4b2f      	ldr	r3, [pc, #188]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100dbe:	f043 0310 	orr.w	r3, r3, #16
 8100dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100dcc:	f003 0310 	and.w	r3, r3, #16
 8100dd0:	613b      	str	r3, [r7, #16]
 8100dd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100dd4:	4b27      	ldr	r3, [pc, #156]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100dda:	4a26      	ldr	r2, [pc, #152]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100de4:	4b23      	ldr	r3, [pc, #140]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100dee:	60fb      	str	r3, [r7, #12]
 8100df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100df2:	4b20      	ldr	r3, [pc, #128]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100df8:	4a1e      	ldr	r2, [pc, #120]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100dfa:	f043 0308 	orr.w	r3, r3, #8
 8100dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e02:	4b1c      	ldr	r3, [pc, #112]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e08:	f003 0308 	and.w	r3, r3, #8
 8100e0c:	60bb      	str	r3, [r7, #8]
 8100e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100e10:	4b18      	ldr	r3, [pc, #96]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e16:	4a17      	ldr	r2, [pc, #92]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e18:	f043 0301 	orr.w	r3, r3, #1
 8100e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e20:	4b14      	ldr	r3, [pc, #80]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e26:	f003 0301 	and.w	r3, r3, #1
 8100e2a:	607b      	str	r3, [r7, #4]
 8100e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100e2e:	4b11      	ldr	r3, [pc, #68]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e34:	4a0f      	ldr	r2, [pc, #60]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e36:	f043 0320 	orr.w	r3, r3, #32
 8100e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8100e74 <MX_GPIO_Init+0x14c>)
 8100e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e44:	f003 0320 	and.w	r3, r3, #32
 8100e48:	603b      	str	r3, [r7, #0]
 8100e4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8100e4c:	2330      	movs	r3, #48	@ 0x30
 8100e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e50:	2302      	movs	r3, #2
 8100e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e54:	2300      	movs	r3, #0
 8100e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e58:	2300      	movs	r3, #0
 8100e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8100e5c:	230a      	movs	r3, #10
 8100e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100e64:	4619      	mov	r1, r3
 8100e66:	4804      	ldr	r0, [pc, #16]	@ (8100e78 <MX_GPIO_Init+0x150>)
 8100e68:	f001 ffe6 	bl	8102e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8100e6c:	bf00      	nop
 8100e6e:	3738      	adds	r7, #56	@ 0x38
 8100e70:	46bd      	mov	sp, r7
 8100e72:	bd80      	pop	{r7, pc}
 8100e74:	58024400 	.word	0x58024400
 8100e78:	58021000 	.word	0x58021000

08100e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100e7c:	b480      	push	{r7}
 8100e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100e80:	b672      	cpsid	i
}
 8100e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100e84:	bf00      	nop
 8100e86:	e7fd      	b.n	8100e84 <Error_Handler+0x8>

08100e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100e88:	b480      	push	{r7}
 8100e8a:	b083      	sub	sp, #12
 8100e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8100eb8 <HAL_MspInit+0x30>)
 8100e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100e94:	4a08      	ldr	r2, [pc, #32]	@ (8100eb8 <HAL_MspInit+0x30>)
 8100e96:	f043 0302 	orr.w	r3, r3, #2
 8100e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100e9e:	4b06      	ldr	r3, [pc, #24]	@ (8100eb8 <HAL_MspInit+0x30>)
 8100ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100ea4:	f003 0302 	and.w	r3, r3, #2
 8100ea8:	607b      	str	r3, [r7, #4]
 8100eaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100eac:	bf00      	nop
 8100eae:	370c      	adds	r7, #12
 8100eb0:	46bd      	mov	sp, r7
 8100eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb6:	4770      	bx	lr
 8100eb8:	58024400 	.word	0x58024400

08100ebc <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100ebc:	b580      	push	{r7, lr}
 8100ebe:	b092      	sub	sp, #72	@ 0x48
 8100ec0:	af00      	add	r7, sp, #0
 8100ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ec4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8100ec8:	2200      	movs	r2, #0
 8100eca:	601a      	str	r2, [r3, #0]
 8100ecc:	605a      	str	r2, [r3, #4]
 8100ece:	609a      	str	r2, [r3, #8]
 8100ed0:	60da      	str	r2, [r3, #12]
 8100ed2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8100ed4:	687b      	ldr	r3, [r7, #4]
 8100ed6:	681b      	ldr	r3, [r3, #0]
 8100ed8:	4a87      	ldr	r2, [pc, #540]	@ (81010f8 <HAL_ETH_MspInit+0x23c>)
 8100eda:	4293      	cmp	r3, r2
 8100edc:	f040 8108 	bne.w	81010f0 <HAL_ETH_MspInit+0x234>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8100ee0:	4b86      	ldr	r3, [pc, #536]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ee6:	4a85      	ldr	r2, [pc, #532]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8100eec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100ef0:	4b82      	ldr	r3, [pc, #520]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8100efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8100efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8100efe:	4b7f      	ldr	r3, [pc, #508]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100f04:	4a7d      	ldr	r2, [pc, #500]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100f0e:	4b7b      	ldr	r3, [pc, #492]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8100f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8100f1c:	4b77      	ldr	r3, [pc, #476]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100f22:	4a76      	ldr	r2, [pc, #472]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100f28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100f2c:	4b73      	ldr	r3, [pc, #460]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100f3a:	4b70      	ldr	r3, [pc, #448]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f40:	4a6e      	ldr	r2, [pc, #440]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f4a:	4b6c      	ldr	r3, [pc, #432]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8100f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100f58:	4b68      	ldr	r3, [pc, #416]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f5e:	4a67      	ldr	r2, [pc, #412]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f60:	f043 0310 	orr.w	r3, r3, #16
 8100f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f68:	4b64      	ldr	r3, [pc, #400]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f6e:	f003 0310 	and.w	r3, r3, #16
 8100f72:	623b      	str	r3, [r7, #32]
 8100f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8100f76:	4b61      	ldr	r3, [pc, #388]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f7c:	4a5f      	ldr	r2, [pc, #380]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f86:	4b5d      	ldr	r3, [pc, #372]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100f90:	61fb      	str	r3, [r7, #28]
 8100f92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100f94:	4b59      	ldr	r3, [pc, #356]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f9a:	4a58      	ldr	r2, [pc, #352]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100f9c:	f043 0304 	orr.w	r3, r3, #4
 8100fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fa4:	4b55      	ldr	r3, [pc, #340]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100faa:	f003 0304 	and.w	r3, r3, #4
 8100fae:	61bb      	str	r3, [r7, #24]
 8100fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100fb2:	4b52      	ldr	r3, [pc, #328]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fb8:	4a50      	ldr	r2, [pc, #320]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fc2:	4b4e      	ldr	r3, [pc, #312]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100fcc:	617b      	str	r3, [r7, #20]
 8100fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100fd0:	4b4a      	ldr	r3, [pc, #296]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fd6:	4a49      	ldr	r2, [pc, #292]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fd8:	f043 0301 	orr.w	r3, r3, #1
 8100fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fe0:	4b46      	ldr	r3, [pc, #280]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fe6:	f003 0301 	and.w	r3, r3, #1
 8100fea:	613b      	str	r3, [r7, #16]
 8100fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fee:	4b43      	ldr	r3, [pc, #268]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff4:	4a41      	ldr	r2, [pc, #260]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8100ff6:	f043 0302 	orr.w	r3, r3, #2
 8100ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ffe:	4b3f      	ldr	r3, [pc, #252]	@ (81010fc <HAL_ETH_MspInit+0x240>)
 8101000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101004:	f003 0302 	and.w	r3, r3, #2
 8101008:	60fb      	str	r3, [r7, #12]
 810100a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 810100c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101010:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101012:	2302      	movs	r3, #2
 8101014:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101016:	2300      	movs	r3, #0
 8101018:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810101a:	2300      	movs	r3, #0
 810101c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810101e:	230b      	movs	r3, #11
 8101020:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101022:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101026:	4619      	mov	r1, r3
 8101028:	4835      	ldr	r0, [pc, #212]	@ (8101100 <HAL_ETH_MspInit+0x244>)
 810102a:	f001 ff05 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 810102e:	2304      	movs	r3, #4
 8101030:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101032:	2302      	movs	r3, #2
 8101034:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101036:	2300      	movs	r3, #0
 8101038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810103a:	2300      	movs	r3, #0
 810103c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810103e:	230b      	movs	r3, #11
 8101040:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8101042:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101046:	4619      	mov	r1, r3
 8101048:	482e      	ldr	r0, [pc, #184]	@ (8101104 <HAL_ETH_MspInit+0x248>)
 810104a:	f001 fef5 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 810104e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101052:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101054:	2302      	movs	r3, #2
 8101056:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101058:	2300      	movs	r3, #0
 810105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810105c:	2300      	movs	r3, #0
 810105e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101060:	230b      	movs	r3, #11
 8101062:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8101064:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101068:	4619      	mov	r1, r3
 810106a:	4827      	ldr	r0, [pc, #156]	@ (8101108 <HAL_ETH_MspInit+0x24c>)
 810106c:	f001 fee4 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8101070:	233e      	movs	r3, #62	@ 0x3e
 8101072:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101074:	2302      	movs	r3, #2
 8101076:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101078:	2300      	movs	r3, #0
 810107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810107c:	2300      	movs	r3, #0
 810107e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101080:	230b      	movs	r3, #11
 8101082:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101084:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101088:	4619      	mov	r1, r3
 810108a:	4820      	ldr	r0, [pc, #128]	@ (810110c <HAL_ETH_MspInit+0x250>)
 810108c:	f001 fed4 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8101090:	230c      	movs	r3, #12
 8101092:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101094:	2302      	movs	r3, #2
 8101096:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101098:	2300      	movs	r3, #0
 810109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810109c:	2300      	movs	r3, #0
 810109e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81010a0:	230b      	movs	r3, #11
 81010a2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81010a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81010a8:	4619      	mov	r1, r3
 81010aa:	4819      	ldr	r0, [pc, #100]	@ (8101110 <HAL_ETH_MspInit+0x254>)
 81010ac:	f001 fec4 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 81010b0:	2386      	movs	r3, #134	@ 0x86
 81010b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010b4:	2302      	movs	r3, #2
 81010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010b8:	2300      	movs	r3, #0
 81010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010bc:	2300      	movs	r3, #0
 81010be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81010c0:	230b      	movs	r3, #11
 81010c2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81010c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81010c8:	4619      	mov	r1, r3
 81010ca:	4812      	ldr	r0, [pc, #72]	@ (8101114 <HAL_ETH_MspInit+0x258>)
 81010cc:	f001 feb4 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 81010d0:	2303      	movs	r3, #3
 81010d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010d4:	2302      	movs	r3, #2
 81010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010d8:	2300      	movs	r3, #0
 81010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010dc:	2300      	movs	r3, #0
 81010de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81010e0:	230b      	movs	r3, #11
 81010e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81010e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81010e8:	4619      	mov	r1, r3
 81010ea:	480b      	ldr	r0, [pc, #44]	@ (8101118 <HAL_ETH_MspInit+0x25c>)
 81010ec:	f001 fea4 	bl	8102e38 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 81010f0:	bf00      	nop
 81010f2:	3748      	adds	r7, #72	@ 0x48
 81010f4:	46bd      	mov	sp, r7
 81010f6:	bd80      	pop	{r7, pc}
 81010f8:	40028000 	.word	0x40028000
 81010fc:	58024400 	.word	0x58024400
 8101100:	58021800 	.word	0x58021800
 8101104:	58021000 	.word	0x58021000
 8101108:	58022000 	.word	0x58022000
 810110c:	58020800 	.word	0x58020800
 8101110:	58021c00 	.word	0x58021c00
 8101114:	58020000 	.word	0x58020000
 8101118:	58020400 	.word	0x58020400

0810111c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 810111c:	b580      	push	{r7, lr}
 810111e:	b0bc      	sub	sp, #240	@ 0xf0
 8101120:	af00      	add	r7, sp, #0
 8101122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101124:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101128:	2200      	movs	r2, #0
 810112a:	601a      	str	r2, [r3, #0]
 810112c:	605a      	str	r2, [r3, #4]
 810112e:	609a      	str	r2, [r3, #8]
 8101130:	60da      	str	r2, [r3, #12]
 8101132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101134:	f107 0318 	add.w	r3, r7, #24
 8101138:	22c0      	movs	r2, #192	@ 0xc0
 810113a:	2100      	movs	r1, #0
 810113c:	4618      	mov	r0, r3
 810113e:	f008 fc4c 	bl	81099da <memset>
  if(hfdcan->Instance==FDCAN1)
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	681b      	ldr	r3, [r3, #0]
 8101146:	4a57      	ldr	r2, [pc, #348]	@ (81012a4 <HAL_FDCAN_MspInit+0x188>)
 8101148:	4293      	cmp	r3, r2
 810114a:	d151      	bne.n	81011f0 <HAL_FDCAN_MspInit+0xd4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 810114c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101150:	f04f 0300 	mov.w	r3, #0
 8101154:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8101158:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810115c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101160:	f107 0318 	add.w	r3, r7, #24
 8101164:	4618      	mov	r0, r3
 8101166:	f003 fbad 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 810116a:	4603      	mov	r3, r0
 810116c:	2b00      	cmp	r3, #0
 810116e:	d001      	beq.n	8101174 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8101170:	f7ff fe84 	bl	8100e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101174:	4b4c      	ldr	r3, [pc, #304]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 8101176:	681b      	ldr	r3, [r3, #0]
 8101178:	3301      	adds	r3, #1
 810117a:	4a4b      	ldr	r2, [pc, #300]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 810117c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 810117e:	4b4a      	ldr	r3, [pc, #296]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 8101180:	681b      	ldr	r3, [r3, #0]
 8101182:	2b01      	cmp	r3, #1
 8101184:	d10e      	bne.n	81011a4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101186:	4b49      	ldr	r3, [pc, #292]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101188:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810118c:	4a47      	ldr	r2, [pc, #284]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 810118e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101192:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8101196:	4b45      	ldr	r3, [pc, #276]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101198:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810119c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81011a0:	617b      	str	r3, [r7, #20]
 81011a2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 81011a4:	4b41      	ldr	r3, [pc, #260]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011aa:	4a40      	ldr	r2, [pc, #256]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 81011ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011b4:	4b3d      	ldr	r3, [pc, #244]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 81011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81011be:	613b      	str	r3, [r7, #16]
 81011c0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 81011c2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 81011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ca:	2302      	movs	r3, #2
 81011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d0:	2300      	movs	r3, #0
 81011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011d6:	2300      	movs	r3, #0
 81011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 81011dc:	2309      	movs	r3, #9
 81011de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81011e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81011e6:	4619      	mov	r1, r3
 81011e8:	4831      	ldr	r0, [pc, #196]	@ (81012b0 <HAL_FDCAN_MspInit+0x194>)
 81011ea:	f001 fe25 	bl	8102e38 <HAL_GPIO_Init>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 81011ee:	e055      	b.n	810129c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	681b      	ldr	r3, [r3, #0]
 81011f4:	4a2f      	ldr	r2, [pc, #188]	@ (81012b4 <HAL_FDCAN_MspInit+0x198>)
 81011f6:	4293      	cmp	r3, r2
 81011f8:	d150      	bne.n	810129c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 81011fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 81011fe:	f04f 0300 	mov.w	r3, #0
 8101202:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8101206:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810120a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810120e:	f107 0318 	add.w	r3, r7, #24
 8101212:	4618      	mov	r0, r3
 8101214:	f003 fb56 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 810121e:	f7ff fe2d 	bl	8100e7c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101222:	4b21      	ldr	r3, [pc, #132]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	3301      	adds	r3, #1
 8101228:	4a1f      	ldr	r2, [pc, #124]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 810122a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 810122c:	4b1e      	ldr	r3, [pc, #120]	@ (81012a8 <HAL_FDCAN_MspInit+0x18c>)
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	2b01      	cmp	r3, #1
 8101232:	d10e      	bne.n	8101252 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101234:	4b1d      	ldr	r3, [pc, #116]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101236:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810123a:	4a1c      	ldr	r2, [pc, #112]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 810123c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101240:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8101244:	4b19      	ldr	r3, [pc, #100]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101246:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810124a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810124e:	60fb      	str	r3, [r7, #12]
 8101250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101252:	4b16      	ldr	r3, [pc, #88]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101258:	4a14      	ldr	r2, [pc, #80]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 810125a:	f043 0302 	orr.w	r3, r3, #2
 810125e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101262:	4b12      	ldr	r3, [pc, #72]	@ (81012ac <HAL_FDCAN_MspInit+0x190>)
 8101264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101268:	f003 0302 	and.w	r3, r3, #2
 810126c:	60bb      	str	r3, [r7, #8]
 810126e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8101270:	f242 0320 	movw	r3, #8224	@ 0x2020
 8101274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101278:	2302      	movs	r3, #2
 810127a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810127e:	2300      	movs	r3, #0
 8101280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101284:	2300      	movs	r3, #0
 8101286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 810128a:	2309      	movs	r3, #9
 810128c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101290:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101294:	4619      	mov	r1, r3
 8101296:	4808      	ldr	r0, [pc, #32]	@ (81012b8 <HAL_FDCAN_MspInit+0x19c>)
 8101298:	f001 fdce 	bl	8102e38 <HAL_GPIO_Init>
}
 810129c:	bf00      	nop
 810129e:	37f0      	adds	r7, #240	@ 0xf0
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	4000a000 	.word	0x4000a000
 81012a8:	10000cbc 	.word	0x10000cbc
 81012ac:	58024400 	.word	0x58024400
 81012b0:	58021c00 	.word	0x58021c00
 81012b4:	4000a400 	.word	0x4000a400
 81012b8:	58020400 	.word	0x58020400

081012bc <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b0bc      	sub	sp, #240	@ 0xf0
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81012c8:	2200      	movs	r2, #0
 81012ca:	601a      	str	r2, [r3, #0]
 81012cc:	605a      	str	r2, [r3, #4]
 81012ce:	609a      	str	r2, [r3, #8]
 81012d0:	60da      	str	r2, [r3, #12]
 81012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81012d4:	f107 0318 	add.w	r3, r7, #24
 81012d8:	22c0      	movs	r2, #192	@ 0xc0
 81012da:	2100      	movs	r1, #0
 81012dc:	4618      	mov	r0, r3
 81012de:	f008 fb7c 	bl	81099da <memset>
  if(hqspi->Instance==QUADSPI)
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	4a56      	ldr	r2, [pc, #344]	@ (8101440 <HAL_QSPI_MspInit+0x184>)
 81012e8:	4293      	cmp	r3, r2
 81012ea:	f040 80a5 	bne.w	8101438 <HAL_QSPI_MspInit+0x17c>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 81012ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 81012f2:	f04f 0300 	mov.w	r3, #0
 81012f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 81012fa:	2300      	movs	r3, #0
 81012fc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81012fe:	f107 0318 	add.w	r3, r7, #24
 8101302:	4618      	mov	r0, r3
 8101304:	f003 fade 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 8101308:	4603      	mov	r3, r0
 810130a:	2b00      	cmp	r3, #0
 810130c:	d001      	beq.n	8101312 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810130e:	f7ff fdb5 	bl	8100e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101312:	4b4c      	ldr	r3, [pc, #304]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101318:	4a4a      	ldr	r2, [pc, #296]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 810131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810131e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101322:	4b48      	ldr	r3, [pc, #288]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101324:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810132c:	617b      	str	r3, [r7, #20]
 810132e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101330:	4b44      	ldr	r3, [pc, #272]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101336:	4a43      	ldr	r2, [pc, #268]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101338:	f043 0302 	orr.w	r3, r3, #2
 810133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101340:	4b40      	ldr	r3, [pc, #256]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101346:	f003 0302 	and.w	r3, r3, #2
 810134a:	613b      	str	r3, [r7, #16]
 810134c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810134e:	4b3d      	ldr	r3, [pc, #244]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101354:	4a3b      	ldr	r2, [pc, #236]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101356:	f043 0320 	orr.w	r3, r3, #32
 810135a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810135e:	4b39      	ldr	r3, [pc, #228]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101364:	f003 0320 	and.w	r3, r3, #32
 8101368:	60fb      	str	r3, [r7, #12]
 810136a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810136c:	4b35      	ldr	r3, [pc, #212]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 810136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101372:	4a34      	ldr	r2, [pc, #208]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 8101374:	f043 0308 	orr.w	r3, r3, #8
 8101378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810137c:	4b31      	ldr	r3, [pc, #196]	@ (8101444 <HAL_QSPI_MspInit+0x188>)
 810137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101382:	f003 0308 	and.w	r3, r3, #8
 8101386:	60bb      	str	r3, [r7, #8]
 8101388:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 810138a:	2340      	movs	r3, #64	@ 0x40
 810138c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101390:	2302      	movs	r3, #2
 8101392:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101396:	2300      	movs	r3, #0
 8101398:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810139c:	2300      	movs	r3, #0
 810139e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81013a2:	230a      	movs	r3, #10
 81013a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81013a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81013ac:	4619      	mov	r1, r3
 81013ae:	4826      	ldr	r0, [pc, #152]	@ (8101448 <HAL_QSPI_MspInit+0x18c>)
 81013b0:	f001 fd42 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81013b4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 81013b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013bc:	2302      	movs	r3, #2
 81013be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c2:	2300      	movs	r3, #0
 81013c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013c8:	2300      	movs	r3, #0
 81013ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81013ce:	2309      	movs	r3, #9
 81013d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81013d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81013d8:	4619      	mov	r1, r3
 81013da:	481c      	ldr	r0, [pc, #112]	@ (810144c <HAL_QSPI_MspInit+0x190>)
 81013dc:	f001 fd2c 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81013e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81013e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013e8:	2302      	movs	r3, #2
 81013ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ee:	2300      	movs	r3, #0
 81013f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013f4:	2300      	movs	r3, #0
 81013f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81013fa:	230a      	movs	r3, #10
 81013fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101400:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101404:	4619      	mov	r1, r3
 8101406:	4811      	ldr	r0, [pc, #68]	@ (810144c <HAL_QSPI_MspInit+0x190>)
 8101408:	f001 fd16 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810140c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101410:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101414:	2302      	movs	r3, #2
 8101416:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810141a:	2300      	movs	r3, #0
 810141c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101420:	2300      	movs	r3, #0
 8101422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101426:	2309      	movs	r3, #9
 8101428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810142c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101430:	4619      	mov	r1, r3
 8101432:	4807      	ldr	r0, [pc, #28]	@ (8101450 <HAL_QSPI_MspInit+0x194>)
 8101434:	f001 fd00 	bl	8102e38 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101438:	bf00      	nop
 810143a:	37f0      	adds	r7, #240	@ 0xf0
 810143c:	46bd      	mov	sp, r7
 810143e:	bd80      	pop	{r7, pc}
 8101440:	52005000 	.word	0x52005000
 8101444:	58024400 	.word	0x58024400
 8101448:	58020400 	.word	0x58020400
 810144c:	58021400 	.word	0x58021400
 8101450:	58020c00 	.word	0x58020c00

08101454 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8101454:	b580      	push	{r7, lr}
 8101456:	b0bc      	sub	sp, #240	@ 0xf0
 8101458:	af00      	add	r7, sp, #0
 810145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810145c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101460:	2200      	movs	r2, #0
 8101462:	601a      	str	r2, [r3, #0]
 8101464:	605a      	str	r2, [r3, #4]
 8101466:	609a      	str	r2, [r3, #8]
 8101468:	60da      	str	r2, [r3, #12]
 810146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810146c:	f107 0318 	add.w	r3, r7, #24
 8101470:	22c0      	movs	r2, #192	@ 0xc0
 8101472:	2100      	movs	r1, #0
 8101474:	4618      	mov	r0, r3
 8101476:	f008 fab0 	bl	81099da <memset>
  if(hmmc->Instance==SDMMC1)
 810147a:	687b      	ldr	r3, [r7, #4]
 810147c:	681b      	ldr	r3, [r3, #0]
 810147e:	4a4b      	ldr	r2, [pc, #300]	@ (81015ac <HAL_MMC_MspInit+0x158>)
 8101480:	4293      	cmp	r3, r2
 8101482:	f040 808f 	bne.w	81015a4 <HAL_MMC_MspInit+0x150>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101486:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810148a:	f04f 0300 	mov.w	r3, #0
 810148e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101492:	2300      	movs	r3, #0
 8101494:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101496:	f107 0318 	add.w	r3, r7, #24
 810149a:	4618      	mov	r0, r3
 810149c:	f003 fa12 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 81014a0:	4603      	mov	r3, r0
 81014a2:	2b00      	cmp	r3, #0
 81014a4:	d001      	beq.n	81014aa <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 81014a6:	f7ff fce9 	bl	8100e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 81014aa:	4b41      	ldr	r3, [pc, #260]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81014b0:	4a3f      	ldr	r2, [pc, #252]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81014b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81014ba:	4b3d      	ldr	r3, [pc, #244]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81014c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81014c4:	617b      	str	r3, [r7, #20]
 81014c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81014c8:	4b39      	ldr	r3, [pc, #228]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014ce:	4a38      	ldr	r2, [pc, #224]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014d0:	f043 0304 	orr.w	r3, r3, #4
 81014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014d8:	4b35      	ldr	r3, [pc, #212]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014de:	f003 0304 	and.w	r3, r3, #4
 81014e2:	613b      	str	r3, [r7, #16]
 81014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014e6:	4b32      	ldr	r3, [pc, #200]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014ec:	4a30      	ldr	r2, [pc, #192]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014ee:	f043 0302 	orr.w	r3, r3, #2
 81014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014f6:	4b2e      	ldr	r3, [pc, #184]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 81014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014fc:	f003 0302 	and.w	r3, r3, #2
 8101500:	60fb      	str	r3, [r7, #12]
 8101502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101504:	4b2a      	ldr	r3, [pc, #168]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 8101506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810150a:	4a29      	ldr	r2, [pc, #164]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 810150c:	f043 0308 	orr.w	r3, r3, #8
 8101510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101514:	4b26      	ldr	r3, [pc, #152]	@ (81015b0 <HAL_MMC_MspInit+0x15c>)
 8101516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810151a:	f003 0308 	and.w	r3, r3, #8
 810151e:	60bb      	str	r3, [r7, #8]
 8101520:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101522:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8101526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810152a:	2302      	movs	r3, #2
 810152c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101530:	2300      	movs	r3, #0
 8101532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101536:	2303      	movs	r3, #3
 8101538:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810153c:	230c      	movs	r3, #12
 810153e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101542:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101546:	4619      	mov	r1, r3
 8101548:	481a      	ldr	r0, [pc, #104]	@ (81015b4 <HAL_MMC_MspInit+0x160>)
 810154a:	f001 fc75 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 810154e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8101552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101556:	2302      	movs	r3, #2
 8101558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810155c:	2300      	movs	r3, #0
 810155e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101562:	2303      	movs	r3, #3
 8101564:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101568:	230c      	movs	r3, #12
 810156a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810156e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101572:	4619      	mov	r1, r3
 8101574:	4810      	ldr	r0, [pc, #64]	@ (81015b8 <HAL_MMC_MspInit+0x164>)
 8101576:	f001 fc5f 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 810157a:	2304      	movs	r3, #4
 810157c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101580:	2302      	movs	r3, #2
 8101582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101586:	2300      	movs	r3, #0
 8101588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810158c:	2303      	movs	r3, #3
 810158e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101592:	230c      	movs	r3, #12
 8101594:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101598:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810159c:	4619      	mov	r1, r3
 810159e:	4807      	ldr	r0, [pc, #28]	@ (81015bc <HAL_MMC_MspInit+0x168>)
 81015a0:	f001 fc4a 	bl	8102e38 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 81015a4:	bf00      	nop
 81015a6:	37f0      	adds	r7, #240	@ 0xf0
 81015a8:	46bd      	mov	sp, r7
 81015aa:	bd80      	pop	{r7, pc}
 81015ac:	52007000 	.word	0x52007000
 81015b0:	58024400 	.word	0x58024400
 81015b4:	58020800 	.word	0x58020800
 81015b8:	58020400 	.word	0x58020400
 81015bc:	58020c00 	.word	0x58020c00

081015c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81015c0:	b580      	push	{r7, lr}
 81015c2:	b0ba      	sub	sp, #232	@ 0xe8
 81015c4:	af00      	add	r7, sp, #0
 81015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81015cc:	2200      	movs	r2, #0
 81015ce:	601a      	str	r2, [r3, #0]
 81015d0:	605a      	str	r2, [r3, #4]
 81015d2:	609a      	str	r2, [r3, #8]
 81015d4:	60da      	str	r2, [r3, #12]
 81015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015d8:	f107 0310 	add.w	r3, r7, #16
 81015dc:	22c0      	movs	r2, #192	@ 0xc0
 81015de:	2100      	movs	r1, #0
 81015e0:	4618      	mov	r0, r3
 81015e2:	f008 f9fa 	bl	81099da <memset>
  if(huart->Instance==USART3)
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	681b      	ldr	r3, [r3, #0]
 81015ea:	4a27      	ldr	r2, [pc, #156]	@ (8101688 <HAL_UART_MspInit+0xc8>)
 81015ec:	4293      	cmp	r3, r2
 81015ee:	d146      	bne.n	810167e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81015f0:	f04f 0202 	mov.w	r2, #2
 81015f4:	f04f 0300 	mov.w	r3, #0
 81015f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81015fc:	2300      	movs	r3, #0
 81015fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101602:	f107 0310 	add.w	r3, r7, #16
 8101606:	4618      	mov	r0, r3
 8101608:	f003 f95c 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 810160c:	4603      	mov	r3, r0
 810160e:	2b00      	cmp	r3, #0
 8101610:	d001      	beq.n	8101616 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101612:	f7ff fc33 	bl	8100e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101616:	4b1d      	ldr	r3, [pc, #116]	@ (810168c <HAL_UART_MspInit+0xcc>)
 8101618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810161c:	4a1b      	ldr	r2, [pc, #108]	@ (810168c <HAL_UART_MspInit+0xcc>)
 810161e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8101622:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101626:	4b19      	ldr	r3, [pc, #100]	@ (810168c <HAL_UART_MspInit+0xcc>)
 8101628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810162c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101630:	60fb      	str	r3, [r7, #12]
 8101632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101634:	4b15      	ldr	r3, [pc, #84]	@ (810168c <HAL_UART_MspInit+0xcc>)
 8101636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810163a:	4a14      	ldr	r2, [pc, #80]	@ (810168c <HAL_UART_MspInit+0xcc>)
 810163c:	f043 0302 	orr.w	r3, r3, #2
 8101640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101644:	4b11      	ldr	r3, [pc, #68]	@ (810168c <HAL_UART_MspInit+0xcc>)
 8101646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810164a:	f003 0302 	and.w	r3, r3, #2
 810164e:	60bb      	str	r3, [r7, #8]
 8101650:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8101652:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810165a:	2302      	movs	r3, #2
 810165c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101660:	2300      	movs	r3, #0
 8101662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101666:	2300      	movs	r3, #0
 8101668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810166c:	2307      	movs	r3, #7
 810166e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101672:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101676:	4619      	mov	r1, r3
 8101678:	4805      	ldr	r0, [pc, #20]	@ (8101690 <HAL_UART_MspInit+0xd0>)
 810167a:	f001 fbdd 	bl	8102e38 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 810167e:	bf00      	nop
 8101680:	37e8      	adds	r7, #232	@ 0xe8
 8101682:	46bd      	mov	sp, r7
 8101684:	bd80      	pop	{r7, pc}
 8101686:	bf00      	nop
 8101688:	40004800 	.word	0x40004800
 810168c:	58024400 	.word	0x58024400
 8101690:	58020400 	.word	0x58020400

08101694 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101694:	b580      	push	{r7, lr}
 8101696:	b0ba      	sub	sp, #232	@ 0xe8
 8101698:	af00      	add	r7, sp, #0
 810169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810169c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81016a0:	2200      	movs	r2, #0
 81016a2:	601a      	str	r2, [r3, #0]
 81016a4:	605a      	str	r2, [r3, #4]
 81016a6:	609a      	str	r2, [r3, #8]
 81016a8:	60da      	str	r2, [r3, #12]
 81016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016ac:	f107 0310 	add.w	r3, r7, #16
 81016b0:	22c0      	movs	r2, #192	@ 0xc0
 81016b2:	2100      	movs	r1, #0
 81016b4:	4618      	mov	r0, r3
 81016b6:	f008 f990 	bl	81099da <memset>
  if(hpcd->Instance==USB_OTG_FS)
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	681b      	ldr	r3, [r3, #0]
 81016be:	4a30      	ldr	r2, [pc, #192]	@ (8101780 <HAL_PCD_MspInit+0xec>)
 81016c0:	4293      	cmp	r3, r2
 81016c2:	d159      	bne.n	8101778 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81016c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81016c8:	f04f 0300 	mov.w	r3, #0
 81016cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81016d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81016d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016d8:	f107 0310 	add.w	r3, r7, #16
 81016dc:	4618      	mov	r0, r3
 81016de:	f003 f8f1 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 81016e2:	4603      	mov	r3, r0
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	d001      	beq.n	81016ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 81016e8:	f7ff fbc8 	bl	8100e7c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81016ec:	f002 fe48 	bl	8104380 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81016f0:	4b24      	ldr	r3, [pc, #144]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 81016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016f6:	4a23      	ldr	r2, [pc, #140]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 81016f8:	f043 0301 	orr.w	r3, r3, #1
 81016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101700:	4b20      	ldr	r3, [pc, #128]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 8101702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101706:	f003 0301 	and.w	r3, r3, #1
 810170a:	60fb      	str	r3, [r7, #12]
 810170c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 810170e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101716:	2300      	movs	r3, #0
 8101718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810171c:	2300      	movs	r3, #0
 810171e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8101722:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101726:	4619      	mov	r1, r3
 8101728:	4817      	ldr	r0, [pc, #92]	@ (8101788 <HAL_PCD_MspInit+0xf4>)
 810172a:	f001 fb85 	bl	8102e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 810172e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101736:	2302      	movs	r3, #2
 8101738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810173c:	2300      	movs	r3, #0
 810173e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101742:	2300      	movs	r3, #0
 8101744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8101748:	230a      	movs	r3, #10
 810174a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810174e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101752:	4619      	mov	r1, r3
 8101754:	480c      	ldr	r0, [pc, #48]	@ (8101788 <HAL_PCD_MspInit+0xf4>)
 8101756:	f001 fb6f 	bl	8102e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810175a:	4b0a      	ldr	r3, [pc, #40]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 810175c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101760:	4a08      	ldr	r2, [pc, #32]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 8101762:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101766:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810176a:	4b06      	ldr	r3, [pc, #24]	@ (8101784 <HAL_PCD_MspInit+0xf0>)
 810176c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101774:	60bb      	str	r3, [r7, #8]
 8101776:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8101778:	bf00      	nop
 810177a:	37e8      	adds	r7, #232	@ 0xe8
 810177c:	46bd      	mov	sp, r7
 810177e:	bd80      	pop	{r7, pc}
 8101780:	40080000 	.word	0x40080000
 8101784:	58024400 	.word	0x58024400
 8101788:	58020000 	.word	0x58020000

0810178c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 810178c:	b580      	push	{r7, lr}
 810178e:	b0b8      	sub	sp, #224	@ 0xe0
 8101790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8101792:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101796:	2200      	movs	r2, #0
 8101798:	601a      	str	r2, [r3, #0]
 810179a:	605a      	str	r2, [r3, #4]
 810179c:	609a      	str	r2, [r3, #8]
 810179e:	60da      	str	r2, [r3, #12]
 81017a0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81017a2:	4b51      	ldr	r3, [pc, #324]	@ (81018e8 <HAL_FMC_MspInit+0x15c>)
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	2b00      	cmp	r3, #0
 81017a8:	f040 8099 	bne.w	81018de <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 81017ac:	4b4e      	ldr	r3, [pc, #312]	@ (81018e8 <HAL_FMC_MspInit+0x15c>)
 81017ae:	2201      	movs	r2, #1
 81017b0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017b2:	f107 0308 	add.w	r3, r7, #8
 81017b6:	22c0      	movs	r2, #192	@ 0xc0
 81017b8:	2100      	movs	r1, #0
 81017ba:	4618      	mov	r0, r3
 81017bc:	f008 f90d 	bl	81099da <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81017c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81017c4:	f04f 0300 	mov.w	r3, #0
 81017c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 81017cc:	2300      	movs	r3, #0
 81017ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017d0:	f107 0308 	add.w	r3, r7, #8
 81017d4:	4618      	mov	r0, r3
 81017d6:	f003 f875 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 81017da:	4603      	mov	r3, r0
 81017dc:	2b00      	cmp	r3, #0
 81017de:	d001      	beq.n	81017e4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 81017e0:	f7ff fb4c 	bl	8100e7c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 81017e4:	4b41      	ldr	r3, [pc, #260]	@ (81018ec <HAL_FMC_MspInit+0x160>)
 81017e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81017ea:	4a40      	ldr	r2, [pc, #256]	@ (81018ec <HAL_FMC_MspInit+0x160>)
 81017ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81017f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81017f4:	4b3d      	ldr	r3, [pc, #244]	@ (81018ec <HAL_FMC_MspInit+0x160>)
 81017f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81017fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81017fe:	607b      	str	r3, [r7, #4]
 8101800:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101802:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810180a:	2302      	movs	r3, #2
 810180c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101810:	2300      	movs	r3, #0
 8101812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101816:	2303      	movs	r3, #3
 8101818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810181c:	230c      	movs	r3, #12
 810181e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101822:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101826:	4619      	mov	r1, r3
 8101828:	4831      	ldr	r0, [pc, #196]	@ (81018f0 <HAL_FMC_MspInit+0x164>)
 810182a:	f001 fb05 	bl	8102e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 810182e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8101832:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101836:	2302      	movs	r3, #2
 8101838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810183c:	2300      	movs	r3, #0
 810183e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101842:	2303      	movs	r3, #3
 8101844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101848:	230c      	movs	r3, #12
 810184a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810184e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101852:	4619      	mov	r1, r3
 8101854:	4827      	ldr	r0, [pc, #156]	@ (81018f4 <HAL_FMC_MspInit+0x168>)
 8101856:	f001 faef 	bl	8102e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 810185a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 810185e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101862:	2302      	movs	r3, #2
 8101864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101868:	2300      	movs	r3, #0
 810186a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810186e:	2303      	movs	r3, #3
 8101870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101874:	230c      	movs	r3, #12
 8101876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810187a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 810187e:	4619      	mov	r1, r3
 8101880:	481d      	ldr	r0, [pc, #116]	@ (81018f8 <HAL_FMC_MspInit+0x16c>)
 8101882:	f001 fad9 	bl	8102e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101886:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810188a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810188e:	2302      	movs	r3, #2
 8101890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101894:	2300      	movs	r3, #0
 8101896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810189a:	2303      	movs	r3, #3
 810189c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81018a0:	230c      	movs	r3, #12
 81018a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81018a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 81018aa:	4619      	mov	r1, r3
 81018ac:	4813      	ldr	r0, [pc, #76]	@ (81018fc <HAL_FMC_MspInit+0x170>)
 81018ae:	f001 fac3 	bl	8102e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81018b2:	23e0      	movs	r3, #224	@ 0xe0
 81018b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018b8:	2302      	movs	r3, #2
 81018ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018be:	2300      	movs	r3, #0
 81018c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81018c4:	2303      	movs	r3, #3
 81018c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81018ca:	230c      	movs	r3, #12
 81018cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81018d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 81018d4:	4619      	mov	r1, r3
 81018d6:	480a      	ldr	r0, [pc, #40]	@ (8101900 <HAL_FMC_MspInit+0x174>)
 81018d8:	f001 faae 	bl	8102e38 <HAL_GPIO_Init>
 81018dc:	e000      	b.n	81018e0 <HAL_FMC_MspInit+0x154>
    return;
 81018de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 81018e0:	37e0      	adds	r7, #224	@ 0xe0
 81018e2:	46bd      	mov	sp, r7
 81018e4:	bd80      	pop	{r7, pc}
 81018e6:	bf00      	nop
 81018e8:	10000cc0 	.word	0x10000cc0
 81018ec:	58024400 	.word	0x58024400
 81018f0:	58021000 	.word	0x58021000
 81018f4:	58021800 	.word	0x58021800
 81018f8:	58020c00 	.word	0x58020c00
 81018fc:	58021400 	.word	0x58021400
 8101900:	58021c00 	.word	0x58021c00

08101904 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8101904:	b580      	push	{r7, lr}
 8101906:	b082      	sub	sp, #8
 8101908:	af00      	add	r7, sp, #0
 810190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 810190c:	f7ff ff3e 	bl	810178c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101910:	bf00      	nop
 8101912:	3708      	adds	r7, #8
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}

08101918 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101918:	b580      	push	{r7, lr}
 810191a:	b0ba      	sub	sp, #232	@ 0xe8
 810191c:	af00      	add	r7, sp, #0
 810191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101920:	f107 0310 	add.w	r3, r7, #16
 8101924:	22c0      	movs	r2, #192	@ 0xc0
 8101926:	2100      	movs	r1, #0
 8101928:	4618      	mov	r0, r3
 810192a:	f008 f856 	bl	81099da <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	4a45      	ldr	r2, [pc, #276]	@ (8101a48 <HAL_SAI_MspInit+0x130>)
 8101934:	4293      	cmp	r3, r2
 8101936:	d13e      	bne.n	81019b6 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8101938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810193c:	f04f 0300 	mov.w	r3, #0
 8101940:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101944:	2300      	movs	r3, #0
 8101946:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101948:	f107 0310 	add.w	r3, r7, #16
 810194c:	4618      	mov	r0, r3
 810194e:	f002 ffb9 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 8101952:	4603      	mov	r3, r0
 8101954:	2b00      	cmp	r3, #0
 8101956:	d001      	beq.n	810195c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101958:	f7ff fa90 	bl	8100e7c <Error_Handler>
    }

    if (SAI2_client == 0)
 810195c:	4b3b      	ldr	r3, [pc, #236]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	2b00      	cmp	r3, #0
 8101962:	d10e      	bne.n	8101982 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101964:	4b3a      	ldr	r3, [pc, #232]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 8101966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810196a:	4a39      	ldr	r2, [pc, #228]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 810196c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101970:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101974:	4b36      	ldr	r3, [pc, #216]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 8101976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810197a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810197e:	60fb      	str	r3, [r7, #12]
 8101980:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8101982:	4b32      	ldr	r3, [pc, #200]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 8101984:	681b      	ldr	r3, [r3, #0]
 8101986:	3301      	adds	r3, #1
 8101988:	4a30      	ldr	r2, [pc, #192]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 810198a:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 810198c:	23f0      	movs	r3, #240	@ 0xf0
 810198e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101992:	2302      	movs	r3, #2
 8101994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101998:	2300      	movs	r3, #0
 810199a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810199e:	2300      	movs	r3, #0
 81019a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 81019a4:	230a      	movs	r3, #10
 81019a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81019aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81019ae:	4619      	mov	r1, r3
 81019b0:	4828      	ldr	r0, [pc, #160]	@ (8101a54 <HAL_SAI_MspInit+0x13c>)
 81019b2:	f001 fa41 	bl	8102e38 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	4a27      	ldr	r2, [pc, #156]	@ (8101a58 <HAL_SAI_MspInit+0x140>)
 81019bc:	4293      	cmp	r3, r2
 81019be:	d13f      	bne.n	8101a40 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 81019c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81019c4:	f04f 0300 	mov.w	r3, #0
 81019c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 81019cc:	2300      	movs	r3, #0
 81019ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019d0:	f107 0310 	add.w	r3, r7, #16
 81019d4:	4618      	mov	r0, r3
 81019d6:	f002 ff75 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 81019da:	4603      	mov	r3, r0
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d001      	beq.n	81019e4 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 81019e0:	f7ff fa4c 	bl	8100e7c <Error_Handler>
    }

      if (SAI2_client == 0)
 81019e4:	4b19      	ldr	r3, [pc, #100]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	2b00      	cmp	r3, #0
 81019ea:	d10e      	bne.n	8101a0a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 81019ec:	4b18      	ldr	r3, [pc, #96]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 81019ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81019f2:	4a17      	ldr	r2, [pc, #92]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 81019f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81019f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81019fc:	4b14      	ldr	r3, [pc, #80]	@ (8101a50 <HAL_SAI_MspInit+0x138>)
 81019fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8101a06:	60bb      	str	r3, [r7, #8]
 8101a08:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8101a0a:	4b10      	ldr	r3, [pc, #64]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 8101a0c:	681b      	ldr	r3, [r3, #0]
 8101a0e:	3301      	adds	r3, #1
 8101a10:	4a0e      	ldr	r2, [pc, #56]	@ (8101a4c <HAL_SAI_MspInit+0x134>)
 8101a12:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a1c:	2302      	movs	r3, #2
 8101a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a22:	2300      	movs	r3, #0
 8101a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a28:	2300      	movs	r3, #0
 8101a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101a2e:	230a      	movs	r3, #10
 8101a30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101a34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101a38:	4619      	mov	r1, r3
 8101a3a:	4808      	ldr	r0, [pc, #32]	@ (8101a5c <HAL_SAI_MspInit+0x144>)
 8101a3c:	f001 f9fc 	bl	8102e38 <HAL_GPIO_Init>

    }
}
 8101a40:	bf00      	nop
 8101a42:	37e8      	adds	r7, #232	@ 0xe8
 8101a44:	46bd      	mov	sp, r7
 8101a46:	bd80      	pop	{r7, pc}
 8101a48:	40015c04 	.word	0x40015c04
 8101a4c:	10000cc4 	.word	0x10000cc4
 8101a50:	58024400 	.word	0x58024400
 8101a54:	58022000 	.word	0x58022000
 8101a58:	40015c24 	.word	0x40015c24
 8101a5c:	58021800 	.word	0x58021800

08101a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a60:	b480      	push	{r7}
 8101a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101a64:	bf00      	nop
 8101a66:	e7fd      	b.n	8101a64 <NMI_Handler+0x4>

08101a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a68:	b480      	push	{r7}
 8101a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a6c:	bf00      	nop
 8101a6e:	e7fd      	b.n	8101a6c <HardFault_Handler+0x4>

08101a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a70:	b480      	push	{r7}
 8101a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a74:	bf00      	nop
 8101a76:	e7fd      	b.n	8101a74 <MemManage_Handler+0x4>

08101a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a78:	b480      	push	{r7}
 8101a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101a7c:	bf00      	nop
 8101a7e:	e7fd      	b.n	8101a7c <BusFault_Handler+0x4>

08101a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101a80:	b480      	push	{r7}
 8101a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101a84:	bf00      	nop
 8101a86:	e7fd      	b.n	8101a84 <UsageFault_Handler+0x4>

08101a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101a88:	b480      	push	{r7}
 8101a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101a8c:	bf00      	nop
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a94:	4770      	bx	lr

08101a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a96:	b480      	push	{r7}
 8101a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a9a:	bf00      	nop
 8101a9c:	46bd      	mov	sp, r7
 8101a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa2:	4770      	bx	lr

08101aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101aa4:	b480      	push	{r7}
 8101aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101aa8:	bf00      	nop
 8101aaa:	46bd      	mov	sp, r7
 8101aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab0:	4770      	bx	lr

08101ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101ab2:	b580      	push	{r7, lr}
 8101ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101ab6:	f000 f8c3 	bl	8101c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101aba:	bf00      	nop
 8101abc:	bd80      	pop	{r7, pc}
	...

08101ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101ac0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101afc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101ac4:	f7fe fdb6 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101ac8:	f7fe fd9c 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101acc:	480c      	ldr	r0, [pc, #48]	@ (8101b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101ace:	490d      	ldr	r1, [pc, #52]	@ (8101b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8101b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101ad4:	e002      	b.n	8101adc <LoopCopyDataInit>

08101ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101ada:	3304      	adds	r3, #4

08101adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101ae0:	d3f9      	bcc.n	8101ad6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8101b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8101b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ae8:	e001      	b.n	8101aee <LoopFillZerobss>

08101aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101aec:	3204      	adds	r2, #4

08101aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101af0:	d3fb      	bcc.n	8101aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101af2:	f007 ff7b 	bl	81099ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101af6:	f7fe fdb5 	bl	8100664 <main>
  bx  lr
 8101afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101afc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101b00:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101b04:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101b08:	08109afc 	.word	0x08109afc
  ldr r2, =_sbss
 8101b0c:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8101b10:	10000ccc 	.word	0x10000ccc

08101b14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101b14:	e7fe      	b.n	8101b14 <ADC3_IRQHandler>
	...

08101b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b082      	sub	sp, #8
 8101b1c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101b1e:	4b28      	ldr	r3, [pc, #160]	@ (8101bc0 <HAL_Init+0xa8>)
 8101b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101b24:	4a26      	ldr	r2, [pc, #152]	@ (8101bc0 <HAL_Init+0xa8>)
 8101b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101b2e:	4b24      	ldr	r3, [pc, #144]	@ (8101bc0 <HAL_Init+0xa8>)
 8101b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101b38:	603b      	str	r3, [r7, #0]
 8101b3a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101b3c:	4b21      	ldr	r3, [pc, #132]	@ (8101bc4 <HAL_Init+0xac>)
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101b44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101b48:	4a1e      	ldr	r2, [pc, #120]	@ (8101bc4 <HAL_Init+0xac>)
 8101b4a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101b4e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101b50:	4b1c      	ldr	r3, [pc, #112]	@ (8101bc4 <HAL_Init+0xac>)
 8101b52:	681b      	ldr	r3, [r3, #0]
 8101b54:	4a1b      	ldr	r2, [pc, #108]	@ (8101bc4 <HAL_Init+0xac>)
 8101b56:	f043 0301 	orr.w	r3, r3, #1
 8101b5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101b5c:	2003      	movs	r0, #3
 8101b5e:	f000 f985 	bl	8101e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101b62:	f002 fcd7 	bl	8104514 <HAL_RCC_GetSysClockFreq>
 8101b66:	4602      	mov	r2, r0
 8101b68:	4b15      	ldr	r3, [pc, #84]	@ (8101bc0 <HAL_Init+0xa8>)
 8101b6a:	699b      	ldr	r3, [r3, #24]
 8101b6c:	0a1b      	lsrs	r3, r3, #8
 8101b6e:	f003 030f 	and.w	r3, r3, #15
 8101b72:	4915      	ldr	r1, [pc, #84]	@ (8101bc8 <HAL_Init+0xb0>)
 8101b74:	5ccb      	ldrb	r3, [r1, r3]
 8101b76:	f003 031f 	and.w	r3, r3, #31
 8101b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8101b7e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101b80:	4b0f      	ldr	r3, [pc, #60]	@ (8101bc0 <HAL_Init+0xa8>)
 8101b82:	699b      	ldr	r3, [r3, #24]
 8101b84:	f003 030f 	and.w	r3, r3, #15
 8101b88:	4a0f      	ldr	r2, [pc, #60]	@ (8101bc8 <HAL_Init+0xb0>)
 8101b8a:	5cd3      	ldrb	r3, [r2, r3]
 8101b8c:	f003 031f 	and.w	r3, r3, #31
 8101b90:	687a      	ldr	r2, [r7, #4]
 8101b92:	fa22 f303 	lsr.w	r3, r2, r3
 8101b96:	4a0d      	ldr	r2, [pc, #52]	@ (8101bcc <HAL_Init+0xb4>)
 8101b98:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8101bcc <HAL_Init+0xb4>)
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8101bd0 <HAL_Init+0xb8>)
 8101ba0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101ba2:	2000      	movs	r0, #0
 8101ba4:	f000 f816 	bl	8101bd4 <HAL_InitTick>
 8101ba8:	4603      	mov	r3, r0
 8101baa:	2b00      	cmp	r3, #0
 8101bac:	d001      	beq.n	8101bb2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101bae:	2301      	movs	r3, #1
 8101bb0:	e002      	b.n	8101bb8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101bb2:	f7ff f969 	bl	8100e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101bb6:	2300      	movs	r3, #0
}
 8101bb8:	4618      	mov	r0, r3
 8101bba:	3708      	adds	r7, #8
 8101bbc:	46bd      	mov	sp, r7
 8101bbe:	bd80      	pop	{r7, pc}
 8101bc0:	58024400 	.word	0x58024400
 8101bc4:	40024400 	.word	0x40024400
 8101bc8:	08109ab4 	.word	0x08109ab4
 8101bcc:	10000004 	.word	0x10000004
 8101bd0:	10000000 	.word	0x10000000

08101bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b082      	sub	sp, #8
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101bdc:	4b15      	ldr	r3, [pc, #84]	@ (8101c34 <HAL_InitTick+0x60>)
 8101bde:	781b      	ldrb	r3, [r3, #0]
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	d101      	bne.n	8101be8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101be4:	2301      	movs	r3, #1
 8101be6:	e021      	b.n	8101c2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101be8:	4b13      	ldr	r3, [pc, #76]	@ (8101c38 <HAL_InitTick+0x64>)
 8101bea:	681a      	ldr	r2, [r3, #0]
 8101bec:	4b11      	ldr	r3, [pc, #68]	@ (8101c34 <HAL_InitTick+0x60>)
 8101bee:	781b      	ldrb	r3, [r3, #0]
 8101bf0:	4619      	mov	r1, r3
 8101bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8101bfe:	4618      	mov	r0, r3
 8101c00:	f000 f959 	bl	8101eb6 <HAL_SYSTICK_Config>
 8101c04:	4603      	mov	r3, r0
 8101c06:	2b00      	cmp	r3, #0
 8101c08:	d001      	beq.n	8101c0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101c0a:	2301      	movs	r3, #1
 8101c0c:	e00e      	b.n	8101c2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	2b0f      	cmp	r3, #15
 8101c12:	d80a      	bhi.n	8101c2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101c14:	2200      	movs	r2, #0
 8101c16:	6879      	ldr	r1, [r7, #4]
 8101c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101c1c:	f000 f931 	bl	8101e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101c20:	4a06      	ldr	r2, [pc, #24]	@ (8101c3c <HAL_InitTick+0x68>)
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101c26:	2300      	movs	r3, #0
 8101c28:	e000      	b.n	8101c2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101c2a:	2301      	movs	r3, #1
}
 8101c2c:	4618      	mov	r0, r3
 8101c2e:	3708      	adds	r7, #8
 8101c30:	46bd      	mov	sp, r7
 8101c32:	bd80      	pop	{r7, pc}
 8101c34:	1000000c 	.word	0x1000000c
 8101c38:	10000000 	.word	0x10000000
 8101c3c:	10000008 	.word	0x10000008

08101c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101c40:	b480      	push	{r7}
 8101c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101c44:	4b06      	ldr	r3, [pc, #24]	@ (8101c60 <HAL_IncTick+0x20>)
 8101c46:	781b      	ldrb	r3, [r3, #0]
 8101c48:	461a      	mov	r2, r3
 8101c4a:	4b06      	ldr	r3, [pc, #24]	@ (8101c64 <HAL_IncTick+0x24>)
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	4413      	add	r3, r2
 8101c50:	4a04      	ldr	r2, [pc, #16]	@ (8101c64 <HAL_IncTick+0x24>)
 8101c52:	6013      	str	r3, [r2, #0]
}
 8101c54:	bf00      	nop
 8101c56:	46bd      	mov	sp, r7
 8101c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c5c:	4770      	bx	lr
 8101c5e:	bf00      	nop
 8101c60:	1000000c 	.word	0x1000000c
 8101c64:	10000cc8 	.word	0x10000cc8

08101c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101c68:	b480      	push	{r7}
 8101c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8101c6c:	4b03      	ldr	r3, [pc, #12]	@ (8101c7c <HAL_GetTick+0x14>)
 8101c6e:	681b      	ldr	r3, [r3, #0]
}
 8101c70:	4618      	mov	r0, r3
 8101c72:	46bd      	mov	sp, r7
 8101c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c78:	4770      	bx	lr
 8101c7a:	bf00      	nop
 8101c7c:	10000cc8 	.word	0x10000cc8

08101c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101c80:	b580      	push	{r7, lr}
 8101c82:	b084      	sub	sp, #16
 8101c84:	af00      	add	r7, sp, #0
 8101c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101c88:	f7ff ffee 	bl	8101c68 <HAL_GetTick>
 8101c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101c92:	68fb      	ldr	r3, [r7, #12]
 8101c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101c98:	d005      	beq.n	8101ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8101cc4 <HAL_Delay+0x44>)
 8101c9c:	781b      	ldrb	r3, [r3, #0]
 8101c9e:	461a      	mov	r2, r3
 8101ca0:	68fb      	ldr	r3, [r7, #12]
 8101ca2:	4413      	add	r3, r2
 8101ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101ca6:	bf00      	nop
 8101ca8:	f7ff ffde 	bl	8101c68 <HAL_GetTick>
 8101cac:	4602      	mov	r2, r0
 8101cae:	68bb      	ldr	r3, [r7, #8]
 8101cb0:	1ad3      	subs	r3, r2, r3
 8101cb2:	68fa      	ldr	r2, [r7, #12]
 8101cb4:	429a      	cmp	r2, r3
 8101cb6:	d8f7      	bhi.n	8101ca8 <HAL_Delay+0x28>
  {
  }
}
 8101cb8:	bf00      	nop
 8101cba:	bf00      	nop
 8101cbc:	3710      	adds	r7, #16
 8101cbe:	46bd      	mov	sp, r7
 8101cc0:	bd80      	pop	{r7, pc}
 8101cc2:	bf00      	nop
 8101cc4:	1000000c 	.word	0x1000000c

08101cc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101cc8:	b480      	push	{r7}
 8101cca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101ccc:	4b03      	ldr	r3, [pc, #12]	@ (8101cdc <HAL_GetREVID+0x14>)
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	0c1b      	lsrs	r3, r3, #16
}
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	46bd      	mov	sp, r7
 8101cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cda:	4770      	bx	lr
 8101cdc:	5c001000 	.word	0x5c001000

08101ce0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101ce0:	b480      	push	{r7}
 8101ce2:	b083      	sub	sp, #12
 8101ce4:	af00      	add	r7, sp, #0
 8101ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101ce8:	4b06      	ldr	r3, [pc, #24]	@ (8101d04 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101cea:	685b      	ldr	r3, [r3, #4]
 8101cec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8101cf0:	4904      	ldr	r1, [pc, #16]	@ (8101d04 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	4313      	orrs	r3, r2
 8101cf6:	604b      	str	r3, [r1, #4]
}
 8101cf8:	bf00      	nop
 8101cfa:	370c      	adds	r7, #12
 8101cfc:	46bd      	mov	sp, r7
 8101cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d02:	4770      	bx	lr
 8101d04:	58000400 	.word	0x58000400

08101d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d08:	b480      	push	{r7}
 8101d0a:	b085      	sub	sp, #20
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	f003 0307 	and.w	r3, r3, #7
 8101d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101d18:	4b0c      	ldr	r3, [pc, #48]	@ (8101d4c <__NVIC_SetPriorityGrouping+0x44>)
 8101d1a:	68db      	ldr	r3, [r3, #12]
 8101d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d1e:	68ba      	ldr	r2, [r7, #8]
 8101d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101d24:	4013      	ands	r3, r2
 8101d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d28:	68fb      	ldr	r3, [r7, #12]
 8101d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d2c:	68bb      	ldr	r3, [r7, #8]
 8101d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101d3a:	4a04      	ldr	r2, [pc, #16]	@ (8101d4c <__NVIC_SetPriorityGrouping+0x44>)
 8101d3c:	68bb      	ldr	r3, [r7, #8]
 8101d3e:	60d3      	str	r3, [r2, #12]
}
 8101d40:	bf00      	nop
 8101d42:	3714      	adds	r7, #20
 8101d44:	46bd      	mov	sp, r7
 8101d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d4a:	4770      	bx	lr
 8101d4c:	e000ed00 	.word	0xe000ed00

08101d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101d50:	b480      	push	{r7}
 8101d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101d54:	4b04      	ldr	r3, [pc, #16]	@ (8101d68 <__NVIC_GetPriorityGrouping+0x18>)
 8101d56:	68db      	ldr	r3, [r3, #12]
 8101d58:	0a1b      	lsrs	r3, r3, #8
 8101d5a:	f003 0307 	and.w	r3, r3, #7
}
 8101d5e:	4618      	mov	r0, r3
 8101d60:	46bd      	mov	sp, r7
 8101d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d66:	4770      	bx	lr
 8101d68:	e000ed00 	.word	0xe000ed00

08101d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101d6c:	b480      	push	{r7}
 8101d6e:	b083      	sub	sp, #12
 8101d70:	af00      	add	r7, sp, #0
 8101d72:	4603      	mov	r3, r0
 8101d74:	6039      	str	r1, [r7, #0]
 8101d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d7c:	2b00      	cmp	r3, #0
 8101d7e:	db0a      	blt.n	8101d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d80:	683b      	ldr	r3, [r7, #0]
 8101d82:	b2da      	uxtb	r2, r3
 8101d84:	490c      	ldr	r1, [pc, #48]	@ (8101db8 <__NVIC_SetPriority+0x4c>)
 8101d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d8a:	0112      	lsls	r2, r2, #4
 8101d8c:	b2d2      	uxtb	r2, r2
 8101d8e:	440b      	add	r3, r1
 8101d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101d94:	e00a      	b.n	8101dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d96:	683b      	ldr	r3, [r7, #0]
 8101d98:	b2da      	uxtb	r2, r3
 8101d9a:	4908      	ldr	r1, [pc, #32]	@ (8101dbc <__NVIC_SetPriority+0x50>)
 8101d9c:	88fb      	ldrh	r3, [r7, #6]
 8101d9e:	f003 030f 	and.w	r3, r3, #15
 8101da2:	3b04      	subs	r3, #4
 8101da4:	0112      	lsls	r2, r2, #4
 8101da6:	b2d2      	uxtb	r2, r2
 8101da8:	440b      	add	r3, r1
 8101daa:	761a      	strb	r2, [r3, #24]
}
 8101dac:	bf00      	nop
 8101dae:	370c      	adds	r7, #12
 8101db0:	46bd      	mov	sp, r7
 8101db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db6:	4770      	bx	lr
 8101db8:	e000e100 	.word	0xe000e100
 8101dbc:	e000ed00 	.word	0xe000ed00

08101dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101dc0:	b480      	push	{r7}
 8101dc2:	b089      	sub	sp, #36	@ 0x24
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	60f8      	str	r0, [r7, #12]
 8101dc8:	60b9      	str	r1, [r7, #8]
 8101dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101dcc:	68fb      	ldr	r3, [r7, #12]
 8101dce:	f003 0307 	and.w	r3, r3, #7
 8101dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101dd4:	69fb      	ldr	r3, [r7, #28]
 8101dd6:	f1c3 0307 	rsb	r3, r3, #7
 8101dda:	2b04      	cmp	r3, #4
 8101ddc:	bf28      	it	cs
 8101dde:	2304      	movcs	r3, #4
 8101de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101de2:	69fb      	ldr	r3, [r7, #28]
 8101de4:	3304      	adds	r3, #4
 8101de6:	2b06      	cmp	r3, #6
 8101de8:	d902      	bls.n	8101df0 <NVIC_EncodePriority+0x30>
 8101dea:	69fb      	ldr	r3, [r7, #28]
 8101dec:	3b03      	subs	r3, #3
 8101dee:	e000      	b.n	8101df2 <NVIC_EncodePriority+0x32>
 8101df0:	2300      	movs	r3, #0
 8101df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8101df8:	69bb      	ldr	r3, [r7, #24]
 8101dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8101dfe:	43da      	mvns	r2, r3
 8101e00:	68bb      	ldr	r3, [r7, #8]
 8101e02:	401a      	ands	r2, r3
 8101e04:	697b      	ldr	r3, [r7, #20]
 8101e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8101e0c:	697b      	ldr	r3, [r7, #20]
 8101e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8101e12:	43d9      	mvns	r1, r3
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e18:	4313      	orrs	r3, r2
         );
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	3724      	adds	r7, #36	@ 0x24
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr
	...

08101e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101e28:	b580      	push	{r7, lr}
 8101e2a:	b082      	sub	sp, #8
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	3b01      	subs	r3, #1
 8101e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101e38:	d301      	bcc.n	8101e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101e3a:	2301      	movs	r3, #1
 8101e3c:	e00f      	b.n	8101e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8101e68 <SysTick_Config+0x40>)
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	3b01      	subs	r3, #1
 8101e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101e46:	210f      	movs	r1, #15
 8101e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101e4c:	f7ff ff8e 	bl	8101d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101e50:	4b05      	ldr	r3, [pc, #20]	@ (8101e68 <SysTick_Config+0x40>)
 8101e52:	2200      	movs	r2, #0
 8101e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101e56:	4b04      	ldr	r3, [pc, #16]	@ (8101e68 <SysTick_Config+0x40>)
 8101e58:	2207      	movs	r2, #7
 8101e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101e5c:	2300      	movs	r3, #0
}
 8101e5e:	4618      	mov	r0, r3
 8101e60:	3708      	adds	r7, #8
 8101e62:	46bd      	mov	sp, r7
 8101e64:	bd80      	pop	{r7, pc}
 8101e66:	bf00      	nop
 8101e68:	e000e010 	.word	0xe000e010

08101e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e6c:	b580      	push	{r7, lr}
 8101e6e:	b082      	sub	sp, #8
 8101e70:	af00      	add	r7, sp, #0
 8101e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101e74:	6878      	ldr	r0, [r7, #4]
 8101e76:	f7ff ff47 	bl	8101d08 <__NVIC_SetPriorityGrouping>
}
 8101e7a:	bf00      	nop
 8101e7c:	3708      	adds	r7, #8
 8101e7e:	46bd      	mov	sp, r7
 8101e80:	bd80      	pop	{r7, pc}

08101e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e82:	b580      	push	{r7, lr}
 8101e84:	b086      	sub	sp, #24
 8101e86:	af00      	add	r7, sp, #0
 8101e88:	4603      	mov	r3, r0
 8101e8a:	60b9      	str	r1, [r7, #8]
 8101e8c:	607a      	str	r2, [r7, #4]
 8101e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101e90:	f7ff ff5e 	bl	8101d50 <__NVIC_GetPriorityGrouping>
 8101e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101e96:	687a      	ldr	r2, [r7, #4]
 8101e98:	68b9      	ldr	r1, [r7, #8]
 8101e9a:	6978      	ldr	r0, [r7, #20]
 8101e9c:	f7ff ff90 	bl	8101dc0 <NVIC_EncodePriority>
 8101ea0:	4602      	mov	r2, r0
 8101ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101ea6:	4611      	mov	r1, r2
 8101ea8:	4618      	mov	r0, r3
 8101eaa:	f7ff ff5f 	bl	8101d6c <__NVIC_SetPriority>
}
 8101eae:	bf00      	nop
 8101eb0:	3718      	adds	r7, #24
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	bd80      	pop	{r7, pc}

08101eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101eb6:	b580      	push	{r7, lr}
 8101eb8:	b082      	sub	sp, #8
 8101eba:	af00      	add	r7, sp, #0
 8101ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101ebe:	6878      	ldr	r0, [r7, #4]
 8101ec0:	f7ff ffb2 	bl	8101e28 <SysTick_Config>
 8101ec4:	4603      	mov	r3, r0
}
 8101ec6:	4618      	mov	r0, r3
 8101ec8:	3708      	adds	r7, #8
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}
	...

08101ed0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101ed0:	b480      	push	{r7}
 8101ed2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101ed4:	4b06      	ldr	r3, [pc, #24]	@ (8101ef0 <HAL_GetCurrentCPUID+0x20>)
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8101edc:	2b70      	cmp	r3, #112	@ 0x70
 8101ede:	d101      	bne.n	8101ee4 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8101ee0:	2303      	movs	r3, #3
 8101ee2:	e000      	b.n	8101ee6 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8101ee4:	2301      	movs	r3, #1
  }
}
 8101ee6:	4618      	mov	r0, r3
 8101ee8:	46bd      	mov	sp, r7
 8101eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eee:	4770      	bx	lr
 8101ef0:	e000ed00 	.word	0xe000ed00

08101ef4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8101ef4:	b580      	push	{r7, lr}
 8101ef6:	b084      	sub	sp, #16
 8101ef8:	af00      	add	r7, sp, #0
 8101efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8101efc:	687b      	ldr	r3, [r7, #4]
 8101efe:	2b00      	cmp	r3, #0
 8101f00:	d101      	bne.n	8101f06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8101f02:	2301      	movs	r3, #1
 8101f04:	e0e7      	b.n	81020d6 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8101f0c:	2b00      	cmp	r3, #0
 8101f0e:	d106      	bne.n	8101f1e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	2220      	movs	r2, #32
 8101f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101f18:	6878      	ldr	r0, [r7, #4]
 8101f1a:	f7fe ffcf 	bl	8100ebc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101f1e:	4b70      	ldr	r3, [pc, #448]	@ (81020e0 <HAL_ETH_Init+0x1ec>)
 8101f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101f24:	4a6e      	ldr	r2, [pc, #440]	@ (81020e0 <HAL_ETH_Init+0x1ec>)
 8101f26:	f043 0302 	orr.w	r3, r3, #2
 8101f2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101f2e:	4b6c      	ldr	r3, [pc, #432]	@ (81020e0 <HAL_ETH_Init+0x1ec>)
 8101f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101f34:	f003 0302 	and.w	r3, r3, #2
 8101f38:	60bb      	str	r3, [r7, #8]
 8101f3a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	7a1b      	ldrb	r3, [r3, #8]
 8101f40:	2b00      	cmp	r3, #0
 8101f42:	d103      	bne.n	8101f4c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8101f44:	2000      	movs	r0, #0
 8101f46:	f7ff fecb 	bl	8101ce0 <HAL_SYSCFG_ETHInterfaceSelect>
 8101f4a:	e003      	b.n	8101f54 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8101f4c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8101f50:	f7ff fec6 	bl	8101ce0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8101f54:	4b63      	ldr	r3, [pc, #396]	@ (81020e4 <HAL_ETH_Init+0x1f0>)
 8101f56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	687a      	ldr	r2, [r7, #4]
 8101f64:	6812      	ldr	r2, [r2, #0]
 8101f66:	f043 0301 	orr.w	r3, r3, #1
 8101f6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101f6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101f70:	f7ff fe7a 	bl	8101c68 <HAL_GetTick>
 8101f74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101f76:	e011      	b.n	8101f9c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8101f78:	f7ff fe76 	bl	8101c68 <HAL_GetTick>
 8101f7c:	4602      	mov	r2, r0
 8101f7e:	68fb      	ldr	r3, [r7, #12]
 8101f80:	1ad3      	subs	r3, r2, r3
 8101f82:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8101f86:	d909      	bls.n	8101f9c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	2204      	movs	r2, #4
 8101f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	22e0      	movs	r2, #224	@ 0xe0
 8101f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8101f98:	2301      	movs	r3, #1
 8101f9a:	e09c      	b.n	81020d6 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	681b      	ldr	r3, [r3, #0]
 8101fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	f003 0301 	and.w	r3, r3, #1
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d1e4      	bne.n	8101f78 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8101fae:	6878      	ldr	r0, [r7, #4]
 8101fb0:	f000 f89e 	bl	81020f0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101fb4:	f002 fc28 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 8101fb8:	4603      	mov	r3, r0
 8101fba:	4a4b      	ldr	r2, [pc, #300]	@ (81020e8 <HAL_ETH_Init+0x1f4>)
 8101fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8101fc0:	0c9a      	lsrs	r2, r3, #18
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	3a01      	subs	r2, #1
 8101fc8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8101fcc:	6878      	ldr	r0, [r7, #4]
 8101fce:	f000 fa81 	bl	81024d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	681b      	ldr	r3, [r3, #0]
 8101fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101fda:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8101fde:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8101fe2:	687a      	ldr	r2, [r7, #4]
 8101fe4:	6812      	ldr	r2, [r2, #0]
 8101fe6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8101fea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101fee:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	695b      	ldr	r3, [r3, #20]
 8101ff6:	f003 0303 	and.w	r3, r3, #3
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	d009      	beq.n	8102012 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	2201      	movs	r2, #1
 8102002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	22e0      	movs	r2, #224	@ 0xe0
 810200a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810200e:	2301      	movs	r3, #1
 8102010:	e061      	b.n	81020d6 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810201a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810201e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8102022:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8102026:	687a      	ldr	r2, [r7, #4]
 8102028:	6952      	ldr	r2, [r2, #20]
 810202a:	0051      	lsls	r1, r2, #1
 810202c:	687a      	ldr	r2, [r7, #4]
 810202e:	6812      	ldr	r2, [r2, #0]
 8102030:	430b      	orrs	r3, r1
 8102032:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102036:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810203a:	6878      	ldr	r0, [r7, #4]
 810203c:	f000 fae7 	bl	810260e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8102040:	6878      	ldr	r0, [r7, #4]
 8102042:	f000 fb2d 	bl	81026a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	685b      	ldr	r3, [r3, #4]
 810204a:	3305      	adds	r3, #5
 810204c:	781b      	ldrb	r3, [r3, #0]
 810204e:	021a      	lsls	r2, r3, #8
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	685b      	ldr	r3, [r3, #4]
 8102054:	3304      	adds	r3, #4
 8102056:	781b      	ldrb	r3, [r3, #0]
 8102058:	4619      	mov	r1, r3
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	430a      	orrs	r2, r1
 8102060:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	685b      	ldr	r3, [r3, #4]
 8102068:	3303      	adds	r3, #3
 810206a:	781b      	ldrb	r3, [r3, #0]
 810206c:	061a      	lsls	r2, r3, #24
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	685b      	ldr	r3, [r3, #4]
 8102072:	3302      	adds	r3, #2
 8102074:	781b      	ldrb	r3, [r3, #0]
 8102076:	041b      	lsls	r3, r3, #16
 8102078:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	685b      	ldr	r3, [r3, #4]
 810207e:	3301      	adds	r3, #1
 8102080:	781b      	ldrb	r3, [r3, #0]
 8102082:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102084:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	685b      	ldr	r3, [r3, #4]
 810208a:	781b      	ldrb	r3, [r3, #0]
 810208c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8102092:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102094:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681a      	ldr	r2, [r3, #0]
 81020a4:	4b11      	ldr	r3, [pc, #68]	@ (81020ec <HAL_ETH_Init+0x1f8>)
 81020a6:	430b      	orrs	r3, r1
 81020a8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	681b      	ldr	r3, [r3, #0]
 81020b0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81020b4:	687a      	ldr	r2, [r7, #4]
 81020b6:	6812      	ldr	r2, [r2, #0]
 81020b8:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81020bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81020c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	2200      	movs	r2, #0
 81020c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	2210      	movs	r2, #16
 81020d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81020d4:	2300      	movs	r3, #0
}
 81020d6:	4618      	mov	r0, r3
 81020d8:	3710      	adds	r7, #16
 81020da:	46bd      	mov	sp, r7
 81020dc:	bd80      	pop	{r7, pc}
 81020de:	bf00      	nop
 81020e0:	58024400 	.word	0x58024400
 81020e4:	58000400 	.word	0x58000400
 81020e8:	431bde83 	.word	0x431bde83
 81020ec:	0c020060 	.word	0x0c020060

081020f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81020f0:	b580      	push	{r7, lr}
 81020f2:	b084      	sub	sp, #16
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8102100:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102108:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810210a:	f002 fb7d 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 810210e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8102110:	68bb      	ldr	r3, [r7, #8]
 8102112:	4a1a      	ldr	r2, [pc, #104]	@ (810217c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8102114:	4293      	cmp	r3, r2
 8102116:	d804      	bhi.n	8102122 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810211e:	60fb      	str	r3, [r7, #12]
 8102120:	e022      	b.n	8102168 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8102122:	68bb      	ldr	r3, [r7, #8]
 8102124:	4a16      	ldr	r2, [pc, #88]	@ (8102180 <HAL_ETH_SetMDIOClockRange+0x90>)
 8102126:	4293      	cmp	r3, r2
 8102128:	d204      	bcs.n	8102134 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810212a:	68fb      	ldr	r3, [r7, #12]
 810212c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8102130:	60fb      	str	r3, [r7, #12]
 8102132:	e019      	b.n	8102168 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8102134:	68bb      	ldr	r3, [r7, #8]
 8102136:	4a13      	ldr	r2, [pc, #76]	@ (8102184 <HAL_ETH_SetMDIOClockRange+0x94>)
 8102138:	4293      	cmp	r3, r2
 810213a:	d915      	bls.n	8102168 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 810213c:	68bb      	ldr	r3, [r7, #8]
 810213e:	4a12      	ldr	r2, [pc, #72]	@ (8102188 <HAL_ETH_SetMDIOClockRange+0x98>)
 8102140:	4293      	cmp	r3, r2
 8102142:	d804      	bhi.n	810214e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8102144:	68fb      	ldr	r3, [r7, #12]
 8102146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810214a:	60fb      	str	r3, [r7, #12]
 810214c:	e00c      	b.n	8102168 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810214e:	68bb      	ldr	r3, [r7, #8]
 8102150:	4a0e      	ldr	r2, [pc, #56]	@ (810218c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d804      	bhi.n	8102160 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8102156:	68fb      	ldr	r3, [r7, #12]
 8102158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810215c:	60fb      	str	r3, [r7, #12]
 810215e:	e003      	b.n	8102168 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8102166:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	68fa      	ldr	r2, [r7, #12]
 810216e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8102172:	bf00      	nop
 8102174:	3710      	adds	r7, #16
 8102176:	46bd      	mov	sp, r7
 8102178:	bd80      	pop	{r7, pc}
 810217a:	bf00      	nop
 810217c:	02160ebf 	.word	0x02160ebf
 8102180:	03938700 	.word	0x03938700
 8102184:	05f5e0ff 	.word	0x05f5e0ff
 8102188:	08f0d17f 	.word	0x08f0d17f
 810218c:	0ee6b27f 	.word	0x0ee6b27f

08102190 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8102190:	b480      	push	{r7}
 8102192:	b085      	sub	sp, #20
 8102194:	af00      	add	r7, sp, #0
 8102196:	6078      	str	r0, [r7, #4]
 8102198:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 810219a:	683b      	ldr	r3, [r7, #0]
 810219c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810219e:	683b      	ldr	r3, [r7, #0]
 81021a0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81021a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81021a4:	683b      	ldr	r3, [r7, #0]
 81021a6:	791b      	ldrb	r3, [r3, #4]
 81021a8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81021aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81021ac:	683b      	ldr	r3, [r7, #0]
 81021ae:	7b1b      	ldrb	r3, [r3, #12]
 81021b0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81021b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81021b4:	683b      	ldr	r3, [r7, #0]
 81021b6:	7b5b      	ldrb	r3, [r3, #13]
 81021b8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81021ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81021bc:	683b      	ldr	r3, [r7, #0]
 81021be:	7b9b      	ldrb	r3, [r3, #14]
 81021c0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81021c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81021c4:	683b      	ldr	r3, [r7, #0]
 81021c6:	7bdb      	ldrb	r3, [r3, #15]
 81021c8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81021ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81021cc:	683a      	ldr	r2, [r7, #0]
 81021ce:	7c12      	ldrb	r2, [r2, #16]
 81021d0:	2a00      	cmp	r2, #0
 81021d2:	d102      	bne.n	81021da <ETH_SetMACConfig+0x4a>
 81021d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81021d8:	e000      	b.n	81021dc <ETH_SetMACConfig+0x4c>
 81021da:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81021dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81021de:	683a      	ldr	r2, [r7, #0]
 81021e0:	7c52      	ldrb	r2, [r2, #17]
 81021e2:	2a00      	cmp	r2, #0
 81021e4:	d102      	bne.n	81021ec <ETH_SetMACConfig+0x5c>
 81021e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 81021ea:	e000      	b.n	81021ee <ETH_SetMACConfig+0x5e>
 81021ec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81021ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 81021f0:	683b      	ldr	r3, [r7, #0]
 81021f2:	7c9b      	ldrb	r3, [r3, #18]
 81021f4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81021f6:	431a      	orrs	r2, r3
               macconf->Speed |
 81021f8:	683b      	ldr	r3, [r7, #0]
 81021fa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 81021fc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 81021fe:	683b      	ldr	r3, [r7, #0]
 8102200:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8102202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8102204:	683b      	ldr	r3, [r7, #0]
 8102206:	7f1b      	ldrb	r3, [r3, #28]
 8102208:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810220a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810220c:	683b      	ldr	r3, [r7, #0]
 810220e:	7f5b      	ldrb	r3, [r3, #29]
 8102210:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8102212:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102214:	683a      	ldr	r2, [r7, #0]
 8102216:	7f92      	ldrb	r2, [r2, #30]
 8102218:	2a00      	cmp	r2, #0
 810221a:	d102      	bne.n	8102222 <ETH_SetMACConfig+0x92>
 810221c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102220:	e000      	b.n	8102224 <ETH_SetMACConfig+0x94>
 8102222:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102224:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8102226:	683b      	ldr	r3, [r7, #0]
 8102228:	7fdb      	ldrb	r3, [r3, #31]
 810222a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810222c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810222e:	683a      	ldr	r2, [r7, #0]
 8102230:	f892 2020 	ldrb.w	r2, [r2, #32]
 8102234:	2a00      	cmp	r2, #0
 8102236:	d102      	bne.n	810223e <ETH_SetMACConfig+0xae>
 8102238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810223c:	e000      	b.n	8102240 <ETH_SetMACConfig+0xb0>
 810223e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8102240:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8102242:	683b      	ldr	r3, [r7, #0]
 8102244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8102246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8102248:	683b      	ldr	r3, [r7, #0]
 810224a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810224e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8102250:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8102252:	683b      	ldr	r3, [r7, #0]
 8102254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8102256:	4313      	orrs	r3, r2
 8102258:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	681a      	ldr	r2, [r3, #0]
 8102260:	4b57      	ldr	r3, [pc, #348]	@ (81023c0 <ETH_SetMACConfig+0x230>)
 8102262:	4013      	ands	r3, r2
 8102264:	687a      	ldr	r2, [r7, #4]
 8102266:	6812      	ldr	r2, [r2, #0]
 8102268:	68f9      	ldr	r1, [r7, #12]
 810226a:	430b      	orrs	r3, r1
 810226c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810226e:	683b      	ldr	r3, [r7, #0]
 8102270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102272:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8102274:	683b      	ldr	r3, [r7, #0]
 8102276:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810227a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810227c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810227e:	683b      	ldr	r3, [r7, #0]
 8102280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8102284:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8102286:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8102288:	683b      	ldr	r3, [r7, #0]
 810228a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810228e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8102290:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8102292:	683a      	ldr	r2, [r7, #0]
 8102294:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8102298:	2a00      	cmp	r2, #0
 810229a:	d102      	bne.n	81022a2 <ETH_SetMACConfig+0x112>
 810229c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81022a0:	e000      	b.n	81022a4 <ETH_SetMACConfig+0x114>
 81022a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81022a4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81022a6:	683b      	ldr	r3, [r7, #0]
 81022a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81022aa:	4313      	orrs	r3, r2
 81022ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	685a      	ldr	r2, [r3, #4]
 81022b4:	4b43      	ldr	r3, [pc, #268]	@ (81023c4 <ETH_SetMACConfig+0x234>)
 81022b6:	4013      	ands	r3, r2
 81022b8:	687a      	ldr	r2, [r7, #4]
 81022ba:	6812      	ldr	r2, [r2, #0]
 81022bc:	68f9      	ldr	r1, [r7, #12]
 81022be:	430b      	orrs	r3, r1
 81022c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81022c2:	683b      	ldr	r3, [r7, #0]
 81022c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81022c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81022ca:	683b      	ldr	r3, [r7, #0]
 81022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81022ce:	4313      	orrs	r3, r2
 81022d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	68db      	ldr	r3, [r3, #12]
 81022d8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81022dc:	f023 0301 	bic.w	r3, r3, #1
 81022e0:	687a      	ldr	r2, [r7, #4]
 81022e2:	6812      	ldr	r2, [r2, #0]
 81022e4:	68f9      	ldr	r1, [r7, #12]
 81022e6:	430b      	orrs	r3, r1
 81022e8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81022ea:	683b      	ldr	r3, [r7, #0]
 81022ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 81022f0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81022f2:	683b      	ldr	r3, [r7, #0]
 81022f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81022f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81022f8:	683a      	ldr	r2, [r7, #0]
 81022fa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 81022fe:	2a00      	cmp	r2, #0
 8102300:	d101      	bne.n	8102306 <ETH_SetMACConfig+0x176>
 8102302:	2280      	movs	r2, #128	@ 0x80
 8102304:	e000      	b.n	8102308 <ETH_SetMACConfig+0x178>
 8102306:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8102308:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810230a:	683b      	ldr	r3, [r7, #0]
 810230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810230e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102310:	4313      	orrs	r3, r2
 8102312:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810231a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810231e:	4013      	ands	r3, r2
 8102320:	687a      	ldr	r2, [r7, #4]
 8102322:	6812      	ldr	r2, [r2, #0]
 8102324:	68f9      	ldr	r1, [r7, #12]
 8102326:	430b      	orrs	r3, r1
 8102328:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810232a:	683b      	ldr	r3, [r7, #0]
 810232c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8102330:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8102332:	683b      	ldr	r3, [r7, #0]
 8102334:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8102338:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810233a:	4313      	orrs	r3, r2
 810233c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102346:	f023 0103 	bic.w	r1, r3, #3
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	68fa      	ldr	r2, [r7, #12]
 8102350:	430a      	orrs	r2, r1
 8102352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810235e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8102362:	683b      	ldr	r3, [r7, #0]
 8102364:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	430a      	orrs	r2, r1
 810236c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8102370:	683b      	ldr	r3, [r7, #0]
 8102372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102374:	683a      	ldr	r2, [r7, #0]
 8102376:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810237a:	2a00      	cmp	r2, #0
 810237c:	d101      	bne.n	8102382 <ETH_SetMACConfig+0x1f2>
 810237e:	2240      	movs	r2, #64	@ 0x40
 8102380:	e000      	b.n	8102384 <ETH_SetMACConfig+0x1f4>
 8102382:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8102384:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8102386:	683b      	ldr	r3, [r7, #0]
 8102388:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 810238c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810238e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8102390:	683b      	ldr	r3, [r7, #0]
 8102392:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8102396:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8102398:	4313      	orrs	r3, r2
 810239a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81023a4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	68fa      	ldr	r2, [r7, #12]
 81023ae:	430a      	orrs	r2, r1
 81023b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81023b4:	bf00      	nop
 81023b6:	3714      	adds	r7, #20
 81023b8:	46bd      	mov	sp, r7
 81023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023be:	4770      	bx	lr
 81023c0:	00048083 	.word	0x00048083
 81023c4:	c0f88000 	.word	0xc0f88000

081023c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81023c8:	b480      	push	{r7}
 81023ca:	b085      	sub	sp, #20
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	6078      	str	r0, [r7, #4]
 81023d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	681b      	ldr	r3, [r3, #0]
 81023d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 81023e0:	f023 0302 	bic.w	r3, r3, #2
 81023e4:	683a      	ldr	r2, [r7, #0]
 81023e6:	6811      	ldr	r1, [r2, #0]
 81023e8:	687a      	ldr	r2, [r7, #4]
 81023ea:	6812      	ldr	r2, [r2, #0]
 81023ec:	430b      	orrs	r3, r1
 81023ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81023f2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81023f4:	683b      	ldr	r3, [r7, #0]
 81023f6:	791b      	ldrb	r3, [r3, #4]
 81023f8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81023fa:	683b      	ldr	r3, [r7, #0]
 81023fc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81023fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8102400:	683b      	ldr	r3, [r7, #0]
 8102402:	7b1b      	ldrb	r3, [r3, #12]
 8102404:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102406:	4313      	orrs	r3, r2
 8102408:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102412:	685b      	ldr	r3, [r3, #4]
 8102414:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8102418:	f023 0301 	bic.w	r3, r3, #1
 810241c:	687a      	ldr	r2, [r7, #4]
 810241e:	6812      	ldr	r2, [r2, #0]
 8102420:	68f9      	ldr	r1, [r7, #12]
 8102422:	430b      	orrs	r3, r1
 8102424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102428:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810242a:	683b      	ldr	r3, [r7, #0]
 810242c:	7b5b      	ldrb	r3, [r3, #13]
 810242e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8102430:	683b      	ldr	r3, [r7, #0]
 8102432:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102434:	4313      	orrs	r3, r2
 8102436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102440:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8102444:	4b21      	ldr	r3, [pc, #132]	@ (81024cc <ETH_SetDMAConfig+0x104>)
 8102446:	4013      	ands	r3, r2
 8102448:	687a      	ldr	r2, [r7, #4]
 810244a:	6812      	ldr	r2, [r2, #0]
 810244c:	68f9      	ldr	r1, [r7, #12]
 810244e:	430b      	orrs	r3, r1
 8102450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102454:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8102458:	683b      	ldr	r3, [r7, #0]
 810245a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810245c:	683b      	ldr	r3, [r7, #0]
 810245e:	7d1b      	ldrb	r3, [r3, #20]
 8102460:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8102462:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8102464:	683b      	ldr	r3, [r7, #0]
 8102466:	7f5b      	ldrb	r3, [r3, #29]
 8102468:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810246a:	4313      	orrs	r3, r2
 810246c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102476:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810247a:	4b15      	ldr	r3, [pc, #84]	@ (81024d0 <ETH_SetDMAConfig+0x108>)
 810247c:	4013      	ands	r3, r2
 810247e:	687a      	ldr	r2, [r7, #4]
 8102480:	6812      	ldr	r2, [r2, #0]
 8102482:	68f9      	ldr	r1, [r7, #12]
 8102484:	430b      	orrs	r3, r1
 8102486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810248a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810248e:	683b      	ldr	r3, [r7, #0]
 8102490:	7f1b      	ldrb	r3, [r3, #28]
 8102492:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102498:	4313      	orrs	r3, r2
 810249a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81024a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81024a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81024ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81024b0:	687a      	ldr	r2, [r7, #4]
 81024b2:	6812      	ldr	r2, [r2, #0]
 81024b4:	68f9      	ldr	r1, [r7, #12]
 81024b6:	430b      	orrs	r3, r1
 81024b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81024bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81024c0:	bf00      	nop
 81024c2:	3714      	adds	r7, #20
 81024c4:	46bd      	mov	sp, r7
 81024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ca:	4770      	bx	lr
 81024cc:	fffec000 	.word	0xfffec000
 81024d0:	ffc0efef 	.word	0xffc0efef

081024d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81024d4:	b580      	push	{r7, lr}
 81024d6:	b0a4      	sub	sp, #144	@ 0x90
 81024d8:	af00      	add	r7, sp, #0
 81024da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81024dc:	2301      	movs	r3, #1
 81024de:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 81024e2:	2300      	movs	r3, #0
 81024e4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 81024e6:	2300      	movs	r3, #0
 81024e8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 81024ec:	2300      	movs	r3, #0
 81024ee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 81024f2:	2301      	movs	r3, #1
 81024f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81024f8:	2301      	movs	r3, #1
 81024fa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 81024fe:	2301      	movs	r3, #1
 8102500:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8102504:	2300      	movs	r3, #0
 8102506:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810250a:	2301      	movs	r3, #1
 810250c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102514:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8102516:	2300      	movs	r3, #0
 8102518:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810251c:	2300      	movs	r3, #0
 810251e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102520:	2300      	movs	r3, #0
 8102522:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8102526:	2300      	movs	r3, #0
 8102528:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810252c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8102530:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8102532:	2300      	movs	r3, #0
 8102534:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8102538:	2300      	movs	r3, #0
 810253a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810253c:	2301      	movs	r3, #1
 810253e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8102542:	2300      	movs	r3, #0
 8102544:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8102548:	2300      	movs	r3, #0
 810254a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810254e:	2300      	movs	r3, #0
 8102550:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8102552:	2300      	movs	r3, #0
 8102554:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8102556:	2300      	movs	r3, #0
 8102558:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810255a:	2300      	movs	r3, #0
 810255c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102560:	2300      	movs	r3, #0
 8102562:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8102566:	2301      	movs	r3, #1
 8102568:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810256c:	2320      	movs	r3, #32
 810256e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8102572:	2301      	movs	r3, #1
 8102574:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8102578:	2300      	movs	r3, #0
 810257a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810257e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8102582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8102584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8102588:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810258a:	2300      	movs	r3, #0
 810258c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8102590:	2302      	movs	r3, #2
 8102592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8102596:	2300      	movs	r3, #0
 8102598:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810259c:	2300      	movs	r3, #0
 810259e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81025a2:	2300      	movs	r3, #0
 81025a4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81025a8:	2301      	movs	r3, #1
 81025aa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81025ae:	2300      	movs	r3, #0
 81025b0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81025b2:	2301      	movs	r3, #1
 81025b4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81025bc:	4619      	mov	r1, r3
 81025be:	6878      	ldr	r0, [r7, #4]
 81025c0:	f7ff fde6 	bl	8102190 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81025c4:	2301      	movs	r3, #1
 81025c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81025c8:	2301      	movs	r3, #1
 81025ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81025cc:	2300      	movs	r3, #0
 81025ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81025d0:	2300      	movs	r3, #0
 81025d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81025d6:	2300      	movs	r3, #0
 81025d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81025da:	2300      	movs	r3, #0
 81025dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81025de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81025e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81025e4:	2300      	movs	r3, #0
 81025e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81025e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81025ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81025ee:	2300      	movs	r3, #0
 81025f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 81025f4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 81025f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81025fa:	f107 0308 	add.w	r3, r7, #8
 81025fe:	4619      	mov	r1, r3
 8102600:	6878      	ldr	r0, [r7, #4]
 8102602:	f7ff fee1 	bl	81023c8 <ETH_SetDMAConfig>
}
 8102606:	bf00      	nop
 8102608:	3790      	adds	r7, #144	@ 0x90
 810260a:	46bd      	mov	sp, r7
 810260c:	bd80      	pop	{r7, pc}

0810260e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810260e:	b480      	push	{r7}
 8102610:	b085      	sub	sp, #20
 8102612:	af00      	add	r7, sp, #0
 8102614:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102616:	2300      	movs	r3, #0
 8102618:	60fb      	str	r3, [r7, #12]
 810261a:	e01d      	b.n	8102658 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	68d9      	ldr	r1, [r3, #12]
 8102620:	68fa      	ldr	r2, [r7, #12]
 8102622:	4613      	mov	r3, r2
 8102624:	005b      	lsls	r3, r3, #1
 8102626:	4413      	add	r3, r2
 8102628:	00db      	lsls	r3, r3, #3
 810262a:	440b      	add	r3, r1
 810262c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810262e:	68bb      	ldr	r3, [r7, #8]
 8102630:	2200      	movs	r2, #0
 8102632:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8102634:	68bb      	ldr	r3, [r7, #8]
 8102636:	2200      	movs	r2, #0
 8102638:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810263a:	68bb      	ldr	r3, [r7, #8]
 810263c:	2200      	movs	r2, #0
 810263e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8102640:	68bb      	ldr	r3, [r7, #8]
 8102642:	2200      	movs	r2, #0
 8102644:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8102646:	68b9      	ldr	r1, [r7, #8]
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	68fa      	ldr	r2, [r7, #12]
 810264c:	3206      	adds	r2, #6
 810264e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102652:	68fb      	ldr	r3, [r7, #12]
 8102654:	3301      	adds	r3, #1
 8102656:	60fb      	str	r3, [r7, #12]
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	2b03      	cmp	r3, #3
 810265c:	d9de      	bls.n	810261c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	2200      	movs	r2, #0
 8102662:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810266c:	461a      	mov	r2, r3
 810266e:	2303      	movs	r3, #3
 8102670:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	68da      	ldr	r2, [r3, #12]
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102680:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	68da      	ldr	r2, [r3, #12]
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102690:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8102694:	bf00      	nop
 8102696:	3714      	adds	r7, #20
 8102698:	46bd      	mov	sp, r7
 810269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810269e:	4770      	bx	lr

081026a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81026a0:	b480      	push	{r7}
 81026a2:	b085      	sub	sp, #20
 81026a4:	af00      	add	r7, sp, #0
 81026a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81026a8:	2300      	movs	r3, #0
 81026aa:	60fb      	str	r3, [r7, #12]
 81026ac:	e023      	b.n	81026f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	6919      	ldr	r1, [r3, #16]
 81026b2:	68fa      	ldr	r2, [r7, #12]
 81026b4:	4613      	mov	r3, r2
 81026b6:	005b      	lsls	r3, r3, #1
 81026b8:	4413      	add	r3, r2
 81026ba:	00db      	lsls	r3, r3, #3
 81026bc:	440b      	add	r3, r1
 81026be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 81026c0:	68bb      	ldr	r3, [r7, #8]
 81026c2:	2200      	movs	r2, #0
 81026c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 81026c6:	68bb      	ldr	r3, [r7, #8]
 81026c8:	2200      	movs	r2, #0
 81026ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 81026cc:	68bb      	ldr	r3, [r7, #8]
 81026ce:	2200      	movs	r2, #0
 81026d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 81026d2:	68bb      	ldr	r3, [r7, #8]
 81026d4:	2200      	movs	r2, #0
 81026d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 81026d8:	68bb      	ldr	r3, [r7, #8]
 81026da:	2200      	movs	r2, #0
 81026dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 81026de:	68bb      	ldr	r3, [r7, #8]
 81026e0:	2200      	movs	r2, #0
 81026e2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81026e4:	68b9      	ldr	r1, [r7, #8]
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68fa      	ldr	r2, [r7, #12]
 81026ea:	3212      	adds	r2, #18
 81026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	3301      	adds	r3, #1
 81026f4:	60fb      	str	r3, [r7, #12]
 81026f6:	68fb      	ldr	r3, [r7, #12]
 81026f8:	2b03      	cmp	r3, #3
 81026fa:	d9d8      	bls.n	81026ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	2200      	movs	r2, #0
 8102700:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	2200      	movs	r2, #0
 8102706:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	2200      	movs	r2, #0
 810270c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	2200      	movs	r2, #0
 8102712:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	2200      	movs	r2, #0
 8102718:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102722:	461a      	mov	r2, r3
 8102724:	2303      	movs	r3, #3
 8102726:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	691a      	ldr	r2, [r3, #16]
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102736:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	691b      	ldr	r3, [r3, #16]
 810273e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810274a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810274e:	bf00      	nop
 8102750:	3714      	adds	r7, #20
 8102752:	46bd      	mov	sp, r7
 8102754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102758:	4770      	bx	lr
	...

0810275c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 810275c:	b580      	push	{r7, lr}
 810275e:	b098      	sub	sp, #96	@ 0x60
 8102760:	af00      	add	r7, sp, #0
 8102762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8102764:	4a84      	ldr	r2, [pc, #528]	@ (8102978 <HAL_FDCAN_Init+0x21c>)
 8102766:	f107 030c 	add.w	r3, r7, #12
 810276a:	4611      	mov	r1, r2
 810276c:	224c      	movs	r2, #76	@ 0x4c
 810276e:	4618      	mov	r0, r3
 8102770:	f007 f960 	bl	8109a34 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	2b00      	cmp	r3, #0
 8102778:	d101      	bne.n	810277e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 810277a:	2301      	movs	r3, #1
 810277c:	e1c6      	b.n	8102b0c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	4a7e      	ldr	r2, [pc, #504]	@ (810297c <HAL_FDCAN_Init+0x220>)
 8102784:	4293      	cmp	r3, r2
 8102786:	d106      	bne.n	8102796 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8102790:	461a      	mov	r2, r3
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 810279c:	b2db      	uxtb	r3, r3
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d106      	bne.n	81027b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	2200      	movs	r2, #0
 81027a6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 81027aa:	6878      	ldr	r0, [r7, #4]
 81027ac:	f7fe fcb6 	bl	810111c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	699a      	ldr	r2, [r3, #24]
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	f022 0210 	bic.w	r2, r2, #16
 81027be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81027c0:	f7ff fa52 	bl	8101c68 <HAL_GetTick>
 81027c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81027c6:	e014      	b.n	81027f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81027c8:	f7ff fa4e 	bl	8101c68 <HAL_GetTick>
 81027cc:	4602      	mov	r2, r0
 81027ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81027d0:	1ad3      	subs	r3, r2, r3
 81027d2:	2b0a      	cmp	r3, #10
 81027d4:	d90d      	bls.n	81027f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81027dc:	f043 0201 	orr.w	r2, r3, #1
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	2203      	movs	r2, #3
 81027ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 81027ee:	2301      	movs	r3, #1
 81027f0:	e18c      	b.n	8102b0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	699b      	ldr	r3, [r3, #24]
 81027f8:	f003 0308 	and.w	r3, r3, #8
 81027fc:	2b08      	cmp	r3, #8
 81027fe:	d0e3      	beq.n	81027c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	699a      	ldr	r2, [r3, #24]
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	f042 0201 	orr.w	r2, r2, #1
 810280e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102810:	f7ff fa2a 	bl	8101c68 <HAL_GetTick>
 8102814:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102816:	e014      	b.n	8102842 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102818:	f7ff fa26 	bl	8101c68 <HAL_GetTick>
 810281c:	4602      	mov	r2, r0
 810281e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102820:	1ad3      	subs	r3, r2, r3
 8102822:	2b0a      	cmp	r3, #10
 8102824:	d90d      	bls.n	8102842 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810282c:	f043 0201 	orr.w	r2, r3, #1
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	2203      	movs	r2, #3
 810283a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 810283e:	2301      	movs	r3, #1
 8102840:	e164      	b.n	8102b0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	699b      	ldr	r3, [r3, #24]
 8102848:	f003 0301 	and.w	r3, r3, #1
 810284c:	2b00      	cmp	r3, #0
 810284e:	d0e3      	beq.n	8102818 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	699a      	ldr	r2, [r3, #24]
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	f042 0202 	orr.w	r2, r2, #2
 810285e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	7c1b      	ldrb	r3, [r3, #16]
 8102864:	2b01      	cmp	r3, #1
 8102866:	d108      	bne.n	810287a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	699a      	ldr	r2, [r3, #24]
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8102876:	619a      	str	r2, [r3, #24]
 8102878:	e007      	b.n	810288a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	699a      	ldr	r2, [r3, #24]
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8102888:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	7c5b      	ldrb	r3, [r3, #17]
 810288e:	2b01      	cmp	r3, #1
 8102890:	d108      	bne.n	81028a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	699a      	ldr	r2, [r3, #24]
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81028a0:	619a      	str	r2, [r3, #24]
 81028a2:	e007      	b.n	81028b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	699a      	ldr	r2, [r3, #24]
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 81028b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	7c9b      	ldrb	r3, [r3, #18]
 81028b8:	2b01      	cmp	r3, #1
 81028ba:	d108      	bne.n	81028ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	699a      	ldr	r2, [r3, #24]
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 81028ca:	619a      	str	r2, [r3, #24]
 81028cc:	e007      	b.n	81028de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	699a      	ldr	r2, [r3, #24]
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81028dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	699b      	ldr	r3, [r3, #24]
 81028e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	689a      	ldr	r2, [r3, #8]
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	430a      	orrs	r2, r1
 81028f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	699a      	ldr	r2, [r3, #24]
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8102902:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	691a      	ldr	r2, [r3, #16]
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	f022 0210 	bic.w	r2, r2, #16
 8102912:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	68db      	ldr	r3, [r3, #12]
 8102918:	2b01      	cmp	r3, #1
 810291a:	d108      	bne.n	810292e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	699a      	ldr	r2, [r3, #24]
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	f042 0204 	orr.w	r2, r2, #4
 810292a:	619a      	str	r2, [r3, #24]
 810292c:	e030      	b.n	8102990 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	68db      	ldr	r3, [r3, #12]
 8102932:	2b00      	cmp	r3, #0
 8102934:	d02c      	beq.n	8102990 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	68db      	ldr	r3, [r3, #12]
 810293a:	2b02      	cmp	r3, #2
 810293c:	d020      	beq.n	8102980 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	699a      	ldr	r2, [r3, #24]
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 810294c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	691a      	ldr	r2, [r3, #16]
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	f042 0210 	orr.w	r2, r2, #16
 810295c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	68db      	ldr	r3, [r3, #12]
 8102962:	2b03      	cmp	r3, #3
 8102964:	d114      	bne.n	8102990 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	699a      	ldr	r2, [r3, #24]
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	f042 0220 	orr.w	r2, r2, #32
 8102974:	619a      	str	r2, [r3, #24]
 8102976:	e00b      	b.n	8102990 <HAL_FDCAN_Init+0x234>
 8102978:	08109a68 	.word	0x08109a68
 810297c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	699a      	ldr	r2, [r3, #24]
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	f042 0220 	orr.w	r2, r2, #32
 810298e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	699b      	ldr	r3, [r3, #24]
 8102994:	3b01      	subs	r3, #1
 8102996:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	69db      	ldr	r3, [r3, #28]
 810299c:	3b01      	subs	r3, #1
 810299e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81029a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	6a1b      	ldr	r3, [r3, #32]
 81029a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 81029a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	695b      	ldr	r3, [r3, #20]
 81029b0:	3b01      	subs	r3, #1
 81029b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81029b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81029ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	689b      	ldr	r3, [r3, #8]
 81029c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81029c4:	d115      	bne.n	81029f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029d0:	3b01      	subs	r3, #1
 81029d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81029d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81029da:	3b01      	subs	r3, #1
 81029dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 81029de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81029e6:	3b01      	subs	r3, #1
 81029e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 81029ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81029f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d00a      	beq.n	8102a10 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	430a      	orrs	r2, r1
 8102a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102a18:	4413      	add	r3, r2
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d011      	beq.n	8102a42 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8102a26:	f023 0107 	bic.w	r1, r3, #7
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102a2e:	009b      	lsls	r3, r3, #2
 8102a30:	3360      	adds	r3, #96	@ 0x60
 8102a32:	443b      	add	r3, r7
 8102a34:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	430a      	orrs	r2, r1
 8102a3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102a46:	2b00      	cmp	r3, #0
 8102a48:	d011      	beq.n	8102a6e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102a52:	f023 0107 	bic.w	r1, r3, #7
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102a5a:	009b      	lsls	r3, r3, #2
 8102a5c:	3360      	adds	r3, #96	@ 0x60
 8102a5e:	443b      	add	r3, r7
 8102a60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	430a      	orrs	r2, r1
 8102a6a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102a72:	2b00      	cmp	r3, #0
 8102a74:	d012      	beq.n	8102a9c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102a7e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102a86:	009b      	lsls	r3, r3, #2
 8102a88:	3360      	adds	r3, #96	@ 0x60
 8102a8a:	443b      	add	r3, r7
 8102a8c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8102a90:	011a      	lsls	r2, r3, #4
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	430a      	orrs	r2, r1
 8102a98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d012      	beq.n	8102aca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102aac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ab4:	009b      	lsls	r3, r3, #2
 8102ab6:	3360      	adds	r3, #96	@ 0x60
 8102ab8:	443b      	add	r3, r7
 8102aba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8102abe:	021a      	lsls	r2, r3, #8
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	430a      	orrs	r2, r1
 8102ac6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	681b      	ldr	r3, [r3, #0]
 8102ace:	4a11      	ldr	r2, [pc, #68]	@ (8102b14 <HAL_FDCAN_Init+0x3b8>)
 8102ad0:	4293      	cmp	r3, r2
 8102ad2:	d107      	bne.n	8102ae4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	685b      	ldr	r3, [r3, #4]
 8102ad8:	689a      	ldr	r2, [r3, #8]
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	685b      	ldr	r3, [r3, #4]
 8102ade:	f022 0203 	bic.w	r2, r2, #3
 8102ae2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	2200      	movs	r2, #0
 8102ae8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	2200      	movs	r2, #0
 8102af0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	2201      	movs	r2, #1
 8102af8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102afc:	6878      	ldr	r0, [r7, #4]
 8102afe:	f000 f80b 	bl	8102b18 <FDCAN_CalcultateRamBlockAddresses>
 8102b02:	4603      	mov	r3, r0
 8102b04:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8102b08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	3760      	adds	r7, #96	@ 0x60
 8102b10:	46bd      	mov	sp, r7
 8102b12:	bd80      	pop	{r7, pc}
 8102b14:	4000a000 	.word	0x4000a000

08102b18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102b18:	b480      	push	{r7}
 8102b1a:	b085      	sub	sp, #20
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102b24:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102b32:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102b36:	68ba      	ldr	r2, [r7, #8]
 8102b38:	0091      	lsls	r1, r2, #2
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	6812      	ldr	r2, [r2, #0]
 8102b3e:	430b      	orrs	r3, r1
 8102b40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102b4c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b54:	041a      	lsls	r2, r3, #16
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	430a      	orrs	r2, r1
 8102b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b64:	68ba      	ldr	r2, [r7, #8]
 8102b66:	4413      	add	r3, r2
 8102b68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102b76:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102b7a:	68ba      	ldr	r2, [r7, #8]
 8102b7c:	0091      	lsls	r1, r2, #2
 8102b7e:	687a      	ldr	r2, [r7, #4]
 8102b80:	6812      	ldr	r2, [r2, #0]
 8102b82:	430b      	orrs	r3, r1
 8102b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b90:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102b98:	041a      	lsls	r2, r3, #16
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	430a      	orrs	r2, r1
 8102ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102ba8:	005b      	lsls	r3, r3, #1
 8102baa:	68ba      	ldr	r2, [r7, #8]
 8102bac:	4413      	add	r3, r2
 8102bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102bb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102bbc:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102bc0:	68ba      	ldr	r2, [r7, #8]
 8102bc2:	0091      	lsls	r1, r2, #2
 8102bc4:	687a      	ldr	r2, [r7, #4]
 8102bc6:	6812      	ldr	r2, [r2, #0]
 8102bc8:	430b      	orrs	r3, r1
 8102bca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102bd6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102bde:	041a      	lsls	r2, r3, #16
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	430a      	orrs	r2, r1
 8102be6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102bee:	687a      	ldr	r2, [r7, #4]
 8102bf0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102bf2:	fb02 f303 	mul.w	r3, r2, r3
 8102bf6:	68ba      	ldr	r2, [r7, #8]
 8102bf8:	4413      	add	r3, r2
 8102bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102c08:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102c0c:	68ba      	ldr	r2, [r7, #8]
 8102c0e:	0091      	lsls	r1, r2, #2
 8102c10:	687a      	ldr	r2, [r7, #4]
 8102c12:	6812      	ldr	r2, [r2, #0]
 8102c14:	430b      	orrs	r3, r1
 8102c16:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102c22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102c2a:	041a      	lsls	r2, r3, #16
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	430a      	orrs	r2, r1
 8102c32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102c3a:	687a      	ldr	r2, [r7, #4]
 8102c3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8102c3e:	fb02 f303 	mul.w	r3, r2, r3
 8102c42:	68ba      	ldr	r2, [r7, #8]
 8102c44:	4413      	add	r3, r2
 8102c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102c50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102c54:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102c58:	68ba      	ldr	r2, [r7, #8]
 8102c5a:	0091      	lsls	r1, r2, #2
 8102c5c:	687a      	ldr	r2, [r7, #4]
 8102c5e:	6812      	ldr	r2, [r2, #0]
 8102c60:	430b      	orrs	r3, r1
 8102c62:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c6a:	687a      	ldr	r2, [r7, #4]
 8102c6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8102c6e:	fb02 f303 	mul.w	r3, r2, r3
 8102c72:	68ba      	ldr	r2, [r7, #8]
 8102c74:	4413      	add	r3, r2
 8102c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	681b      	ldr	r3, [r3, #0]
 8102c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102c80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102c84:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102c88:	68ba      	ldr	r2, [r7, #8]
 8102c8a:	0091      	lsls	r1, r2, #2
 8102c8c:	687a      	ldr	r2, [r7, #4]
 8102c8e:	6812      	ldr	r2, [r2, #0]
 8102c90:	430b      	orrs	r3, r1
 8102c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102c9e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ca6:	041a      	lsls	r2, r3, #16
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	430a      	orrs	r2, r1
 8102cae:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102cb6:	005b      	lsls	r3, r3, #1
 8102cb8:	68ba      	ldr	r2, [r7, #8]
 8102cba:	4413      	add	r3, r2
 8102cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102cca:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102cce:	68ba      	ldr	r2, [r7, #8]
 8102cd0:	0091      	lsls	r1, r2, #2
 8102cd2:	687a      	ldr	r2, [r7, #4]
 8102cd4:	6812      	ldr	r2, [r2, #0]
 8102cd6:	430b      	orrs	r3, r1
 8102cd8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	681b      	ldr	r3, [r3, #0]
 8102ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102ce4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102cec:	041a      	lsls	r2, r3, #16
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	430a      	orrs	r2, r1
 8102cf4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102d00:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102d08:	061a      	lsls	r2, r3, #24
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	430a      	orrs	r2, r1
 8102d10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102d18:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8102d1c:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8102d20:	009a      	lsls	r2, r3, #2
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102d2e:	009b      	lsls	r3, r3, #2
 8102d30:	441a      	add	r2, r3
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102d3e:	00db      	lsls	r3, r3, #3
 8102d40:	441a      	add	r2, r3
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d4e:	6879      	ldr	r1, [r7, #4]
 8102d50:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8102d52:	fb01 f303 	mul.w	r3, r1, r3
 8102d56:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8102d58:	441a      	add	r2, r3
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102d66:	6879      	ldr	r1, [r7, #4]
 8102d68:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8102d6a:	fb01 f303 	mul.w	r3, r1, r3
 8102d6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8102d70:	441a      	add	r2, r3
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d7e:	6879      	ldr	r1, [r7, #4]
 8102d80:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8102d82:	fb01 f303 	mul.w	r3, r1, r3
 8102d86:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8102d88:	441a      	add	r2, r3
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d9a:	00db      	lsls	r3, r3, #3
 8102d9c:	441a      	add	r2, r3
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102dae:	6879      	ldr	r1, [r7, #4]
 8102db0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8102db2:	fb01 f303 	mul.w	r3, r1, r3
 8102db6:	009b      	lsls	r3, r3, #2
 8102db8:	441a      	add	r2, r3
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102dca:	6879      	ldr	r1, [r7, #4]
 8102dcc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8102dce:	fb01 f303 	mul.w	r3, r1, r3
 8102dd2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8102dd4:	441a      	add	r2, r3
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102de2:	4a14      	ldr	r2, [pc, #80]	@ (8102e34 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8102de4:	4293      	cmp	r3, r2
 8102de6:	d90d      	bls.n	8102e04 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102dee:	f043 0220 	orr.w	r2, r3, #32
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	2203      	movs	r2, #3
 8102dfc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8102e00:	2301      	movs	r3, #1
 8102e02:	e010      	b.n	8102e26 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102e08:	60fb      	str	r3, [r7, #12]
 8102e0a:	e005      	b.n	8102e18 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	2200      	movs	r2, #0
 8102e10:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	3304      	adds	r3, #4
 8102e16:	60fb      	str	r3, [r7, #12]
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102e1e:	68fa      	ldr	r2, [r7, #12]
 8102e20:	429a      	cmp	r2, r3
 8102e22:	d3f3      	bcc.n	8102e0c <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8102e24:	2300      	movs	r3, #0
}
 8102e26:	4618      	mov	r0, r3
 8102e28:	3714      	adds	r7, #20
 8102e2a:	46bd      	mov	sp, r7
 8102e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e30:	4770      	bx	lr
 8102e32:	bf00      	nop
 8102e34:	4000d3fc 	.word	0x4000d3fc

08102e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102e38:	b480      	push	{r7}
 8102e3a:	b089      	sub	sp, #36	@ 0x24
 8102e3c:	af00      	add	r7, sp, #0
 8102e3e:	6078      	str	r0, [r7, #4]
 8102e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102e42:	2300      	movs	r3, #0
 8102e44:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102e46:	4b89      	ldr	r3, [pc, #548]	@ (810306c <HAL_GPIO_Init+0x234>)
 8102e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102e4a:	e194      	b.n	8103176 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102e4c:	683b      	ldr	r3, [r7, #0]
 8102e4e:	681a      	ldr	r2, [r3, #0]
 8102e50:	2101      	movs	r1, #1
 8102e52:	69fb      	ldr	r3, [r7, #28]
 8102e54:	fa01 f303 	lsl.w	r3, r1, r3
 8102e58:	4013      	ands	r3, r2
 8102e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102e5c:	693b      	ldr	r3, [r7, #16]
 8102e5e:	2b00      	cmp	r3, #0
 8102e60:	f000 8186 	beq.w	8103170 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102e64:	683b      	ldr	r3, [r7, #0]
 8102e66:	685b      	ldr	r3, [r3, #4]
 8102e68:	f003 0303 	and.w	r3, r3, #3
 8102e6c:	2b01      	cmp	r3, #1
 8102e6e:	d005      	beq.n	8102e7c <HAL_GPIO_Init+0x44>
 8102e70:	683b      	ldr	r3, [r7, #0]
 8102e72:	685b      	ldr	r3, [r3, #4]
 8102e74:	f003 0303 	and.w	r3, r3, #3
 8102e78:	2b02      	cmp	r3, #2
 8102e7a:	d130      	bne.n	8102ede <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	689b      	ldr	r3, [r3, #8]
 8102e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102e82:	69fb      	ldr	r3, [r7, #28]
 8102e84:	005b      	lsls	r3, r3, #1
 8102e86:	2203      	movs	r2, #3
 8102e88:	fa02 f303 	lsl.w	r3, r2, r3
 8102e8c:	43db      	mvns	r3, r3
 8102e8e:	69ba      	ldr	r2, [r7, #24]
 8102e90:	4013      	ands	r3, r2
 8102e92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102e94:	683b      	ldr	r3, [r7, #0]
 8102e96:	68da      	ldr	r2, [r3, #12]
 8102e98:	69fb      	ldr	r3, [r7, #28]
 8102e9a:	005b      	lsls	r3, r3, #1
 8102e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8102ea0:	69ba      	ldr	r2, [r7, #24]
 8102ea2:	4313      	orrs	r3, r2
 8102ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	69ba      	ldr	r2, [r7, #24]
 8102eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	685b      	ldr	r3, [r3, #4]
 8102eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102eb2:	2201      	movs	r2, #1
 8102eb4:	69fb      	ldr	r3, [r7, #28]
 8102eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8102eba:	43db      	mvns	r3, r3
 8102ebc:	69ba      	ldr	r2, [r7, #24]
 8102ebe:	4013      	ands	r3, r2
 8102ec0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	685b      	ldr	r3, [r3, #4]
 8102ec6:	091b      	lsrs	r3, r3, #4
 8102ec8:	f003 0201 	and.w	r2, r3, #1
 8102ecc:	69fb      	ldr	r3, [r7, #28]
 8102ece:	fa02 f303 	lsl.w	r3, r2, r3
 8102ed2:	69ba      	ldr	r2, [r7, #24]
 8102ed4:	4313      	orrs	r3, r2
 8102ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	69ba      	ldr	r2, [r7, #24]
 8102edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102ede:	683b      	ldr	r3, [r7, #0]
 8102ee0:	685b      	ldr	r3, [r3, #4]
 8102ee2:	f003 0303 	and.w	r3, r3, #3
 8102ee6:	2b03      	cmp	r3, #3
 8102ee8:	d017      	beq.n	8102f1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	68db      	ldr	r3, [r3, #12]
 8102eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102ef0:	69fb      	ldr	r3, [r7, #28]
 8102ef2:	005b      	lsls	r3, r3, #1
 8102ef4:	2203      	movs	r2, #3
 8102ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8102efa:	43db      	mvns	r3, r3
 8102efc:	69ba      	ldr	r2, [r7, #24]
 8102efe:	4013      	ands	r3, r2
 8102f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102f02:	683b      	ldr	r3, [r7, #0]
 8102f04:	689a      	ldr	r2, [r3, #8]
 8102f06:	69fb      	ldr	r3, [r7, #28]
 8102f08:	005b      	lsls	r3, r3, #1
 8102f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8102f0e:	69ba      	ldr	r2, [r7, #24]
 8102f10:	4313      	orrs	r3, r2
 8102f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	69ba      	ldr	r2, [r7, #24]
 8102f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102f1a:	683b      	ldr	r3, [r7, #0]
 8102f1c:	685b      	ldr	r3, [r3, #4]
 8102f1e:	f003 0303 	and.w	r3, r3, #3
 8102f22:	2b02      	cmp	r3, #2
 8102f24:	d123      	bne.n	8102f6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102f26:	69fb      	ldr	r3, [r7, #28]
 8102f28:	08da      	lsrs	r2, r3, #3
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	3208      	adds	r2, #8
 8102f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102f34:	69fb      	ldr	r3, [r7, #28]
 8102f36:	f003 0307 	and.w	r3, r3, #7
 8102f3a:	009b      	lsls	r3, r3, #2
 8102f3c:	220f      	movs	r2, #15
 8102f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f42:	43db      	mvns	r3, r3
 8102f44:	69ba      	ldr	r2, [r7, #24]
 8102f46:	4013      	ands	r3, r2
 8102f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102f4a:	683b      	ldr	r3, [r7, #0]
 8102f4c:	691a      	ldr	r2, [r3, #16]
 8102f4e:	69fb      	ldr	r3, [r7, #28]
 8102f50:	f003 0307 	and.w	r3, r3, #7
 8102f54:	009b      	lsls	r3, r3, #2
 8102f56:	fa02 f303 	lsl.w	r3, r2, r3
 8102f5a:	69ba      	ldr	r2, [r7, #24]
 8102f5c:	4313      	orrs	r3, r2
 8102f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102f60:	69fb      	ldr	r3, [r7, #28]
 8102f62:	08da      	lsrs	r2, r3, #3
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	3208      	adds	r2, #8
 8102f68:	69b9      	ldr	r1, [r7, #24]
 8102f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102f74:	69fb      	ldr	r3, [r7, #28]
 8102f76:	005b      	lsls	r3, r3, #1
 8102f78:	2203      	movs	r2, #3
 8102f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8102f7e:	43db      	mvns	r3, r3
 8102f80:	69ba      	ldr	r2, [r7, #24]
 8102f82:	4013      	ands	r3, r2
 8102f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102f86:	683b      	ldr	r3, [r7, #0]
 8102f88:	685b      	ldr	r3, [r3, #4]
 8102f8a:	f003 0203 	and.w	r2, r3, #3
 8102f8e:	69fb      	ldr	r3, [r7, #28]
 8102f90:	005b      	lsls	r3, r3, #1
 8102f92:	fa02 f303 	lsl.w	r3, r2, r3
 8102f96:	69ba      	ldr	r2, [r7, #24]
 8102f98:	4313      	orrs	r3, r2
 8102f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	69ba      	ldr	r2, [r7, #24]
 8102fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102fa2:	683b      	ldr	r3, [r7, #0]
 8102fa4:	685b      	ldr	r3, [r3, #4]
 8102fa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102faa:	2b00      	cmp	r3, #0
 8102fac:	f000 80e0 	beq.w	8103170 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8103070 <HAL_GPIO_Init+0x238>)
 8102fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8103070 <HAL_GPIO_Init+0x238>)
 8102fb8:	f043 0302 	orr.w	r3, r3, #2
 8102fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8103070 <HAL_GPIO_Init+0x238>)
 8102fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102fc6:	f003 0302 	and.w	r3, r3, #2
 8102fca:	60fb      	str	r3, [r7, #12]
 8102fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102fce:	4a29      	ldr	r2, [pc, #164]	@ (8103074 <HAL_GPIO_Init+0x23c>)
 8102fd0:	69fb      	ldr	r3, [r7, #28]
 8102fd2:	089b      	lsrs	r3, r3, #2
 8102fd4:	3302      	adds	r3, #2
 8102fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102fdc:	69fb      	ldr	r3, [r7, #28]
 8102fde:	f003 0303 	and.w	r3, r3, #3
 8102fe2:	009b      	lsls	r3, r3, #2
 8102fe4:	220f      	movs	r2, #15
 8102fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8102fea:	43db      	mvns	r3, r3
 8102fec:	69ba      	ldr	r2, [r7, #24]
 8102fee:	4013      	ands	r3, r2
 8102ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	4a20      	ldr	r2, [pc, #128]	@ (8103078 <HAL_GPIO_Init+0x240>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d052      	beq.n	81030a0 <HAL_GPIO_Init+0x268>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	4a1f      	ldr	r2, [pc, #124]	@ (810307c <HAL_GPIO_Init+0x244>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d031      	beq.n	8103066 <HAL_GPIO_Init+0x22e>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	4a1e      	ldr	r2, [pc, #120]	@ (8103080 <HAL_GPIO_Init+0x248>)
 8103006:	4293      	cmp	r3, r2
 8103008:	d02b      	beq.n	8103062 <HAL_GPIO_Init+0x22a>
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	4a1d      	ldr	r2, [pc, #116]	@ (8103084 <HAL_GPIO_Init+0x24c>)
 810300e:	4293      	cmp	r3, r2
 8103010:	d025      	beq.n	810305e <HAL_GPIO_Init+0x226>
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	4a1c      	ldr	r2, [pc, #112]	@ (8103088 <HAL_GPIO_Init+0x250>)
 8103016:	4293      	cmp	r3, r2
 8103018:	d01f      	beq.n	810305a <HAL_GPIO_Init+0x222>
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	4a1b      	ldr	r2, [pc, #108]	@ (810308c <HAL_GPIO_Init+0x254>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d019      	beq.n	8103056 <HAL_GPIO_Init+0x21e>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	4a1a      	ldr	r2, [pc, #104]	@ (8103090 <HAL_GPIO_Init+0x258>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d013      	beq.n	8103052 <HAL_GPIO_Init+0x21a>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	4a19      	ldr	r2, [pc, #100]	@ (8103094 <HAL_GPIO_Init+0x25c>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d00d      	beq.n	810304e <HAL_GPIO_Init+0x216>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	4a18      	ldr	r2, [pc, #96]	@ (8103098 <HAL_GPIO_Init+0x260>)
 8103036:	4293      	cmp	r3, r2
 8103038:	d007      	beq.n	810304a <HAL_GPIO_Init+0x212>
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	4a17      	ldr	r2, [pc, #92]	@ (810309c <HAL_GPIO_Init+0x264>)
 810303e:	4293      	cmp	r3, r2
 8103040:	d101      	bne.n	8103046 <HAL_GPIO_Init+0x20e>
 8103042:	2309      	movs	r3, #9
 8103044:	e02d      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 8103046:	230a      	movs	r3, #10
 8103048:	e02b      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 810304a:	2308      	movs	r3, #8
 810304c:	e029      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 810304e:	2307      	movs	r3, #7
 8103050:	e027      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 8103052:	2306      	movs	r3, #6
 8103054:	e025      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 8103056:	2305      	movs	r3, #5
 8103058:	e023      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 810305a:	2304      	movs	r3, #4
 810305c:	e021      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 810305e:	2303      	movs	r3, #3
 8103060:	e01f      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 8103062:	2302      	movs	r3, #2
 8103064:	e01d      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 8103066:	2301      	movs	r3, #1
 8103068:	e01b      	b.n	81030a2 <HAL_GPIO_Init+0x26a>
 810306a:	bf00      	nop
 810306c:	580000c0 	.word	0x580000c0
 8103070:	58024400 	.word	0x58024400
 8103074:	58000400 	.word	0x58000400
 8103078:	58020000 	.word	0x58020000
 810307c:	58020400 	.word	0x58020400
 8103080:	58020800 	.word	0x58020800
 8103084:	58020c00 	.word	0x58020c00
 8103088:	58021000 	.word	0x58021000
 810308c:	58021400 	.word	0x58021400
 8103090:	58021800 	.word	0x58021800
 8103094:	58021c00 	.word	0x58021c00
 8103098:	58022000 	.word	0x58022000
 810309c:	58022400 	.word	0x58022400
 81030a0:	2300      	movs	r3, #0
 81030a2:	69fa      	ldr	r2, [r7, #28]
 81030a4:	f002 0203 	and.w	r2, r2, #3
 81030a8:	0092      	lsls	r2, r2, #2
 81030aa:	4093      	lsls	r3, r2
 81030ac:	69ba      	ldr	r2, [r7, #24]
 81030ae:	4313      	orrs	r3, r2
 81030b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81030b2:	4938      	ldr	r1, [pc, #224]	@ (8103194 <HAL_GPIO_Init+0x35c>)
 81030b4:	69fb      	ldr	r3, [r7, #28]
 81030b6:	089b      	lsrs	r3, r3, #2
 81030b8:	3302      	adds	r3, #2
 81030ba:	69ba      	ldr	r2, [r7, #24]
 81030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81030c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81030c8:	693b      	ldr	r3, [r7, #16]
 81030ca:	43db      	mvns	r3, r3
 81030cc:	69ba      	ldr	r2, [r7, #24]
 81030ce:	4013      	ands	r3, r2
 81030d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81030d2:	683b      	ldr	r3, [r7, #0]
 81030d4:	685b      	ldr	r3, [r3, #4]
 81030d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81030da:	2b00      	cmp	r3, #0
 81030dc:	d003      	beq.n	81030e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81030de:	69ba      	ldr	r2, [r7, #24]
 81030e0:	693b      	ldr	r3, [r7, #16]
 81030e2:	4313      	orrs	r3, r2
 81030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81030e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81030ea:	69bb      	ldr	r3, [r7, #24]
 81030ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81030ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81030f2:	685b      	ldr	r3, [r3, #4]
 81030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81030f6:	693b      	ldr	r3, [r7, #16]
 81030f8:	43db      	mvns	r3, r3
 81030fa:	69ba      	ldr	r2, [r7, #24]
 81030fc:	4013      	ands	r3, r2
 81030fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103100:	683b      	ldr	r3, [r7, #0]
 8103102:	685b      	ldr	r3, [r3, #4]
 8103104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103108:	2b00      	cmp	r3, #0
 810310a:	d003      	beq.n	8103114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810310c:	69ba      	ldr	r2, [r7, #24]
 810310e:	693b      	ldr	r3, [r7, #16]
 8103110:	4313      	orrs	r3, r2
 8103112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8103118:	69bb      	ldr	r3, [r7, #24]
 810311a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810311c:	697b      	ldr	r3, [r7, #20]
 810311e:	685b      	ldr	r3, [r3, #4]
 8103120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103122:	693b      	ldr	r3, [r7, #16]
 8103124:	43db      	mvns	r3, r3
 8103126:	69ba      	ldr	r2, [r7, #24]
 8103128:	4013      	ands	r3, r2
 810312a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810312c:	683b      	ldr	r3, [r7, #0]
 810312e:	685b      	ldr	r3, [r3, #4]
 8103130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103134:	2b00      	cmp	r3, #0
 8103136:	d003      	beq.n	8103140 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103138:	69ba      	ldr	r2, [r7, #24]
 810313a:	693b      	ldr	r3, [r7, #16]
 810313c:	4313      	orrs	r3, r2
 810313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103140:	697b      	ldr	r3, [r7, #20]
 8103142:	69ba      	ldr	r2, [r7, #24]
 8103144:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103146:	697b      	ldr	r3, [r7, #20]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810314c:	693b      	ldr	r3, [r7, #16]
 810314e:	43db      	mvns	r3, r3
 8103150:	69ba      	ldr	r2, [r7, #24]
 8103152:	4013      	ands	r3, r2
 8103154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103156:	683b      	ldr	r3, [r7, #0]
 8103158:	685b      	ldr	r3, [r3, #4]
 810315a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810315e:	2b00      	cmp	r3, #0
 8103160:	d003      	beq.n	810316a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103162:	69ba      	ldr	r2, [r7, #24]
 8103164:	693b      	ldr	r3, [r7, #16]
 8103166:	4313      	orrs	r3, r2
 8103168:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810316a:	697b      	ldr	r3, [r7, #20]
 810316c:	69ba      	ldr	r2, [r7, #24]
 810316e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103170:	69fb      	ldr	r3, [r7, #28]
 8103172:	3301      	adds	r3, #1
 8103174:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103176:	683b      	ldr	r3, [r7, #0]
 8103178:	681a      	ldr	r2, [r3, #0]
 810317a:	69fb      	ldr	r3, [r7, #28]
 810317c:	fa22 f303 	lsr.w	r3, r2, r3
 8103180:	2b00      	cmp	r3, #0
 8103182:	f47f ae63 	bne.w	8102e4c <HAL_GPIO_Init+0x14>
  }
}
 8103186:	bf00      	nop
 8103188:	bf00      	nop
 810318a:	3724      	adds	r7, #36	@ 0x24
 810318c:	46bd      	mov	sp, r7
 810318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103192:	4770      	bx	lr
 8103194:	58000400 	.word	0x58000400

08103198 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103198:	b480      	push	{r7}
 810319a:	b083      	sub	sp, #12
 810319c:	af00      	add	r7, sp, #0
 810319e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81031a0:	4b05      	ldr	r3, [pc, #20]	@ (81031b8 <HAL_HSEM_ActivateNotification+0x20>)
 81031a2:	681a      	ldr	r2, [r3, #0]
 81031a4:	4904      	ldr	r1, [pc, #16]	@ (81031b8 <HAL_HSEM_ActivateNotification+0x20>)
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	4313      	orrs	r3, r2
 81031aa:	600b      	str	r3, [r1, #0]
#endif
}
 81031ac:	bf00      	nop
 81031ae:	370c      	adds	r7, #12
 81031b0:	46bd      	mov	sp, r7
 81031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b6:	4770      	bx	lr
 81031b8:	58026510 	.word	0x58026510

081031bc <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 81031bc:	b580      	push	{r7, lr}
 81031be:	b082      	sub	sp, #8
 81031c0:	af00      	add	r7, sp, #0
 81031c2:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d101      	bne.n	81031ce <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 81031ca:	2301      	movs	r3, #1
 81031cc:	e031      	b.n	8103232 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81031d4:	b2db      	uxtb	r3, r3
 81031d6:	2b00      	cmp	r3, #0
 81031d8:	d105      	bne.n	81031e6 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	2200      	movs	r2, #0
 81031de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 81031e0:	6878      	ldr	r0, [r7, #4]
 81031e2:	f7fe f937 	bl	8101454 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	2203      	movs	r2, #3
 81031ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 81031ee:	6878      	ldr	r0, [r7, #4]
 81031f0:	f000 f824 	bl	810323c <HAL_MMC_InitCard>
 81031f4:	4603      	mov	r3, r0
 81031f6:	2b01      	cmp	r3, #1
 81031f8:	d101      	bne.n	81031fe <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 81031fa:	2301      	movs	r3, #1
 81031fc:	e019      	b.n	8103232 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	2200      	movs	r2, #0
 8103202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	2200      	movs	r2, #0
 8103208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	2201      	movs	r2, #1
 810320e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	68db      	ldr	r3, [r3, #12]
 8103216:	2b00      	cmp	r3, #0
 8103218:	d00a      	beq.n	8103230 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	68db      	ldr	r3, [r3, #12]
 810321e:	4619      	mov	r1, r3
 8103220:	6878      	ldr	r0, [r7, #4]
 8103222:	f000 fb47 	bl	81038b4 <HAL_MMC_ConfigWideBusOperation>
 8103226:	4603      	mov	r3, r0
 8103228:	2b00      	cmp	r3, #0
 810322a:	d001      	beq.n	8103230 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 810322c:	2301      	movs	r3, #1
 810322e:	e000      	b.n	8103232 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8103230:	2300      	movs	r3, #0
}
 8103232:	4618      	mov	r0, r3
 8103234:	3708      	adds	r7, #8
 8103236:	46bd      	mov	sp, r7
 8103238:	bd80      	pop	{r7, pc}
	...

0810323c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 810323c:	b590      	push	{r4, r7, lr}
 810323e:	b08d      	sub	sp, #52	@ 0x34
 8103240:	af02      	add	r7, sp, #8
 8103242:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8103244:	2300      	movs	r3, #0
 8103246:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8103248:	2300      	movs	r3, #0
 810324a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810324c:	2300      	movs	r3, #0
 810324e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8103250:	2300      	movs	r3, #0
 8103252:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8103254:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8103258:	f04f 0100 	mov.w	r1, #0
 810325c:	f002 fd3c 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8103260:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8103262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103264:	2b00      	cmp	r3, #0
 8103266:	d109      	bne.n	810327c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	2201      	movs	r2, #1
 810326c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8103276:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103278:	2301      	movs	r3, #1
 810327a:	e070      	b.n	810335e <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 810327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810327e:	0a1b      	lsrs	r3, r3, #8
 8103280:	4a39      	ldr	r2, [pc, #228]	@ (8103368 <HAL_MMC_InitCard+0x12c>)
 8103282:	fba2 2303 	umull	r2, r3, r2, r3
 8103286:	091b      	lsrs	r3, r3, #4
 8103288:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	681c      	ldr	r4, [r3, #0]
 810328e:	466a      	mov	r2, sp
 8103290:	f107 0318 	add.w	r3, r7, #24
 8103294:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103298:	e882 0003 	stmia.w	r2, {r0, r1}
 810329c:	f107 030c 	add.w	r3, r7, #12
 81032a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81032a2:	4620      	mov	r0, r4
 81032a4:	f005 fccc 	bl	8108c40 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4618      	mov	r0, r3
 81032ae:	f005 fcfe 	bl	8108cae <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 81032b2:	69fb      	ldr	r3, [r7, #28]
 81032b4:	2b00      	cmp	r3, #0
 81032b6:	d005      	beq.n	81032c4 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81032b8:	69fb      	ldr	r3, [r7, #28]
 81032ba:	005b      	lsls	r3, r3, #1
 81032bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81032be:	fbb2 f3f3 	udiv	r3, r2, r3
 81032c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d007      	beq.n	81032da <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81032ca:	4a28      	ldr	r2, [pc, #160]	@ (810336c <HAL_MMC_InitCard+0x130>)
 81032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 81032d2:	3301      	adds	r3, #1
 81032d4:	4618      	mov	r0, r3
 81032d6:	f7fe fcd3 	bl	8101c80 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 81032da:	6878      	ldr	r0, [r7, #4]
 81032dc:	f000 fcb4 	bl	8103c48 <MMC_PowerON>
 81032e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81032e2:	6a3b      	ldr	r3, [r7, #32]
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	d00b      	beq.n	8103300 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	2201      	movs	r2, #1
 81032ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81032f4:	6a3b      	ldr	r3, [r7, #32]
 81032f6:	431a      	orrs	r2, r3
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81032fc:	2301      	movs	r3, #1
 81032fe:	e02e      	b.n	810335e <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8103300:	6878      	ldr	r0, [r7, #4]
 8103302:	f000 fba3 	bl	8103a4c <MMC_InitCard>
 8103306:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103308:	6a3b      	ldr	r3, [r7, #32]
 810330a:	2b00      	cmp	r3, #0
 810330c:	d00b      	beq.n	8103326 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	2201      	movs	r2, #1
 8103312:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810331a:	6a3b      	ldr	r3, [r7, #32]
 810331c:	431a      	orrs	r2, r3
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103322:	2301      	movs	r3, #1
 8103324:	e01b      	b.n	810335e <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810332e:	4618      	mov	r0, r3
 8103330:	f005 fd52 	bl	8108dd8 <SDMMC_CmdBlockLength>
 8103334:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103336:	6a3b      	ldr	r3, [r7, #32]
 8103338:	2b00      	cmp	r3, #0
 810333a:	d00f      	beq.n	810335c <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	4a0b      	ldr	r2, [pc, #44]	@ (8103370 <HAL_MMC_InitCard+0x134>)
 8103342:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103348:	6a3b      	ldr	r3, [r7, #32]
 810334a:	431a      	orrs	r2, r3
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	2201      	movs	r2, #1
 8103354:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103358:	2301      	movs	r3, #1
 810335a:	e000      	b.n	810335e <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 810335c:	2300      	movs	r3, #0
}
 810335e:	4618      	mov	r0, r3
 8103360:	372c      	adds	r7, #44	@ 0x2c
 8103362:	46bd      	mov	sp, r7
 8103364:	bd90      	pop	{r4, r7, pc}
 8103366:	bf00      	nop
 8103368:	014f8b59 	.word	0x014f8b59
 810336c:	00012110 	.word	0x00012110
 8103370:	1fe00fff 	.word	0x1fe00fff

08103374 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8103374:	b580      	push	{r7, lr}
 8103376:	b084      	sub	sp, #16
 8103378:	af00      	add	r7, sp, #0
 810337a:	6078      	str	r0, [r7, #4]
 810337c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 810337e:	2300      	movs	r3, #0
 8103380:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103386:	0f9b      	lsrs	r3, r3, #30
 8103388:	b2da      	uxtb	r2, r3
 810338a:	683b      	ldr	r3, [r7, #0]
 810338c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103392:	0e9b      	lsrs	r3, r3, #26
 8103394:	b2db      	uxtb	r3, r3
 8103396:	f003 030f 	and.w	r3, r3, #15
 810339a:	b2da      	uxtb	r2, r3
 810339c:	683b      	ldr	r3, [r7, #0]
 810339e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033a4:	0e1b      	lsrs	r3, r3, #24
 81033a6:	b2db      	uxtb	r3, r3
 81033a8:	f003 0303 	and.w	r3, r3, #3
 81033ac:	b2da      	uxtb	r2, r3
 81033ae:	683b      	ldr	r3, [r7, #0]
 81033b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033b6:	0c1b      	lsrs	r3, r3, #16
 81033b8:	b2da      	uxtb	r2, r3
 81033ba:	683b      	ldr	r3, [r7, #0]
 81033bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033c2:	0a1b      	lsrs	r3, r3, #8
 81033c4:	b2da      	uxtb	r2, r3
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033ce:	b2da      	uxtb	r2, r3
 81033d0:	683b      	ldr	r3, [r7, #0]
 81033d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81033d8:	0d1b      	lsrs	r3, r3, #20
 81033da:	b29a      	uxth	r2, r3
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81033e4:	0c1b      	lsrs	r3, r3, #16
 81033e6:	b2db      	uxtb	r3, r3
 81033e8:	f003 030f 	and.w	r3, r3, #15
 81033ec:	b2da      	uxtb	r2, r3
 81033ee:	683b      	ldr	r3, [r7, #0]
 81033f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81033f6:	0bdb      	lsrs	r3, r3, #15
 81033f8:	b2db      	uxtb	r3, r3
 81033fa:	f003 0301 	and.w	r3, r3, #1
 81033fe:	b2da      	uxtb	r2, r3
 8103400:	683b      	ldr	r3, [r7, #0]
 8103402:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103408:	0b9b      	lsrs	r3, r3, #14
 810340a:	b2db      	uxtb	r3, r3
 810340c:	f003 0301 	and.w	r3, r3, #1
 8103410:	b2da      	uxtb	r2, r3
 8103412:	683b      	ldr	r3, [r7, #0]
 8103414:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810341a:	0b5b      	lsrs	r3, r3, #13
 810341c:	b2db      	uxtb	r3, r3
 810341e:	f003 0301 	and.w	r3, r3, #1
 8103422:	b2da      	uxtb	r2, r3
 8103424:	683b      	ldr	r3, [r7, #0]
 8103426:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810342c:	0b1b      	lsrs	r3, r3, #12
 810342e:	b2db      	uxtb	r3, r3
 8103430:	f003 0301 	and.w	r3, r3, #1
 8103434:	b2da      	uxtb	r2, r3
 8103436:	683b      	ldr	r3, [r7, #0]
 8103438:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810343a:	683b      	ldr	r3, [r7, #0]
 810343c:	2200      	movs	r2, #0
 810343e:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8103440:	f107 010c 	add.w	r1, r7, #12
 8103444:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8103448:	22d4      	movs	r2, #212	@ 0xd4
 810344a:	6878      	ldr	r0, [r7, #4]
 810344c:	f000 fc4c 	bl	8103ce8 <MMC_ReadExtCSD>
 8103450:	4603      	mov	r3, r0
 8103452:	2b00      	cmp	r3, #0
 8103454:	d001      	beq.n	810345a <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8103456:	2301      	movs	r3, #1
 8103458:	e129      	b.n	81036ae <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810345e:	2b00      	cmp	r3, #0
 8103460:	d163      	bne.n	810352a <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103466:	009a      	lsls	r2, r3, #2
 8103468:	f640 73fc 	movw	r3, #4092	@ 0xffc
 810346c:	4013      	ands	r3, r2
 810346e:	687a      	ldr	r2, [r7, #4]
 8103470:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8103472:	0f92      	lsrs	r2, r2, #30
 8103474:	431a      	orrs	r2, r3
 8103476:	683b      	ldr	r3, [r7, #0]
 8103478:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810347e:	0edb      	lsrs	r3, r3, #27
 8103480:	b2db      	uxtb	r3, r3
 8103482:	f003 0307 	and.w	r3, r3, #7
 8103486:	b2da      	uxtb	r2, r3
 8103488:	683b      	ldr	r3, [r7, #0]
 810348a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103490:	0e1b      	lsrs	r3, r3, #24
 8103492:	b2db      	uxtb	r3, r3
 8103494:	f003 0307 	and.w	r3, r3, #7
 8103498:	b2da      	uxtb	r2, r3
 810349a:	683b      	ldr	r3, [r7, #0]
 810349c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81034a2:	0d5b      	lsrs	r3, r3, #21
 81034a4:	b2db      	uxtb	r3, r3
 81034a6:	f003 0307 	and.w	r3, r3, #7
 81034aa:	b2da      	uxtb	r2, r3
 81034ac:	683b      	ldr	r3, [r7, #0]
 81034ae:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81034b4:	0c9b      	lsrs	r3, r3, #18
 81034b6:	b2db      	uxtb	r3, r3
 81034b8:	f003 0307 	and.w	r3, r3, #7
 81034bc:	b2da      	uxtb	r2, r3
 81034be:	683b      	ldr	r3, [r7, #0]
 81034c0:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81034c6:	0bdb      	lsrs	r3, r3, #15
 81034c8:	b2db      	uxtb	r3, r3
 81034ca:	f003 0307 	and.w	r3, r3, #7
 81034ce:	b2da      	uxtb	r2, r3
 81034d0:	683b      	ldr	r3, [r7, #0]
 81034d2:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81034d4:	683b      	ldr	r3, [r7, #0]
 81034d6:	691b      	ldr	r3, [r3, #16]
 81034d8:	1c5a      	adds	r2, r3, #1
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 81034de:	683b      	ldr	r3, [r7, #0]
 81034e0:	7e1b      	ldrb	r3, [r3, #24]
 81034e2:	b2db      	uxtb	r3, r3
 81034e4:	f003 0307 	and.w	r3, r3, #7
 81034e8:	3302      	adds	r3, #2
 81034ea:	2201      	movs	r2, #1
 81034ec:	fa02 f303 	lsl.w	r3, r2, r3
 81034f0:	687a      	ldr	r2, [r7, #4]
 81034f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81034f4:	fb03 f202 	mul.w	r2, r3, r2
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 81034fc:	683b      	ldr	r3, [r7, #0]
 81034fe:	7a1b      	ldrb	r3, [r3, #8]
 8103500:	b2db      	uxtb	r3, r3
 8103502:	f003 030f 	and.w	r3, r3, #15
 8103506:	2201      	movs	r2, #1
 8103508:	409a      	lsls	r2, r3
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103512:	687a      	ldr	r2, [r7, #4]
 8103514:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8103516:	0a52      	lsrs	r2, r2, #9
 8103518:	fb03 f202 	mul.w	r2, r3, r2
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103526:	655a      	str	r2, [r3, #84]	@ 0x54
 8103528:	e023      	b.n	8103572 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810352e:	2b01      	cmp	r3, #1
 8103530:	d10f      	bne.n	8103552 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8103532:	68fa      	ldr	r2, [r7, #12]
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103546:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	655a      	str	r2, [r3, #84]	@ 0x54
 8103550:	e00f      	b.n	8103572 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	681b      	ldr	r3, [r3, #0]
 8103556:	4a58      	ldr	r2, [pc, #352]	@ (81036b8 <HAL_MMC_GetCardCSD+0x344>)
 8103558:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810355e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	2201      	movs	r2, #1
 810356a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810356e:	2301      	movs	r3, #1
 8103570:	e09d      	b.n	81036ae <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103576:	0b9b      	lsrs	r3, r3, #14
 8103578:	b2db      	uxtb	r3, r3
 810357a:	f003 0301 	and.w	r3, r3, #1
 810357e:	b2da      	uxtb	r2, r3
 8103580:	683b      	ldr	r3, [r7, #0]
 8103582:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103588:	09db      	lsrs	r3, r3, #7
 810358a:	b2db      	uxtb	r3, r3
 810358c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103590:	b2da      	uxtb	r2, r3
 8103592:	683b      	ldr	r3, [r7, #0]
 8103594:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810359a:	b2db      	uxtb	r3, r3
 810359c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81035a0:	b2da      	uxtb	r2, r3
 81035a2:	683b      	ldr	r3, [r7, #0]
 81035a4:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035aa:	0fdb      	lsrs	r3, r3, #31
 81035ac:	b2da      	uxtb	r2, r3
 81035ae:	683b      	ldr	r3, [r7, #0]
 81035b0:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035b6:	0f5b      	lsrs	r3, r3, #29
 81035b8:	b2db      	uxtb	r3, r3
 81035ba:	f003 0303 	and.w	r3, r3, #3
 81035be:	b2da      	uxtb	r2, r3
 81035c0:	683b      	ldr	r3, [r7, #0]
 81035c2:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035c8:	0e9b      	lsrs	r3, r3, #26
 81035ca:	b2db      	uxtb	r3, r3
 81035cc:	f003 0307 	and.w	r3, r3, #7
 81035d0:	b2da      	uxtb	r2, r3
 81035d2:	683b      	ldr	r3, [r7, #0]
 81035d4:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035da:	0d9b      	lsrs	r3, r3, #22
 81035dc:	b2db      	uxtb	r3, r3
 81035de:	f003 030f 	and.w	r3, r3, #15
 81035e2:	b2da      	uxtb	r2, r3
 81035e4:	683b      	ldr	r3, [r7, #0]
 81035e6:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035ec:	0d5b      	lsrs	r3, r3, #21
 81035ee:	b2db      	uxtb	r3, r3
 81035f0:	f003 0301 	and.w	r3, r3, #1
 81035f4:	b2da      	uxtb	r2, r3
 81035f6:	683b      	ldr	r3, [r7, #0]
 81035f8:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81035fc:	683b      	ldr	r3, [r7, #0]
 81035fe:	2200      	movs	r2, #0
 8103600:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103608:	0c1b      	lsrs	r3, r3, #16
 810360a:	b2db      	uxtb	r3, r3
 810360c:	f003 0301 	and.w	r3, r3, #1
 8103610:	b2da      	uxtb	r2, r3
 8103612:	683b      	ldr	r3, [r7, #0]
 8103614:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810361c:	0bdb      	lsrs	r3, r3, #15
 810361e:	b2db      	uxtb	r3, r3
 8103620:	f003 0301 	and.w	r3, r3, #1
 8103624:	b2da      	uxtb	r2, r3
 8103626:	683b      	ldr	r3, [r7, #0]
 8103628:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103630:	0b9b      	lsrs	r3, r3, #14
 8103632:	b2db      	uxtb	r3, r3
 8103634:	f003 0301 	and.w	r3, r3, #1
 8103638:	b2da      	uxtb	r2, r3
 810363a:	683b      	ldr	r3, [r7, #0]
 810363c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103644:	0b5b      	lsrs	r3, r3, #13
 8103646:	b2db      	uxtb	r3, r3
 8103648:	f003 0301 	and.w	r3, r3, #1
 810364c:	b2da      	uxtb	r2, r3
 810364e:	683b      	ldr	r3, [r7, #0]
 8103650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103658:	0b1b      	lsrs	r3, r3, #12
 810365a:	b2db      	uxtb	r3, r3
 810365c:	f003 0301 	and.w	r3, r3, #1
 8103660:	b2da      	uxtb	r2, r3
 8103662:	683b      	ldr	r3, [r7, #0]
 8103664:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810366c:	0a9b      	lsrs	r3, r3, #10
 810366e:	b2db      	uxtb	r3, r3
 8103670:	f003 0303 	and.w	r3, r3, #3
 8103674:	b2da      	uxtb	r2, r3
 8103676:	683b      	ldr	r3, [r7, #0]
 8103678:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103680:	0a1b      	lsrs	r3, r3, #8
 8103682:	b2db      	uxtb	r3, r3
 8103684:	f003 0303 	and.w	r3, r3, #3
 8103688:	b2da      	uxtb	r2, r3
 810368a:	683b      	ldr	r3, [r7, #0]
 810368c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103694:	085b      	lsrs	r3, r3, #1
 8103696:	b2db      	uxtb	r3, r3
 8103698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810369c:	b2da      	uxtb	r2, r3
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 81036a4:	683b      	ldr	r3, [r7, #0]
 81036a6:	2201      	movs	r2, #1
 81036a8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 81036ac:	2300      	movs	r3, #0
}
 81036ae:	4618      	mov	r0, r3
 81036b0:	3710      	adds	r7, #16
 81036b2:	46bd      	mov	sp, r7
 81036b4:	bd80      	pop	{r7, pc}
 81036b6:	bf00      	nop
 81036b8:	1fe00fff 	.word	0x1fe00fff

081036bc <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 81036bc:	b580      	push	{r7, lr}
 81036be:	b08e      	sub	sp, #56	@ 0x38
 81036c0:	af00      	add	r7, sp, #0
 81036c2:	60f8      	str	r0, [r7, #12]
 81036c4:	60b9      	str	r1, [r7, #8]
 81036c6:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81036c8:	f7fe face 	bl	8101c68 <HAL_GetTick>
 81036cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 81036ce:	68bb      	ldr	r3, [r7, #8]
 81036d0:	2b00      	cmp	r3, #0
 81036d2:	d107      	bne.n	81036e4 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 81036d4:	68fb      	ldr	r3, [r7, #12]
 81036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81036d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81036dc:	68fb      	ldr	r3, [r7, #12]
 81036de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81036e0:	2301      	movs	r3, #1
 81036e2:	e0de      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81036ea:	b2db      	uxtb	r3, r3
 81036ec:	2b01      	cmp	r3, #1
 81036ee:	f040 80d7 	bne.w	81038a0 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 81036f2:	68fb      	ldr	r3, [r7, #12]
 81036f4:	2200      	movs	r2, #0
 81036f6:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 81036f8:	68fb      	ldr	r3, [r7, #12]
 81036fa:	2203      	movs	r2, #3
 81036fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8103700:	68fb      	ldr	r3, [r7, #12]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	2200      	movs	r2, #0
 8103706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8103708:	68bb      	ldr	r3, [r7, #8]
 810370a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810370c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8103710:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 8103712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103716:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103718:	2390      	movs	r3, #144	@ 0x90
 810371a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810371c:	2302      	movs	r3, #2
 810371e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103720:	2300      	movs	r3, #0
 8103722:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8103724:	2300      	movs	r3, #0
 8103726:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103728:	68fb      	ldr	r3, [r7, #12]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	f107 0210 	add.w	r2, r7, #16
 8103730:	4611      	mov	r1, r2
 8103732:	4618      	mov	r0, r3
 8103734:	f005 fb24 	bl	8108d80 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8103738:	68fb      	ldr	r3, [r7, #12]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	68da      	ldr	r2, [r3, #12]
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103746:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103748:	68fb      	ldr	r3, [r7, #12]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	2100      	movs	r1, #0
 810374e:	4618      	mov	r0, r3
 8103750:	f005 fc70 	bl	8109034 <SDMMC_CmdSendEXTCSD>
 8103754:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103758:	2b00      	cmp	r3, #0
 810375a:	d045      	beq.n	81037e8 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810375c:	68fb      	ldr	r3, [r7, #12]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	4a52      	ldr	r2, [pc, #328]	@ (81038ac <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103762:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8103764:	68fb      	ldr	r3, [r7, #12]
 8103766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810376a:	431a      	orrs	r2, r3
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	2201      	movs	r2, #1
 8103774:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8103778:	2301      	movs	r3, #1
 810377a:	e092      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 810377c:	68fb      	ldr	r3, [r7, #12]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103786:	2b00      	cmp	r3, #0
 8103788:	d013      	beq.n	81037b2 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 810378a:	2300      	movs	r3, #0
 810378c:	637b      	str	r3, [r7, #52]	@ 0x34
 810378e:	e00d      	b.n	81037ac <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8103790:	68fb      	ldr	r3, [r7, #12]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	4618      	mov	r0, r3
 8103796:	f005 fa7d 	bl	8108c94 <SDMMC_ReadFIFO>
 810379a:	4602      	mov	r2, r0
 810379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810379e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 81037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81037a2:	3304      	adds	r3, #4
 81037a4:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81037a8:	3301      	adds	r3, #1
 81037aa:	637b      	str	r3, [r7, #52]	@ 0x34
 81037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81037ae:	2b07      	cmp	r3, #7
 81037b0:	d9ee      	bls.n	8103790 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81037b2:	f7fe fa59 	bl	8101c68 <HAL_GetTick>
 81037b6:	4602      	mov	r2, r0
 81037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81037ba:	1ad3      	subs	r3, r2, r3
 81037bc:	687a      	ldr	r2, [r7, #4]
 81037be:	429a      	cmp	r2, r3
 81037c0:	d902      	bls.n	81037c8 <HAL_MMC_GetCardExtCSD+0x10c>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d10f      	bne.n	81037e8 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81037c8:	68fb      	ldr	r3, [r7, #12]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a37      	ldr	r2, [pc, #220]	@ (81038ac <HAL_MMC_GetCardExtCSD+0x1f0>)
 81037ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 81037d0:	68fb      	ldr	r3, [r7, #12]
 81037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81037d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81037d8:	68fb      	ldr	r3, [r7, #12]
 81037da:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 81037dc:	68fb      	ldr	r3, [r7, #12]
 81037de:	2201      	movs	r2, #1
 81037e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 81037e4:	2303      	movs	r3, #3
 81037e6:	e05c      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 81037e8:	68fb      	ldr	r3, [r7, #12]
 81037ea:	681b      	ldr	r3, [r3, #0]
 81037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81037ee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d0c2      	beq.n	810377c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 81037f6:	68fb      	ldr	r3, [r7, #12]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	68da      	ldr	r2, [r3, #12]
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103804:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103806:	68fb      	ldr	r3, [r7, #12]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810380c:	f003 0308 	and.w	r3, r3, #8
 8103810:	2b00      	cmp	r3, #0
 8103812:	d00f      	beq.n	8103834 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103814:	68fb      	ldr	r3, [r7, #12]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	4a24      	ldr	r2, [pc, #144]	@ (81038ac <HAL_MMC_GetCardExtCSD+0x1f0>)
 810381a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103820:	f043 0208 	orr.w	r2, r3, #8
 8103824:	68fb      	ldr	r3, [r7, #12]
 8103826:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	2201      	movs	r2, #1
 810382c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8103830:	2301      	movs	r3, #1
 8103832:	e036      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103834:	68fb      	ldr	r3, [r7, #12]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810383a:	f003 0302 	and.w	r3, r3, #2
 810383e:	2b00      	cmp	r3, #0
 8103840:	d00f      	beq.n	8103862 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103842:	68fb      	ldr	r3, [r7, #12]
 8103844:	681b      	ldr	r3, [r3, #0]
 8103846:	4a19      	ldr	r2, [pc, #100]	@ (81038ac <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103848:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 810384a:	68fb      	ldr	r3, [r7, #12]
 810384c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810384e:	f043 0202 	orr.w	r2, r3, #2
 8103852:	68fb      	ldr	r3, [r7, #12]
 8103854:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103856:	68fb      	ldr	r3, [r7, #12]
 8103858:	2201      	movs	r2, #1
 810385a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 810385e:	2301      	movs	r3, #1
 8103860:	e01f      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103862:	68fb      	ldr	r3, [r7, #12]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103868:	f003 0320 	and.w	r3, r3, #32
 810386c:	2b00      	cmp	r3, #0
 810386e:	d00f      	beq.n	8103890 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103870:	68fb      	ldr	r3, [r7, #12]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a0d      	ldr	r2, [pc, #52]	@ (81038ac <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103876:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103878:	68fb      	ldr	r3, [r7, #12]
 810387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810387c:	f043 0220 	orr.w	r2, r3, #32
 8103880:	68fb      	ldr	r3, [r7, #12]
 8103882:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	2201      	movs	r2, #1
 8103888:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 810388c:	2301      	movs	r3, #1
 810388e:	e008      	b.n	81038a2 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103890:	68fb      	ldr	r3, [r7, #12]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	4a06      	ldr	r2, [pc, #24]	@ (81038b0 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8103896:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8103898:	68fb      	ldr	r3, [r7, #12]
 810389a:	2201      	movs	r2, #1
 810389c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 81038a0:	2300      	movs	r3, #0
}
 81038a2:	4618      	mov	r0, r3
 81038a4:	3738      	adds	r7, #56	@ 0x38
 81038a6:	46bd      	mov	sp, r7
 81038a8:	bd80      	pop	{r7, pc}
 81038aa:	bf00      	nop
 81038ac:	1fe00fff 	.word	0x1fe00fff
 81038b0:	18000f3a 	.word	0x18000f3a

081038b4 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 81038b4:	b5b0      	push	{r4, r5, r7, lr}
 81038b6:	b08c      	sub	sp, #48	@ 0x30
 81038b8:	af02      	add	r7, sp, #8
 81038ba:	6078      	str	r0, [r7, #4]
 81038bc:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 81038be:	2300      	movs	r3, #0
 81038c0:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	2203      	movs	r2, #3
 81038c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	685b      	ldr	r3, [r3, #4]
 81038d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81038d4:	2b00      	cmp	r3, #0
 81038d6:	d014      	beq.n	8103902 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	685b      	ldr	r3, [r3, #4]
 81038de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81038e2:	2b00      	cmp	r3, #0
 81038e4:	d006      	beq.n	81038f4 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 81038e6:	2204      	movs	r2, #4
 81038e8:	6839      	ldr	r1, [r7, #0]
 81038ea:	6878      	ldr	r0, [r7, #4]
 81038ec:	f000 faf0 	bl	8103ed0 <MMC_PwrClassUpdate>
 81038f0:	6238      	str	r0, [r7, #32]
 81038f2:	e00c      	b.n	810390e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 81038f4:	2202      	movs	r2, #2
 81038f6:	6839      	ldr	r1, [r7, #0]
 81038f8:	6878      	ldr	r0, [r7, #4]
 81038fa:	f000 fae9 	bl	8103ed0 <MMC_PwrClassUpdate>
 81038fe:	6238      	str	r0, [r7, #32]
 8103900:	e005      	b.n	810390e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8103902:	2201      	movs	r2, #1
 8103904:	6839      	ldr	r1, [r7, #0]
 8103906:	6878      	ldr	r0, [r7, #4]
 8103908:	f000 fae2 	bl	8103ed0 <MMC_PwrClassUpdate>
 810390c:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 810390e:	6a3b      	ldr	r3, [r7, #32]
 8103910:	2b00      	cmp	r3, #0
 8103912:	d17b      	bne.n	8103a0c <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8103914:	683b      	ldr	r3, [r7, #0]
 8103916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810391a:	d107      	bne.n	810392c <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	4946      	ldr	r1, [pc, #280]	@ (8103a3c <HAL_MMC_ConfigWideBusOperation+0x188>)
 8103922:	4618      	mov	r0, r3
 8103924:	f005 fb63 	bl	8108fee <SDMMC_CmdSwitch>
 8103928:	6238      	str	r0, [r7, #32]
 810392a:	e019      	b.n	8103960 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810392c:	683b      	ldr	r3, [r7, #0]
 810392e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103932:	d107      	bne.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4941      	ldr	r1, [pc, #260]	@ (8103a40 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 810393a:	4618      	mov	r0, r3
 810393c:	f005 fb57 	bl	8108fee <SDMMC_CmdSwitch>
 8103940:	6238      	str	r0, [r7, #32]
 8103942:	e00d      	b.n	8103960 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8103944:	683b      	ldr	r3, [r7, #0]
 8103946:	2b00      	cmp	r3, #0
 8103948:	d107      	bne.n	810395a <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	493d      	ldr	r1, [pc, #244]	@ (8103a44 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8103950:	4618      	mov	r0, r3
 8103952:	f005 fb4c 	bl	8108fee <SDMMC_CmdSwitch>
 8103956:	6238      	str	r0, [r7, #32]
 8103958:	e002      	b.n	8103960 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 810395a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810395e:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8103960:	6a3b      	ldr	r3, [r7, #32]
 8103962:	2b00      	cmp	r3, #0
 8103964:	d152      	bne.n	8103a0c <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8103966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810396a:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681a      	ldr	r2, [r3, #0]
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103974:	041b      	lsls	r3, r3, #16
 8103976:	4619      	mov	r1, r3
 8103978:	4610      	mov	r0, r2
 810397a:	f005 faf5 	bl	8108f68 <SDMMC_CmdSendStatus>
 810397e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8103980:	6a3b      	ldr	r3, [r7, #32]
 8103982:	2b00      	cmp	r3, #0
 8103984:	d112      	bne.n	81039ac <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	2100      	movs	r1, #0
 810398c:	4618      	mov	r0, r3
 810398e:	f005 f9e4 	bl	8108d5a <SDMMC_GetResponse>
 8103992:	61f8      	str	r0, [r7, #28]
        count--;
 8103994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103996:	3b01      	subs	r3, #1
 8103998:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 810399a:	69fb      	ldr	r3, [r7, #28]
 810399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	d104      	bne.n	81039ae <HAL_MMC_ConfigWideBusOperation+0xfa>
 81039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	d1e0      	bne.n	810396c <HAL_MMC_ConfigWideBusOperation+0xb8>
 81039aa:	e000      	b.n	81039ae <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 81039ac:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 81039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d025      	beq.n	8103a00 <HAL_MMC_ConfigWideBusOperation+0x14c>
 81039b4:	6a3b      	ldr	r3, [r7, #32]
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d122      	bne.n	8103a00 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 81039ba:	69fb      	ldr	r3, [r7, #28]
 81039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d003      	beq.n	81039cc <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81039c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 81039c8:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 81039ca:	e01f      	b.n	8103a0c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	f107 0408 	add.w	r4, r7, #8
 81039d2:	1d1d      	adds	r5, r3, #4
 81039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81039d8:	682b      	ldr	r3, [r5, #0]
 81039da:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 81039dc:	683b      	ldr	r3, [r7, #0]
 81039de:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681c      	ldr	r4, [r3, #0]
 81039e4:	466a      	mov	r2, sp
 81039e6:	f107 0314 	add.w	r3, r7, #20
 81039ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 81039ee:	e882 0003 	stmia.w	r2, {r0, r1}
 81039f2:	f107 0308 	add.w	r3, r7, #8
 81039f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 81039f8:	4620      	mov	r0, r4
 81039fa:	f005 f921 	bl	8108c40 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 81039fe:	e005      	b.n	8103a0c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8103a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a02:	2b00      	cmp	r3, #0
 8103a04:	d102      	bne.n	8103a0c <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8103a06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103a0a:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	2201      	movs	r2, #1
 8103a10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8103a14:	6a3b      	ldr	r3, [r7, #32]
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	d00b      	beq.n	8103a32 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	681b      	ldr	r3, [r3, #0]
 8103a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8103a48 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8103a20:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103a26:	6a3b      	ldr	r3, [r7, #32]
 8103a28:	431a      	orrs	r2, r3
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103a2e:	2301      	movs	r3, #1
 8103a30:	e000      	b.n	8103a34 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8103a32:	2300      	movs	r3, #0
}
 8103a34:	4618      	mov	r0, r3
 8103a36:	3728      	adds	r7, #40	@ 0x28
 8103a38:	46bd      	mov	sp, r7
 8103a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8103a3c:	03b70200 	.word	0x03b70200
 8103a40:	03b70100 	.word	0x03b70100
 8103a44:	03b70000 	.word	0x03b70000
 8103a48:	1fe00fff 	.word	0x1fe00fff

08103a4c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103a4c:	b5b0      	push	{r4, r5, r7, lr}
 8103a4e:	b096      	sub	sp, #88	@ 0x58
 8103a50:	af02      	add	r7, sp, #8
 8103a52:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8103a54:	2302      	movs	r3, #2
 8103a56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4618      	mov	r0, r3
 8103a60:	f005 f936 	bl	8108cd0 <SDMMC_GetPowerState>
 8103a64:	4603      	mov	r3, r0
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d102      	bne.n	8103a70 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8103a6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8103a6e:	e0e6      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	4618      	mov	r0, r3
 8103a76:	f005 fa13 	bl	8108ea0 <SDMMC_CmdSendCID>
 8103a7a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	d001      	beq.n	8103a86 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8103a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103a84:	e0db      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	2100      	movs	r1, #0
 8103a8c:	4618      	mov	r0, r3
 8103a8e:	f005 f964 	bl	8108d5a <SDMMC_GetResponse>
 8103a92:	4602      	mov	r2, r0
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	2104      	movs	r1, #4
 8103a9e:	4618      	mov	r0, r3
 8103aa0:	f005 f95b 	bl	8108d5a <SDMMC_GetResponse>
 8103aa4:	4602      	mov	r2, r0
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	2108      	movs	r1, #8
 8103ab0:	4618      	mov	r0, r3
 8103ab2:	f005 f952 	bl	8108d5a <SDMMC_GetResponse>
 8103ab6:	4602      	mov	r2, r0
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	210c      	movs	r1, #12
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	f005 f949 	bl	8108d5a <SDMMC_GetResponse>
 8103ac8:	4602      	mov	r2, r0
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	681b      	ldr	r3, [r3, #0]
 8103ad2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103ad6:	4611      	mov	r1, r2
 8103ad8:	4618      	mov	r0, r3
 8103ada:	f005 fa20 	bl	8108f1e <SDMMC_CmdSetRelAddMmc>
 8103ade:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103ae2:	2b00      	cmp	r3, #0
 8103ae4:	d001      	beq.n	8103aea <MMC_InitCard+0x9e>
  {
    return errorstate;
 8103ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103ae8:	e0a9      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103aea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681a      	ldr	r2, [r3, #0]
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103afa:	041b      	lsls	r3, r3, #16
 8103afc:	4619      	mov	r1, r3
 8103afe:	4610      	mov	r0, r2
 8103b00:	f005 f9ed 	bl	8108ede <SDMMC_CmdSendCSD>
 8103b04:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d001      	beq.n	8103b10 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8103b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103b0e:	e096      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	2100      	movs	r1, #0
 8103b16:	4618      	mov	r0, r3
 8103b18:	f005 f91f 	bl	8108d5a <SDMMC_GetResponse>
 8103b1c:	4602      	mov	r2, r0
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	2104      	movs	r1, #4
 8103b28:	4618      	mov	r0, r3
 8103b2a:	f005 f916 	bl	8108d5a <SDMMC_GetResponse>
 8103b2e:	4602      	mov	r2, r0
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	2108      	movs	r1, #8
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f005 f90d 	bl	8108d5a <SDMMC_GetResponse>
 8103b40:	4602      	mov	r2, r0
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	210c      	movs	r1, #12
 8103b4c:	4618      	mov	r0, r3
 8103b4e:	f005 f904 	bl	8108d5a <SDMMC_GetResponse>
 8103b52:	4602      	mov	r2, r0
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	2104      	movs	r1, #4
 8103b5e:	4618      	mov	r0, r3
 8103b60:	f005 f8fb 	bl	8108d5a <SDMMC_GetResponse>
 8103b64:	4603      	mov	r3, r0
 8103b66:	0d1a      	lsrs	r2, r3, #20
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681a      	ldr	r2, [r3, #0]
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103b74:	041b      	lsls	r3, r3, #16
 8103b76:	4619      	mov	r1, r3
 8103b78:	4610      	mov	r0, r2
 8103b7a:	f005 f950 	bl	8108e1e <SDMMC_CmdSelDesel>
 8103b7e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d001      	beq.n	8103b8a <MMC_InitCard+0x13e>
  {
    return errorstate;
 8103b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103b88:	e059      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8103b8a:	f107 031c 	add.w	r3, r7, #28
 8103b8e:	4619      	mov	r1, r3
 8103b90:	6878      	ldr	r0, [r7, #4]
 8103b92:	f7ff fbef 	bl	8103374 <HAL_MMC_GetCardCSD>
 8103b96:	4603      	mov	r3, r0
 8103b98:	2b00      	cmp	r3, #0
 8103b9a:	d002      	beq.n	8103ba2 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103ba0:	e04d      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	681a      	ldr	r2, [r3, #0]
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103baa:	041b      	lsls	r3, r3, #16
 8103bac:	4619      	mov	r1, r3
 8103bae:	4610      	mov	r0, r2
 8103bb0:	f005 f9da 	bl	8108f68 <SDMMC_CmdSendStatus>
 8103bb4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d005      	beq.n	8103bc8 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bc2:	431a      	orrs	r2, r3
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	3378      	adds	r3, #120	@ 0x78
 8103bcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103bd0:	4619      	mov	r1, r3
 8103bd2:	6878      	ldr	r0, [r7, #4]
 8103bd4:	f7ff fd72 	bl	81036bc <HAL_MMC_GetCardExtCSD>
 8103bd8:	4603      	mov	r3, r0
 8103bda:	2b00      	cmp	r3, #0
 8103bdc:	d002      	beq.n	8103be4 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103be2:	e02c      	b.n	8103c3e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681a      	ldr	r2, [r3, #0]
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103bec:	041b      	lsls	r3, r3, #16
 8103bee:	4619      	mov	r1, r3
 8103bf0:	4610      	mov	r0, r2
 8103bf2:	f005 f9b9 	bl	8108f68 <SDMMC_CmdSendStatus>
 8103bf6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bfa:	2b00      	cmp	r3, #0
 8103bfc:	d005      	beq.n	8103c0a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c04:	431a      	orrs	r2, r3
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	f107 0408 	add.w	r4, r7, #8
 8103c10:	1d1d      	adds	r5, r3, #4
 8103c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103c16:	682b      	ldr	r3, [r5, #0]
 8103c18:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8103c1a:	2300      	movs	r3, #0
 8103c1c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681c      	ldr	r4, [r3, #0]
 8103c22:	466a      	mov	r2, sp
 8103c24:	f107 0314 	add.w	r3, r7, #20
 8103c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103c2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8103c30:	f107 0308 	add.w	r3, r7, #8
 8103c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103c36:	4620      	mov	r0, r4
 8103c38:	f005 f802 	bl	8108c40 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8103c3c:	2300      	movs	r3, #0
}
 8103c3e:	4618      	mov	r0, r3
 8103c40:	3750      	adds	r7, #80	@ 0x50
 8103c42:	46bd      	mov	sp, r7
 8103c44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103c48 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8103c48:	b580      	push	{r7, lr}
 8103c4a:	b086      	sub	sp, #24
 8103c4c:	af00      	add	r7, sp, #0
 8103c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103c50:	2300      	movs	r3, #0
 8103c52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8103c54:	2300      	movs	r3, #0
 8103c56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8103c58:	2300      	movs	r3, #0
 8103c5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	4618      	mov	r0, r3
 8103c62:	f005 f8ff 	bl	8108e64 <SDMMC_CmdGoIdleState>
 8103c66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d027      	beq.n	8103cbe <MMC_PowerON+0x76>
  {
    return errorstate;
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	e034      	b.n	8103cdc <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8103c72:	68bb      	ldr	r3, [r7, #8]
 8103c74:	1c5a      	adds	r2, r3, #1
 8103c76:	60ba      	str	r2, [r7, #8]
 8103c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103c7c:	4293      	cmp	r3, r2
 8103c7e:	d102      	bne.n	8103c86 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8103c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103c84:	e02a      	b.n	8103cdc <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4916      	ldr	r1, [pc, #88]	@ (8103ce4 <MMC_PowerON+0x9c>)
 8103c8c:	4618      	mov	r0, r3
 8103c8e:	f005 f98e 	bl	8108fae <SDMMC_CmdOpCondition>
 8103c92:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103c94:	68fb      	ldr	r3, [r7, #12]
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d002      	beq.n	8103ca0 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103c9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8103c9e:	e01d      	b.n	8103cdc <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	2100      	movs	r1, #0
 8103ca6:	4618      	mov	r0, r3
 8103ca8:	f005 f857 	bl	8108d5a <SDMMC_GetResponse>
 8103cac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8103cae:	697b      	ldr	r3, [r7, #20]
 8103cb0:	0fdb      	lsrs	r3, r3, #31
 8103cb2:	2b01      	cmp	r3, #1
 8103cb4:	d101      	bne.n	8103cba <MMC_PowerON+0x72>
 8103cb6:	2301      	movs	r3, #1
 8103cb8:	e000      	b.n	8103cbc <MMC_PowerON+0x74>
 8103cba:	2300      	movs	r3, #0
 8103cbc:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8103cbe:	693b      	ldr	r3, [r7, #16]
 8103cc0:	2b00      	cmp	r3, #0
 8103cc2:	d0d6      	beq.n	8103c72 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8103cc4:	697b      	ldr	r3, [r7, #20]
 8103cc6:	0e1b      	lsrs	r3, r3, #24
 8103cc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8103cca:	d103      	bne.n	8103cd4 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	2201      	movs	r2, #1
 8103cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103cd2:	e002      	b.n	8103cda <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	2200      	movs	r2, #0
 8103cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8103cda:	2300      	movs	r3, #0
}
 8103cdc:	4618      	mov	r0, r3
 8103cde:	3718      	adds	r7, #24
 8103ce0:	46bd      	mov	sp, r7
 8103ce2:	bd80      	pop	{r7, pc}
 8103ce4:	c0ff8000 	.word	0xc0ff8000

08103ce8 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8103ce8:	b580      	push	{r7, lr}
 8103cea:	b090      	sub	sp, #64	@ 0x40
 8103cec:	af00      	add	r7, sp, #0
 8103cee:	60f8      	str	r0, [r7, #12]
 8103cf0:	60b9      	str	r1, [r7, #8]
 8103cf2:	603b      	str	r3, [r7, #0]
 8103cf4:	4613      	mov	r3, r2
 8103cf6:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103cf8:	f7fd ffb6 	bl	8101c68 <HAL_GetTick>
 8103cfc:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8103cfe:	2300      	movs	r3, #0
 8103d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103d02:	68fb      	ldr	r3, [r7, #12]
 8103d04:	2200      	movs	r2, #0
 8103d06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103d08:	68fb      	ldr	r3, [r7, #12]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	2200      	movs	r2, #0
 8103d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8103d14:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8103d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103d1a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103d1c:	2390      	movs	r3, #144	@ 0x90
 8103d1e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103d20:	2302      	movs	r3, #2
 8103d22:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103d24:	2300      	movs	r3, #0
 8103d26:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103d28:	2301      	movs	r3, #1
 8103d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103d2c:	68fb      	ldr	r3, [r7, #12]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	f107 0214 	add.w	r2, r7, #20
 8103d34:	4611      	mov	r1, r2
 8103d36:	4618      	mov	r0, r3
 8103d38:	f005 f822 	bl	8108d80 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103d3c:	68fb      	ldr	r3, [r7, #12]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	2100      	movs	r1, #0
 8103d42:	4618      	mov	r0, r3
 8103d44:	f005 f976 	bl	8109034 <SDMMC_CmdSendEXTCSD>
 8103d48:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d04e      	beq.n	8103dee <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103d50:	68fb      	ldr	r3, [r7, #12]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	4a5c      	ldr	r2, [pc, #368]	@ (8103ec8 <MMC_ReadExtCSD+0x1e0>)
 8103d56:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103d58:	68fb      	ldr	r3, [r7, #12]
 8103d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103d5e:	431a      	orrs	r2, r3
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103d64:	68fb      	ldr	r3, [r7, #12]
 8103d66:	2201      	movs	r2, #1
 8103d68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103d6c:	2301      	movs	r3, #1
 8103d6e:	e0a6      	b.n	8103ebe <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103d7a:	2b00      	cmp	r3, #0
 8103d7c:	d01c      	beq.n	8103db8 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103d7e:	2300      	movs	r3, #0
 8103d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d82:	e013      	b.n	8103dac <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8103d84:	68fb      	ldr	r3, [r7, #12]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	4618      	mov	r0, r3
 8103d8a:	f004 ff83 	bl	8108c94 <SDMMC_ReadFIFO>
 8103d8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8103d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103d94:	4413      	add	r3, r2
 8103d96:	88fa      	ldrh	r2, [r7, #6]
 8103d98:	0892      	lsrs	r2, r2, #2
 8103d9a:	b292      	uxth	r2, r2
 8103d9c:	4293      	cmp	r3, r2
 8103d9e:	d102      	bne.n	8103da6 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8103da0:	68bb      	ldr	r3, [r7, #8]
 8103da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103da4:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103da8:	3301      	adds	r3, #1
 8103daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103dae:	2b07      	cmp	r3, #7
 8103db0:	d9e8      	bls.n	8103d84 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8103db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103db4:	3308      	adds	r3, #8
 8103db6:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8103db8:	f7fd ff56 	bl	8101c68 <HAL_GetTick>
 8103dbc:	4602      	mov	r2, r0
 8103dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103dc0:	1ad3      	subs	r3, r2, r3
 8103dc2:	683a      	ldr	r2, [r7, #0]
 8103dc4:	429a      	cmp	r2, r3
 8103dc6:	d902      	bls.n	8103dce <MMC_ReadExtCSD+0xe6>
 8103dc8:	683b      	ldr	r3, [r7, #0]
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d10f      	bne.n	8103dee <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103dce:	68fb      	ldr	r3, [r7, #12]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8103ec8 <MMC_ReadExtCSD+0x1e0>)
 8103dd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103dd6:	68fb      	ldr	r3, [r7, #12]
 8103dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103dda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103dde:	68fb      	ldr	r3, [r7, #12]
 8103de0:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103de2:	68fb      	ldr	r3, [r7, #12]
 8103de4:	2201      	movs	r2, #1
 8103de6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8103dea:	2303      	movs	r3, #3
 8103dec:	e067      	b.n	8103ebe <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103df4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8103df8:	2b00      	cmp	r3, #0
 8103dfa:	d0b9      	beq.n	8103d70 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103dfc:	68fb      	ldr	r3, [r7, #12]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e02:	f003 0308 	and.w	r3, r3, #8
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d00f      	beq.n	8103e2a <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103e0a:	68fb      	ldr	r3, [r7, #12]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8103ec8 <MMC_ReadExtCSD+0x1e0>)
 8103e10:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e16:	f043 0208 	orr.w	r2, r3, #8
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103e1e:	68fb      	ldr	r3, [r7, #12]
 8103e20:	2201      	movs	r2, #1
 8103e22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103e26:	2301      	movs	r3, #1
 8103e28:	e049      	b.n	8103ebe <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e30:	f003 0302 	and.w	r3, r3, #2
 8103e34:	2b00      	cmp	r3, #0
 8103e36:	d00f      	beq.n	8103e58 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a22      	ldr	r2, [pc, #136]	@ (8103ec8 <MMC_ReadExtCSD+0x1e0>)
 8103e3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e44:	f043 0202 	orr.w	r2, r3, #2
 8103e48:	68fb      	ldr	r3, [r7, #12]
 8103e4a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	2201      	movs	r2, #1
 8103e50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103e54:	2301      	movs	r3, #1
 8103e56:	e032      	b.n	8103ebe <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e5e:	f003 0320 	and.w	r3, r3, #32
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d00f      	beq.n	8103e86 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103e66:	68fb      	ldr	r3, [r7, #12]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	4a17      	ldr	r2, [pc, #92]	@ (8103ec8 <MMC_ReadExtCSD+0x1e0>)
 8103e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e72:	f043 0220 	orr.w	r2, r3, #32
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103e7a:	68fb      	ldr	r3, [r7, #12]
 8103e7c:	2201      	movs	r2, #1
 8103e7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103e82:	2301      	movs	r3, #1
 8103e84:	e01b      	b.n	8103ebe <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	681a      	ldr	r2, [r3, #0]
 8103e8a:	68fb      	ldr	r3, [r7, #12]
 8103e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103e8e:	041b      	lsls	r3, r3, #16
 8103e90:	4619      	mov	r1, r3
 8103e92:	4610      	mov	r0, r2
 8103e94:	f005 f868 	bl	8108f68 <SDMMC_CmdSendStatus>
 8103e98:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d005      	beq.n	8103eac <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103ea6:	431a      	orrs	r2, r3
 8103ea8:	68fb      	ldr	r3, [r7, #12]
 8103eaa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	4a06      	ldr	r2, [pc, #24]	@ (8103ecc <MMC_ReadExtCSD+0x1e4>)
 8103eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8103eb4:	68fb      	ldr	r3, [r7, #12]
 8103eb6:	2201      	movs	r2, #1
 8103eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8103ebc:	2300      	movs	r3, #0
}
 8103ebe:	4618      	mov	r0, r3
 8103ec0:	3740      	adds	r7, #64	@ 0x40
 8103ec2:	46bd      	mov	sp, r7
 8103ec4:	bd80      	pop	{r7, pc}
 8103ec6:	bf00      	nop
 8103ec8:	1fe00fff 	.word	0x1fe00fff
 8103ecc:	18000f3a 	.word	0x18000f3a

08103ed0 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8103ed0:	b580      	push	{r7, lr}
 8103ed2:	b08a      	sub	sp, #40	@ 0x28
 8103ed4:	af00      	add	r7, sp, #0
 8103ed6:	60f8      	str	r0, [r7, #12]
 8103ed8:	60b9      	str	r1, [r7, #8]
 8103eda:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8103edc:	2300      	movs	r3, #0
 8103ede:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8103ee0:	2300      	movs	r3, #0
 8103ee2:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8103ee4:	68bb      	ldr	r3, [r7, #8]
 8103ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103eea:	d004      	beq.n	8103ef6 <MMC_PwrClassUpdate+0x26>
 8103eec:	68bb      	ldr	r3, [r7, #8]
 8103eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103ef2:	f040 8088 	bne.w	8104006 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8103ef6:	2300      	movs	r3, #0
 8103ef8:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8103efa:	f107 0114 	add.w	r1, r7, #20
 8103efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8103f02:	22bb      	movs	r2, #187	@ 0xbb
 8103f04:	68f8      	ldr	r0, [r7, #12]
 8103f06:	f7ff feef 	bl	8103ce8 <MMC_ReadExtCSD>
 8103f0a:	4603      	mov	r3, r0
 8103f0c:	2b00      	cmp	r3, #0
 8103f0e:	d003      	beq.n	8103f18 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8103f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8103f14:	61fb      	str	r3, [r7, #28]
 8103f16:	e002      	b.n	8103f1e <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8103f18:	697b      	ldr	r3, [r7, #20]
 8103f1a:	0e1b      	lsrs	r3, r3, #24
 8103f1c:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	2b04      	cmp	r3, #4
 8103f22:	d105      	bne.n	8103f30 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8103f2a:	0e1b      	lsrs	r3, r3, #24
 8103f2c:	61bb      	str	r3, [r7, #24]
 8103f2e:	e00e      	b.n	8103f4e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	2b02      	cmp	r3, #2
 8103f34:	d106      	bne.n	8103f44 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8103f36:	68fb      	ldr	r3, [r7, #12]
 8103f38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8103f3c:	0c1b      	lsrs	r3, r3, #16
 8103f3e:	b2db      	uxtb	r3, r3
 8103f40:	61bb      	str	r3, [r7, #24]
 8103f42:	e004      	b.n	8103f4e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8103f44:	68fb      	ldr	r3, [r7, #12]
 8103f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8103f4a:	0e1b      	lsrs	r3, r3, #24
 8103f4c:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8103f4e:	69fb      	ldr	r3, [r7, #28]
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	d158      	bne.n	8104006 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8103f54:	68bb      	ldr	r3, [r7, #8]
 8103f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103f5a:	d102      	bne.n	8103f62 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8103f5c:	69bb      	ldr	r3, [r7, #24]
 8103f5e:	091b      	lsrs	r3, r3, #4
 8103f60:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8103f62:	697a      	ldr	r2, [r7, #20]
 8103f64:	69bb      	ldr	r3, [r7, #24]
 8103f66:	4053      	eors	r3, r2
 8103f68:	f003 030f 	and.w	r3, r3, #15
 8103f6c:	2b00      	cmp	r3, #0
 8103f6e:	d04a      	beq.n	8104006 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	681a      	ldr	r2, [r3, #0]
 8103f74:	69bb      	ldr	r3, [r7, #24]
 8103f76:	021b      	lsls	r3, r3, #8
 8103f78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8103f7c:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8103f80:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8103f84:	4619      	mov	r1, r3
 8103f86:	4610      	mov	r0, r2
 8103f88:	f005 f831 	bl	8108fee <SDMMC_CmdSwitch>
 8103f8c:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8103f8e:	69fb      	ldr	r3, [r7, #28]
 8103f90:	2b00      	cmp	r3, #0
 8103f92:	d138      	bne.n	8104006 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8103f94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f98:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103f9a:	68fb      	ldr	r3, [r7, #12]
 8103f9c:	681a      	ldr	r2, [r3, #0]
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103fa2:	041b      	lsls	r3, r3, #16
 8103fa4:	4619      	mov	r1, r3
 8103fa6:	4610      	mov	r0, r2
 8103fa8:	f004 ffde 	bl	8108f68 <SDMMC_CmdSendStatus>
 8103fac:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8103fae:	69fb      	ldr	r3, [r7, #28]
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d112      	bne.n	8103fda <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	2100      	movs	r1, #0
 8103fba:	4618      	mov	r0, r3
 8103fbc:	f004 fecd 	bl	8108d5a <SDMMC_GetResponse>
 8103fc0:	6238      	str	r0, [r7, #32]
            count--;
 8103fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103fc4:	3b01      	subs	r3, #1
 8103fc6:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8103fc8:	6a3b      	ldr	r3, [r7, #32]
 8103fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103fce:	2b00      	cmp	r3, #0
 8103fd0:	d104      	bne.n	8103fdc <MMC_PwrClassUpdate+0x10c>
 8103fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d1e0      	bne.n	8103f9a <MMC_PwrClassUpdate+0xca>
 8103fd8:	e000      	b.n	8103fdc <MMC_PwrClassUpdate+0x10c>
              break;
 8103fda:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8103fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d00b      	beq.n	8103ffa <MMC_PwrClassUpdate+0x12a>
 8103fe2:	69fb      	ldr	r3, [r7, #28]
 8103fe4:	2b00      	cmp	r3, #0
 8103fe6:	d108      	bne.n	8103ffa <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8103fe8:	6a3b      	ldr	r3, [r7, #32]
 8103fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103fee:	2b00      	cmp	r3, #0
 8103ff0:	d009      	beq.n	8104006 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8103ff2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8103ff6:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8103ff8:	e005      	b.n	8104006 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8103ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103ffc:	2b00      	cmp	r3, #0
 8103ffe:	d102      	bne.n	8104006 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8104000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8104004:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8104006:	69fb      	ldr	r3, [r7, #28]
}
 8104008:	4618      	mov	r0, r3
 810400a:	3728      	adds	r7, #40	@ 0x28
 810400c:	46bd      	mov	sp, r7
 810400e:	bd80      	pop	{r7, pc}

08104010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8104010:	b580      	push	{r7, lr}
 8104012:	b086      	sub	sp, #24
 8104014:	af02      	add	r7, sp, #8
 8104016:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	2b00      	cmp	r3, #0
 810401c:	d101      	bne.n	8104022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810401e:	2301      	movs	r3, #1
 8104020:	e0fe      	b.n	8104220 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8104028:	b2db      	uxtb	r3, r3
 810402a:	2b00      	cmp	r3, #0
 810402c:	d106      	bne.n	810403c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	2200      	movs	r2, #0
 8104032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8104036:	6878      	ldr	r0, [r7, #4]
 8104038:	f7fd fb2c 	bl	8101694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	2203      	movs	r2, #3
 8104040:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	4618      	mov	r0, r3
 810404a:	f005 fa32 	bl	81094b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	6818      	ldr	r0, [r3, #0]
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	7c1a      	ldrb	r2, [r3, #16]
 8104056:	f88d 2000 	strb.w	r2, [sp]
 810405a:	3304      	adds	r3, #4
 810405c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810405e:	f005 f9b7 	bl	81093d0 <USB_CoreInit>
 8104062:	4603      	mov	r3, r0
 8104064:	2b00      	cmp	r3, #0
 8104066:	d005      	beq.n	8104074 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	2202      	movs	r2, #2
 810406c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104070:	2301      	movs	r3, #1
 8104072:	e0d5      	b.n	8104220 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	2100      	movs	r1, #0
 810407a:	4618      	mov	r0, r3
 810407c:	f005 fa2a 	bl	81094d4 <USB_SetCurrentMode>
 8104080:	4603      	mov	r3, r0
 8104082:	2b00      	cmp	r3, #0
 8104084:	d005      	beq.n	8104092 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	2202      	movs	r2, #2
 810408a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810408e:	2301      	movs	r3, #1
 8104090:	e0c6      	b.n	8104220 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104092:	2300      	movs	r3, #0
 8104094:	73fb      	strb	r3, [r7, #15]
 8104096:	e04a      	b.n	810412e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104098:	7bfa      	ldrb	r2, [r7, #15]
 810409a:	6879      	ldr	r1, [r7, #4]
 810409c:	4613      	mov	r3, r2
 810409e:	00db      	lsls	r3, r3, #3
 81040a0:	4413      	add	r3, r2
 81040a2:	009b      	lsls	r3, r3, #2
 81040a4:	440b      	add	r3, r1
 81040a6:	3315      	adds	r3, #21
 81040a8:	2201      	movs	r2, #1
 81040aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81040ac:	7bfa      	ldrb	r2, [r7, #15]
 81040ae:	6879      	ldr	r1, [r7, #4]
 81040b0:	4613      	mov	r3, r2
 81040b2:	00db      	lsls	r3, r3, #3
 81040b4:	4413      	add	r3, r2
 81040b6:	009b      	lsls	r3, r3, #2
 81040b8:	440b      	add	r3, r1
 81040ba:	3314      	adds	r3, #20
 81040bc:	7bfa      	ldrb	r2, [r7, #15]
 81040be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81040c0:	7bfa      	ldrb	r2, [r7, #15]
 81040c2:	7bfb      	ldrb	r3, [r7, #15]
 81040c4:	b298      	uxth	r0, r3
 81040c6:	6879      	ldr	r1, [r7, #4]
 81040c8:	4613      	mov	r3, r2
 81040ca:	00db      	lsls	r3, r3, #3
 81040cc:	4413      	add	r3, r2
 81040ce:	009b      	lsls	r3, r3, #2
 81040d0:	440b      	add	r3, r1
 81040d2:	332e      	adds	r3, #46	@ 0x2e
 81040d4:	4602      	mov	r2, r0
 81040d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81040d8:	7bfa      	ldrb	r2, [r7, #15]
 81040da:	6879      	ldr	r1, [r7, #4]
 81040dc:	4613      	mov	r3, r2
 81040de:	00db      	lsls	r3, r3, #3
 81040e0:	4413      	add	r3, r2
 81040e2:	009b      	lsls	r3, r3, #2
 81040e4:	440b      	add	r3, r1
 81040e6:	3318      	adds	r3, #24
 81040e8:	2200      	movs	r2, #0
 81040ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81040ec:	7bfa      	ldrb	r2, [r7, #15]
 81040ee:	6879      	ldr	r1, [r7, #4]
 81040f0:	4613      	mov	r3, r2
 81040f2:	00db      	lsls	r3, r3, #3
 81040f4:	4413      	add	r3, r2
 81040f6:	009b      	lsls	r3, r3, #2
 81040f8:	440b      	add	r3, r1
 81040fa:	331c      	adds	r3, #28
 81040fc:	2200      	movs	r2, #0
 81040fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8104100:	7bfa      	ldrb	r2, [r7, #15]
 8104102:	6879      	ldr	r1, [r7, #4]
 8104104:	4613      	mov	r3, r2
 8104106:	00db      	lsls	r3, r3, #3
 8104108:	4413      	add	r3, r2
 810410a:	009b      	lsls	r3, r3, #2
 810410c:	440b      	add	r3, r1
 810410e:	3320      	adds	r3, #32
 8104110:	2200      	movs	r2, #0
 8104112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8104114:	7bfa      	ldrb	r2, [r7, #15]
 8104116:	6879      	ldr	r1, [r7, #4]
 8104118:	4613      	mov	r3, r2
 810411a:	00db      	lsls	r3, r3, #3
 810411c:	4413      	add	r3, r2
 810411e:	009b      	lsls	r3, r3, #2
 8104120:	440b      	add	r3, r1
 8104122:	3324      	adds	r3, #36	@ 0x24
 8104124:	2200      	movs	r2, #0
 8104126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104128:	7bfb      	ldrb	r3, [r7, #15]
 810412a:	3301      	adds	r3, #1
 810412c:	73fb      	strb	r3, [r7, #15]
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	791b      	ldrb	r3, [r3, #4]
 8104132:	7bfa      	ldrb	r2, [r7, #15]
 8104134:	429a      	cmp	r2, r3
 8104136:	d3af      	bcc.n	8104098 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104138:	2300      	movs	r3, #0
 810413a:	73fb      	strb	r3, [r7, #15]
 810413c:	e044      	b.n	81041c8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810413e:	7bfa      	ldrb	r2, [r7, #15]
 8104140:	6879      	ldr	r1, [r7, #4]
 8104142:	4613      	mov	r3, r2
 8104144:	00db      	lsls	r3, r3, #3
 8104146:	4413      	add	r3, r2
 8104148:	009b      	lsls	r3, r3, #2
 810414a:	440b      	add	r3, r1
 810414c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8104150:	2200      	movs	r2, #0
 8104152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104154:	7bfa      	ldrb	r2, [r7, #15]
 8104156:	6879      	ldr	r1, [r7, #4]
 8104158:	4613      	mov	r3, r2
 810415a:	00db      	lsls	r3, r3, #3
 810415c:	4413      	add	r3, r2
 810415e:	009b      	lsls	r3, r3, #2
 8104160:	440b      	add	r3, r1
 8104162:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8104166:	7bfa      	ldrb	r2, [r7, #15]
 8104168:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 810416a:	7bfa      	ldrb	r2, [r7, #15]
 810416c:	6879      	ldr	r1, [r7, #4]
 810416e:	4613      	mov	r3, r2
 8104170:	00db      	lsls	r3, r3, #3
 8104172:	4413      	add	r3, r2
 8104174:	009b      	lsls	r3, r3, #2
 8104176:	440b      	add	r3, r1
 8104178:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 810417c:	2200      	movs	r2, #0
 810417e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8104180:	7bfa      	ldrb	r2, [r7, #15]
 8104182:	6879      	ldr	r1, [r7, #4]
 8104184:	4613      	mov	r3, r2
 8104186:	00db      	lsls	r3, r3, #3
 8104188:	4413      	add	r3, r2
 810418a:	009b      	lsls	r3, r3, #2
 810418c:	440b      	add	r3, r1
 810418e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8104192:	2200      	movs	r2, #0
 8104194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104196:	7bfa      	ldrb	r2, [r7, #15]
 8104198:	6879      	ldr	r1, [r7, #4]
 810419a:	4613      	mov	r3, r2
 810419c:	00db      	lsls	r3, r3, #3
 810419e:	4413      	add	r3, r2
 81041a0:	009b      	lsls	r3, r3, #2
 81041a2:	440b      	add	r3, r1
 81041a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81041a8:	2200      	movs	r2, #0
 81041aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81041ac:	7bfa      	ldrb	r2, [r7, #15]
 81041ae:	6879      	ldr	r1, [r7, #4]
 81041b0:	4613      	mov	r3, r2
 81041b2:	00db      	lsls	r3, r3, #3
 81041b4:	4413      	add	r3, r2
 81041b6:	009b      	lsls	r3, r3, #2
 81041b8:	440b      	add	r3, r1
 81041ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 81041be:	2200      	movs	r2, #0
 81041c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81041c2:	7bfb      	ldrb	r3, [r7, #15]
 81041c4:	3301      	adds	r3, #1
 81041c6:	73fb      	strb	r3, [r7, #15]
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	791b      	ldrb	r3, [r3, #4]
 81041cc:	7bfa      	ldrb	r2, [r7, #15]
 81041ce:	429a      	cmp	r2, r3
 81041d0:	d3b5      	bcc.n	810413e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	6818      	ldr	r0, [r3, #0]
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	7c1a      	ldrb	r2, [r3, #16]
 81041da:	f88d 2000 	strb.w	r2, [sp]
 81041de:	3304      	adds	r3, #4
 81041e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81041e2:	f005 f9c3 	bl	810956c <USB_DevInit>
 81041e6:	4603      	mov	r3, r0
 81041e8:	2b00      	cmp	r3, #0
 81041ea:	d005      	beq.n	81041f8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	2202      	movs	r2, #2
 81041f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81041f4:	2301      	movs	r3, #1
 81041f6:	e013      	b.n	8104220 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	2200      	movs	r2, #0
 81041fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	2201      	movs	r2, #1
 8104202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	7b1b      	ldrb	r3, [r3, #12]
 810420a:	2b01      	cmp	r3, #1
 810420c:	d102      	bne.n	8104214 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810420e:	6878      	ldr	r0, [r7, #4]
 8104210:	f000 f80a 	bl	8104228 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8104214:	687b      	ldr	r3, [r7, #4]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	4618      	mov	r0, r3
 810421a:	f005 fb7e 	bl	810991a <USB_DevDisconnect>

  return HAL_OK;
 810421e:	2300      	movs	r3, #0
}
 8104220:	4618      	mov	r0, r3
 8104222:	3710      	adds	r7, #16
 8104224:	46bd      	mov	sp, r7
 8104226:	bd80      	pop	{r7, pc}

08104228 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8104228:	b480      	push	{r7}
 810422a:	b085      	sub	sp, #20
 810422c:	af00      	add	r7, sp, #0
 810422e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	2201      	movs	r2, #1
 810423a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	2200      	movs	r2, #0
 8104242:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	699b      	ldr	r3, [r3, #24]
 810424a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810425a:	f043 0303 	orr.w	r3, r3, #3
 810425e:	68fa      	ldr	r2, [r7, #12]
 8104260:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8104262:	2300      	movs	r3, #0
}
 8104264:	4618      	mov	r0, r3
 8104266:	3714      	adds	r7, #20
 8104268:	46bd      	mov	sp, r7
 810426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810426e:	4770      	bx	lr

08104270 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104270:	b580      	push	{r7, lr}
 8104272:	b084      	sub	sp, #16
 8104274:	af00      	add	r7, sp, #0
 8104276:	60f8      	str	r0, [r7, #12]
 8104278:	460b      	mov	r3, r1
 810427a:	607a      	str	r2, [r7, #4]
 810427c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810427e:	4b37      	ldr	r3, [pc, #220]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	f023 0201 	bic.w	r2, r3, #1
 8104286:	4935      	ldr	r1, [pc, #212]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	4313      	orrs	r3, r2
 810428c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	2b00      	cmp	r3, #0
 8104292:	d123      	bne.n	81042dc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104294:	f7fd fe1c 	bl	8101ed0 <HAL_GetCurrentCPUID>
 8104298:	4603      	mov	r3, r0
 810429a:	2b03      	cmp	r3, #3
 810429c:	d158      	bne.n	8104350 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810429e:	4b2f      	ldr	r3, [pc, #188]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 81042a0:	691b      	ldr	r3, [r3, #16]
 81042a2:	4a2e      	ldr	r2, [pc, #184]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 81042a4:	f023 0301 	bic.w	r3, r3, #1
 81042a8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81042aa:	4b2d      	ldr	r3, [pc, #180]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042ac:	691b      	ldr	r3, [r3, #16]
 81042ae:	4a2c      	ldr	r2, [pc, #176]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042b0:	f043 0304 	orr.w	r3, r3, #4
 81042b4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81042b6:	f3bf 8f4f 	dsb	sy
}
 81042ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81042bc:	f3bf 8f6f 	isb	sy
}
 81042c0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81042c2:	7afb      	ldrb	r3, [r7, #11]
 81042c4:	2b01      	cmp	r3, #1
 81042c6:	d101      	bne.n	81042cc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81042c8:	bf30      	wfi
 81042ca:	e000      	b.n	81042ce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81042cc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81042ce:	4b24      	ldr	r3, [pc, #144]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042d0:	691b      	ldr	r3, [r3, #16]
 81042d2:	4a23      	ldr	r2, [pc, #140]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042d4:	f023 0304 	bic.w	r3, r3, #4
 81042d8:	6113      	str	r3, [r2, #16]
 81042da:	e03c      	b.n	8104356 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	2b01      	cmp	r3, #1
 81042e0:	d123      	bne.n	810432a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81042e2:	f7fd fdf5 	bl	8101ed0 <HAL_GetCurrentCPUID>
 81042e6:	4603      	mov	r3, r0
 81042e8:	2b01      	cmp	r3, #1
 81042ea:	d133      	bne.n	8104354 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81042ec:	4b1b      	ldr	r3, [pc, #108]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 81042ee:	695b      	ldr	r3, [r3, #20]
 81042f0:	4a1a      	ldr	r2, [pc, #104]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 81042f2:	f023 0302 	bic.w	r3, r3, #2
 81042f6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81042f8:	4b19      	ldr	r3, [pc, #100]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042fa:	691b      	ldr	r3, [r3, #16]
 81042fc:	4a18      	ldr	r2, [pc, #96]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81042fe:	f043 0304 	orr.w	r3, r3, #4
 8104302:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104304:	f3bf 8f4f 	dsb	sy
}
 8104308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810430a:	f3bf 8f6f 	isb	sy
}
 810430e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104310:	7afb      	ldrb	r3, [r7, #11]
 8104312:	2b01      	cmp	r3, #1
 8104314:	d101      	bne.n	810431a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104316:	bf30      	wfi
 8104318:	e000      	b.n	810431c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810431a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810431c:	4b10      	ldr	r3, [pc, #64]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810431e:	691b      	ldr	r3, [r3, #16]
 8104320:	4a0f      	ldr	r2, [pc, #60]	@ (8104360 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104322:	f023 0304 	bic.w	r3, r3, #4
 8104326:	6113      	str	r3, [r2, #16]
 8104328:	e015      	b.n	8104356 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810432a:	f7fd fdd1 	bl	8101ed0 <HAL_GetCurrentCPUID>
 810432e:	4603      	mov	r3, r0
 8104330:	2b03      	cmp	r3, #3
 8104332:	d106      	bne.n	8104342 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104334:	4b09      	ldr	r3, [pc, #36]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104336:	691b      	ldr	r3, [r3, #16]
 8104338:	4a08      	ldr	r2, [pc, #32]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 810433a:	f023 0304 	bic.w	r3, r3, #4
 810433e:	6113      	str	r3, [r2, #16]
 8104340:	e009      	b.n	8104356 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104342:	4b06      	ldr	r3, [pc, #24]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104344:	695b      	ldr	r3, [r3, #20]
 8104346:	4a05      	ldr	r2, [pc, #20]	@ (810435c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104348:	f023 0304 	bic.w	r3, r3, #4
 810434c:	6153      	str	r3, [r2, #20]
 810434e:	e002      	b.n	8104356 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104350:	bf00      	nop
 8104352:	e000      	b.n	8104356 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104354:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104356:	3710      	adds	r7, #16
 8104358:	46bd      	mov	sp, r7
 810435a:	bd80      	pop	{r7, pc}
 810435c:	58024800 	.word	0x58024800
 8104360:	e000ed00 	.word	0xe000ed00

08104364 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104364:	b580      	push	{r7, lr}
 8104366:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104368:	f7fd fdb2 	bl	8101ed0 <HAL_GetCurrentCPUID>
 810436c:	4603      	mov	r3, r0
 810436e:	2b03      	cmp	r3, #3
 8104370:	d101      	bne.n	8104376 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104372:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104374:	e001      	b.n	810437a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104376:	bf40      	sev
    __WFE ();
 8104378:	bf20      	wfe
}
 810437a:	bf00      	nop
 810437c:	bd80      	pop	{r7, pc}
	...

08104380 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8104380:	b480      	push	{r7}
 8104382:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8104384:	4b05      	ldr	r3, [pc, #20]	@ (810439c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104386:	68db      	ldr	r3, [r3, #12]
 8104388:	4a04      	ldr	r2, [pc, #16]	@ (810439c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810438a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810438e:	60d3      	str	r3, [r2, #12]
}
 8104390:	bf00      	nop
 8104392:	46bd      	mov	sp, r7
 8104394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104398:	4770      	bx	lr
 810439a:	bf00      	nop
 810439c:	58024800 	.word	0x58024800

081043a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 81043a0:	b580      	push	{r7, lr}
 81043a2:	b086      	sub	sp, #24
 81043a4:	af02      	add	r7, sp, #8
 81043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 81043a8:	f7fd fc5e 	bl	8101c68 <HAL_GetTick>
 81043ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	2b00      	cmp	r3, #0
 81043b2:	d101      	bne.n	81043b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 81043b4:	2301      	movs	r3, #1
 81043b6:	e061      	b.n	810447c <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81043be:	b2db      	uxtb	r3, r3
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d107      	bne.n	81043d4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 81043c4:	6878      	ldr	r0, [r7, #4]
 81043c6:	f7fc ff79 	bl	81012bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 81043ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 81043ce:	6878      	ldr	r0, [r7, #4]
 81043d0:	f000 f85a 	bl	8104488 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	689b      	ldr	r3, [r3, #8]
 81043e2:	3b01      	subs	r3, #1
 81043e4:	021a      	lsls	r2, r3, #8
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	430a      	orrs	r2, r1
 81043ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81043f2:	9300      	str	r3, [sp, #0]
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	2200      	movs	r2, #0
 81043f8:	2120      	movs	r1, #32
 81043fa:	6878      	ldr	r0, [r7, #4]
 81043fc:	f000 f852 	bl	81044a4 <QSPI_WaitFlagStateUntilTimeout>
 8104400:	4603      	mov	r3, r0
 8104402:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8104404:	7afb      	ldrb	r3, [r7, #11]
 8104406:	2b00      	cmp	r3, #0
 8104408:	d137      	bne.n	810447a <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8104414:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8104418:	687a      	ldr	r2, [r7, #4]
 810441a:	6852      	ldr	r2, [r2, #4]
 810441c:	0611      	lsls	r1, r2, #24
 810441e:	687a      	ldr	r2, [r7, #4]
 8104420:	68d2      	ldr	r2, [r2, #12]
 8104422:	4311      	orrs	r1, r2
 8104424:	687a      	ldr	r2, [r7, #4]
 8104426:	69d2      	ldr	r2, [r2, #28]
 8104428:	4311      	orrs	r1, r2
 810442a:	687a      	ldr	r2, [r7, #4]
 810442c:	6a12      	ldr	r2, [r2, #32]
 810442e:	4311      	orrs	r1, r2
 8104430:	687a      	ldr	r2, [r7, #4]
 8104432:	6812      	ldr	r2, [r2, #0]
 8104434:	430b      	orrs	r3, r1
 8104436:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	685a      	ldr	r2, [r3, #4]
 810443e:	4b11      	ldr	r3, [pc, #68]	@ (8104484 <HAL_QSPI_Init+0xe4>)
 8104440:	4013      	ands	r3, r2
 8104442:	687a      	ldr	r2, [r7, #4]
 8104444:	6912      	ldr	r2, [r2, #16]
 8104446:	0411      	lsls	r1, r2, #16
 8104448:	687a      	ldr	r2, [r7, #4]
 810444a:	6952      	ldr	r2, [r2, #20]
 810444c:	4311      	orrs	r1, r2
 810444e:	687a      	ldr	r2, [r7, #4]
 8104450:	6992      	ldr	r2, [r2, #24]
 8104452:	4311      	orrs	r1, r2
 8104454:	687a      	ldr	r2, [r7, #4]
 8104456:	6812      	ldr	r2, [r2, #0]
 8104458:	430b      	orrs	r3, r1
 810445a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	681a      	ldr	r2, [r3, #0]
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	f042 0201 	orr.w	r2, r2, #1
 810446a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	2200      	movs	r2, #0
 8104470:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	2201      	movs	r2, #1
 8104476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 810447a:	7afb      	ldrb	r3, [r7, #11]
}
 810447c:	4618      	mov	r0, r3
 810447e:	3710      	adds	r7, #16
 8104480:	46bd      	mov	sp, r7
 8104482:	bd80      	pop	{r7, pc}
 8104484:	ffe0f8fe 	.word	0xffe0f8fe

08104488 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8104488:	b480      	push	{r7}
 810448a:	b083      	sub	sp, #12
 810448c:	af00      	add	r7, sp, #0
 810448e:	6078      	str	r0, [r7, #4]
 8104490:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	683a      	ldr	r2, [r7, #0]
 8104496:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8104498:	bf00      	nop
 810449a:	370c      	adds	r7, #12
 810449c:	46bd      	mov	sp, r7
 810449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044a2:	4770      	bx	lr

081044a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 81044a4:	b580      	push	{r7, lr}
 81044a6:	b084      	sub	sp, #16
 81044a8:	af00      	add	r7, sp, #0
 81044aa:	60f8      	str	r0, [r7, #12]
 81044ac:	60b9      	str	r1, [r7, #8]
 81044ae:	603b      	str	r3, [r7, #0]
 81044b0:	4613      	mov	r3, r2
 81044b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81044b4:	e01a      	b.n	81044ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81044b6:	69bb      	ldr	r3, [r7, #24]
 81044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81044bc:	d016      	beq.n	81044ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81044be:	f7fd fbd3 	bl	8101c68 <HAL_GetTick>
 81044c2:	4602      	mov	r2, r0
 81044c4:	683b      	ldr	r3, [r7, #0]
 81044c6:	1ad3      	subs	r3, r2, r3
 81044c8:	69ba      	ldr	r2, [r7, #24]
 81044ca:	429a      	cmp	r2, r3
 81044cc:	d302      	bcc.n	81044d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 81044ce:	69bb      	ldr	r3, [r7, #24]
 81044d0:	2b00      	cmp	r3, #0
 81044d2:	d10b      	bne.n	81044ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	2204      	movs	r2, #4
 81044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81044e0:	f043 0201 	orr.w	r2, r3, #1
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 81044e8:	2301      	movs	r3, #1
 81044ea:	e00e      	b.n	810450a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	689a      	ldr	r2, [r3, #8]
 81044f2:	68bb      	ldr	r3, [r7, #8]
 81044f4:	4013      	ands	r3, r2
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	bf14      	ite	ne
 81044fa:	2301      	movne	r3, #1
 81044fc:	2300      	moveq	r3, #0
 81044fe:	b2db      	uxtb	r3, r3
 8104500:	461a      	mov	r2, r3
 8104502:	79fb      	ldrb	r3, [r7, #7]
 8104504:	429a      	cmp	r2, r3
 8104506:	d1d6      	bne.n	81044b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104508:	2300      	movs	r3, #0
}
 810450a:	4618      	mov	r0, r3
 810450c:	3710      	adds	r7, #16
 810450e:	46bd      	mov	sp, r7
 8104510:	bd80      	pop	{r7, pc}
	...

08104514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104514:	b480      	push	{r7}
 8104516:	b089      	sub	sp, #36	@ 0x24
 8104518:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810451a:	4bb3      	ldr	r3, [pc, #716]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810451c:	691b      	ldr	r3, [r3, #16]
 810451e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104522:	2b18      	cmp	r3, #24
 8104524:	f200 8155 	bhi.w	81047d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8104528:	a201      	add	r2, pc, #4	@ (adr r2, 8104530 <HAL_RCC_GetSysClockFreq+0x1c>)
 810452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810452e:	bf00      	nop
 8104530:	08104595 	.word	0x08104595
 8104534:	081047d3 	.word	0x081047d3
 8104538:	081047d3 	.word	0x081047d3
 810453c:	081047d3 	.word	0x081047d3
 8104540:	081047d3 	.word	0x081047d3
 8104544:	081047d3 	.word	0x081047d3
 8104548:	081047d3 	.word	0x081047d3
 810454c:	081047d3 	.word	0x081047d3
 8104550:	081045bb 	.word	0x081045bb
 8104554:	081047d3 	.word	0x081047d3
 8104558:	081047d3 	.word	0x081047d3
 810455c:	081047d3 	.word	0x081047d3
 8104560:	081047d3 	.word	0x081047d3
 8104564:	081047d3 	.word	0x081047d3
 8104568:	081047d3 	.word	0x081047d3
 810456c:	081047d3 	.word	0x081047d3
 8104570:	081045c1 	.word	0x081045c1
 8104574:	081047d3 	.word	0x081047d3
 8104578:	081047d3 	.word	0x081047d3
 810457c:	081047d3 	.word	0x081047d3
 8104580:	081047d3 	.word	0x081047d3
 8104584:	081047d3 	.word	0x081047d3
 8104588:	081047d3 	.word	0x081047d3
 810458c:	081047d3 	.word	0x081047d3
 8104590:	081045c7 	.word	0x081045c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104594:	4b94      	ldr	r3, [pc, #592]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	f003 0320 	and.w	r3, r3, #32
 810459c:	2b00      	cmp	r3, #0
 810459e:	d009      	beq.n	81045b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045a0:	4b91      	ldr	r3, [pc, #580]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	08db      	lsrs	r3, r3, #3
 81045a6:	f003 0303 	and.w	r3, r3, #3
 81045aa:	4a90      	ldr	r2, [pc, #576]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045ac:	fa22 f303 	lsr.w	r3, r2, r3
 81045b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81045b2:	e111      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81045b4:	4b8d      	ldr	r3, [pc, #564]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045b6:	61bb      	str	r3, [r7, #24]
      break;
 81045b8:	e10e      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81045ba:	4b8d      	ldr	r3, [pc, #564]	@ (81047f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81045bc:	61bb      	str	r3, [r7, #24]
      break;
 81045be:	e10b      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81045c0:	4b8c      	ldr	r3, [pc, #560]	@ (81047f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81045c2:	61bb      	str	r3, [r7, #24]
      break;
 81045c4:	e108      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81045c6:	4b88      	ldr	r3, [pc, #544]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045ca:	f003 0303 	and.w	r3, r3, #3
 81045ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81045d0:	4b85      	ldr	r3, [pc, #532]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045d4:	091b      	lsrs	r3, r3, #4
 81045d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81045da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81045dc:	4b82      	ldr	r3, [pc, #520]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045e0:	f003 0301 	and.w	r3, r3, #1
 81045e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81045e6:	4b80      	ldr	r3, [pc, #512]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045ea:	08db      	lsrs	r3, r3, #3
 81045ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81045f0:	68fa      	ldr	r2, [r7, #12]
 81045f2:	fb02 f303 	mul.w	r3, r2, r3
 81045f6:	ee07 3a90 	vmov	s15, r3
 81045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104602:	693b      	ldr	r3, [r7, #16]
 8104604:	2b00      	cmp	r3, #0
 8104606:	f000 80e1 	beq.w	81047cc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 810460a:	697b      	ldr	r3, [r7, #20]
 810460c:	2b02      	cmp	r3, #2
 810460e:	f000 8083 	beq.w	8104718 <HAL_RCC_GetSysClockFreq+0x204>
 8104612:	697b      	ldr	r3, [r7, #20]
 8104614:	2b02      	cmp	r3, #2
 8104616:	f200 80a1 	bhi.w	810475c <HAL_RCC_GetSysClockFreq+0x248>
 810461a:	697b      	ldr	r3, [r7, #20]
 810461c:	2b00      	cmp	r3, #0
 810461e:	d003      	beq.n	8104628 <HAL_RCC_GetSysClockFreq+0x114>
 8104620:	697b      	ldr	r3, [r7, #20]
 8104622:	2b01      	cmp	r3, #1
 8104624:	d056      	beq.n	81046d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104626:	e099      	b.n	810475c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104628:	4b6f      	ldr	r3, [pc, #444]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810462a:	681b      	ldr	r3, [r3, #0]
 810462c:	f003 0320 	and.w	r3, r3, #32
 8104630:	2b00      	cmp	r3, #0
 8104632:	d02d      	beq.n	8104690 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104634:	4b6c      	ldr	r3, [pc, #432]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104636:	681b      	ldr	r3, [r3, #0]
 8104638:	08db      	lsrs	r3, r3, #3
 810463a:	f003 0303 	and.w	r3, r3, #3
 810463e:	4a6b      	ldr	r2, [pc, #428]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104640:	fa22 f303 	lsr.w	r3, r2, r3
 8104644:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	ee07 3a90 	vmov	s15, r3
 810464c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104650:	693b      	ldr	r3, [r7, #16]
 8104652:	ee07 3a90 	vmov	s15, r3
 8104656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810465e:	4b62      	ldr	r3, [pc, #392]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104666:	ee07 3a90 	vmov	s15, r3
 810466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104672:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104686:	ee67 7a27 	vmul.f32	s15, s14, s15
 810468a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810468e:	e087      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104690:	693b      	ldr	r3, [r7, #16]
 8104692:	ee07 3a90 	vmov	s15, r3
 8104696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810469a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81047fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046a2:	4b51      	ldr	r3, [pc, #324]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046aa:	ee07 3a90 	vmov	s15, r3
 81046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81046b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81046d2:	e065      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81046d4:	693b      	ldr	r3, [r7, #16]
 81046d6:	ee07 3a90 	vmov	s15, r3
 81046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104800 <HAL_RCC_GetSysClockFreq+0x2ec>
 81046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046e6:	4b40      	ldr	r3, [pc, #256]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046ee:	ee07 3a90 	vmov	s15, r3
 81046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81046fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104716:	e043      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104718:	693b      	ldr	r3, [r7, #16]
 810471a:	ee07 3a90 	vmov	s15, r3
 810471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104722:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8104804 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810472a:	4b2f      	ldr	r3, [pc, #188]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104732:	ee07 3a90 	vmov	s15, r3
 8104736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810473a:	ed97 6a02 	vldr	s12, [r7, #8]
 810473e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810475a:	e021      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810475c:	693b      	ldr	r3, [r7, #16]
 810475e:	ee07 3a90 	vmov	s15, r3
 8104762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104766:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104800 <HAL_RCC_GetSysClockFreq+0x2ec>
 810476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810476e:	4b1e      	ldr	r3, [pc, #120]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104776:	ee07 3a90 	vmov	s15, r3
 810477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810477e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104782:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810478e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810479a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810479e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81047a0:	4b11      	ldr	r3, [pc, #68]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81047a4:	0a5b      	lsrs	r3, r3, #9
 81047a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81047aa:	3301      	adds	r3, #1
 81047ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81047ae:	683b      	ldr	r3, [r7, #0]
 81047b0:	ee07 3a90 	vmov	s15, r3
 81047b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81047b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81047bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81047c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81047c4:	ee17 3a90 	vmov	r3, s15
 81047c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81047ca:	e005      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81047cc:	2300      	movs	r3, #0
 81047ce:	61bb      	str	r3, [r7, #24]
      break;
 81047d0:	e002      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81047d2:	4b07      	ldr	r3, [pc, #28]	@ (81047f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81047d4:	61bb      	str	r3, [r7, #24]
      break;
 81047d6:	bf00      	nop
  }

  return sysclockfreq;
 81047d8:	69bb      	ldr	r3, [r7, #24]
}
 81047da:	4618      	mov	r0, r3
 81047dc:	3724      	adds	r7, #36	@ 0x24
 81047de:	46bd      	mov	sp, r7
 81047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047e4:	4770      	bx	lr
 81047e6:	bf00      	nop
 81047e8:	58024400 	.word	0x58024400
 81047ec:	03d09000 	.word	0x03d09000
 81047f0:	003d0900 	.word	0x003d0900
 81047f4:	017d7840 	.word	0x017d7840
 81047f8:	46000000 	.word	0x46000000
 81047fc:	4c742400 	.word	0x4c742400
 8104800:	4a742400 	.word	0x4a742400
 8104804:	4bbebc20 	.word	0x4bbebc20

08104808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104808:	b580      	push	{r7, lr}
 810480a:	b082      	sub	sp, #8
 810480c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810480e:	f7ff fe81 	bl	8104514 <HAL_RCC_GetSysClockFreq>
 8104812:	4602      	mov	r2, r0
 8104814:	4b11      	ldr	r3, [pc, #68]	@ (810485c <HAL_RCC_GetHCLKFreq+0x54>)
 8104816:	699b      	ldr	r3, [r3, #24]
 8104818:	0a1b      	lsrs	r3, r3, #8
 810481a:	f003 030f 	and.w	r3, r3, #15
 810481e:	4910      	ldr	r1, [pc, #64]	@ (8104860 <HAL_RCC_GetHCLKFreq+0x58>)
 8104820:	5ccb      	ldrb	r3, [r1, r3]
 8104822:	f003 031f 	and.w	r3, r3, #31
 8104826:	fa22 f303 	lsr.w	r3, r2, r3
 810482a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810482c:	4b0b      	ldr	r3, [pc, #44]	@ (810485c <HAL_RCC_GetHCLKFreq+0x54>)
 810482e:	699b      	ldr	r3, [r3, #24]
 8104830:	f003 030f 	and.w	r3, r3, #15
 8104834:	4a0a      	ldr	r2, [pc, #40]	@ (8104860 <HAL_RCC_GetHCLKFreq+0x58>)
 8104836:	5cd3      	ldrb	r3, [r2, r3]
 8104838:	f003 031f 	and.w	r3, r3, #31
 810483c:	687a      	ldr	r2, [r7, #4]
 810483e:	fa22 f303 	lsr.w	r3, r2, r3
 8104842:	4a08      	ldr	r2, [pc, #32]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104844:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104846:	4b07      	ldr	r3, [pc, #28]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	4a07      	ldr	r2, [pc, #28]	@ (8104868 <HAL_RCC_GetHCLKFreq+0x60>)
 810484c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810484e:	4b05      	ldr	r3, [pc, #20]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104850:	681b      	ldr	r3, [r3, #0]
}
 8104852:	4618      	mov	r0, r3
 8104854:	3708      	adds	r7, #8
 8104856:	46bd      	mov	sp, r7
 8104858:	bd80      	pop	{r7, pc}
 810485a:	bf00      	nop
 810485c:	58024400 	.word	0x58024400
 8104860:	08109ab4 	.word	0x08109ab4
 8104864:	10000004 	.word	0x10000004
 8104868:	10000000 	.word	0x10000000

0810486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810486c:	b580      	push	{r7, lr}
 810486e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104870:	f7ff ffca 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 8104874:	4602      	mov	r2, r0
 8104876:	4b06      	ldr	r3, [pc, #24]	@ (8104890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104878:	69db      	ldr	r3, [r3, #28]
 810487a:	091b      	lsrs	r3, r3, #4
 810487c:	f003 0307 	and.w	r3, r3, #7
 8104880:	4904      	ldr	r1, [pc, #16]	@ (8104894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104882:	5ccb      	ldrb	r3, [r1, r3]
 8104884:	f003 031f 	and.w	r3, r3, #31
 8104888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810488c:	4618      	mov	r0, r3
 810488e:	bd80      	pop	{r7, pc}
 8104890:	58024400 	.word	0x58024400
 8104894:	08109ab4 	.word	0x08109ab4

08104898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104898:	b580      	push	{r7, lr}
 810489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810489c:	f7ff ffb4 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 81048a0:	4602      	mov	r2, r0
 81048a2:	4b06      	ldr	r3, [pc, #24]	@ (81048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 81048a4:	69db      	ldr	r3, [r3, #28]
 81048a6:	0a1b      	lsrs	r3, r3, #8
 81048a8:	f003 0307 	and.w	r3, r3, #7
 81048ac:	4904      	ldr	r1, [pc, #16]	@ (81048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81048ae:	5ccb      	ldrb	r3, [r1, r3]
 81048b0:	f003 031f 	and.w	r3, r3, #31
 81048b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81048b8:	4618      	mov	r0, r3
 81048ba:	bd80      	pop	{r7, pc}
 81048bc:	58024400 	.word	0x58024400
 81048c0:	08109ab4 	.word	0x08109ab4

081048c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81048c8:	b0ca      	sub	sp, #296	@ 0x128
 81048ca:	af00      	add	r7, sp, #0
 81048cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81048d0:	2300      	movs	r3, #0
 81048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81048d6:	2300      	movs	r3, #0
 81048d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81048e8:	2500      	movs	r5, #0
 81048ea:	ea54 0305 	orrs.w	r3, r4, r5
 81048ee:	d049      	beq.n	8104984 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81048f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048fa:	d02f      	beq.n	810495c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81048fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104900:	d828      	bhi.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104906:	d01a      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104908:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810490c:	d822      	bhi.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810490e:	2b00      	cmp	r3, #0
 8104910:	d003      	beq.n	810491a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104916:	d007      	beq.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104918:	e01c      	b.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810491a:	4bb8      	ldr	r3, [pc, #736]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810491e:	4ab7      	ldr	r2, [pc, #732]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104926:	e01a      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810492c:	3308      	adds	r3, #8
 810492e:	2102      	movs	r1, #2
 8104930:	4618      	mov	r0, r3
 8104932:	f002 fb61 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104936:	4603      	mov	r3, r0
 8104938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810493c:	e00f      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104942:	3328      	adds	r3, #40	@ 0x28
 8104944:	2102      	movs	r1, #2
 8104946:	4618      	mov	r0, r3
 8104948:	f002 fc08 	bl	810715c <RCCEx_PLL3_Config>
 810494c:	4603      	mov	r3, r0
 810494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104952:	e004      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104954:	2301      	movs	r3, #1
 8104956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810495a:	e000      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104962:	2b00      	cmp	r3, #0
 8104964:	d10a      	bne.n	810497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104966:	4ba5      	ldr	r3, [pc, #660]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810496a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104974:	4aa1      	ldr	r2, [pc, #644]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104976:	430b      	orrs	r3, r1
 8104978:	6513      	str	r3, [r2, #80]	@ 0x50
 810497a:	e003      	b.n	8104984 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810497c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104988:	e9d3 2300 	ldrd	r2, r3, [r3]
 810498c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8104990:	f04f 0900 	mov.w	r9, #0
 8104994:	ea58 0309 	orrs.w	r3, r8, r9
 8104998:	d047      	beq.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049a0:	2b04      	cmp	r3, #4
 81049a2:	d82a      	bhi.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 81049a4:	a201      	add	r2, pc, #4	@ (adr r2, 81049ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049aa:	bf00      	nop
 81049ac:	081049c1 	.word	0x081049c1
 81049b0:	081049cf 	.word	0x081049cf
 81049b4:	081049e5 	.word	0x081049e5
 81049b8:	08104a03 	.word	0x08104a03
 81049bc:	08104a03 	.word	0x08104a03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049c0:	4b8e      	ldr	r3, [pc, #568]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049c4:	4a8d      	ldr	r2, [pc, #564]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81049ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049cc:	e01a      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049d2:	3308      	adds	r3, #8
 81049d4:	2100      	movs	r1, #0
 81049d6:	4618      	mov	r0, r3
 81049d8:	f002 fb0e 	bl	8106ff8 <RCCEx_PLL2_Config>
 81049dc:	4603      	mov	r3, r0
 81049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049e2:	e00f      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049e8:	3328      	adds	r3, #40	@ 0x28
 81049ea:	2100      	movs	r1, #0
 81049ec:	4618      	mov	r0, r3
 81049ee:	f002 fbb5 	bl	810715c <RCCEx_PLL3_Config>
 81049f2:	4603      	mov	r3, r0
 81049f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049f8:	e004      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049fa:	2301      	movs	r3, #1
 81049fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104a00:	e000      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d10a      	bne.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a10:	f023 0107 	bic.w	r1, r3, #7
 8104a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a1a:	4a78      	ldr	r2, [pc, #480]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a1c:	430b      	orrs	r3, r1
 8104a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104a20:	e003      	b.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8104a36:	f04f 0b00 	mov.w	fp, #0
 8104a3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8104a3e:	d04c      	beq.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a4a:	d030      	beq.n	8104aae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a50:	d829      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a54:	d02d      	beq.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a58:	d825      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a5a:	2b80      	cmp	r3, #128	@ 0x80
 8104a5c:	d018      	beq.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104a5e:	2b80      	cmp	r3, #128	@ 0x80
 8104a60:	d821      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d002      	beq.n	8104a6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104a66:	2b40      	cmp	r3, #64	@ 0x40
 8104a68:	d007      	beq.n	8104a7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104a6a:	e01c      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a6c:	4b63      	ldr	r3, [pc, #396]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a70:	4a62      	ldr	r2, [pc, #392]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a78:	e01c      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a7e:	3308      	adds	r3, #8
 8104a80:	2100      	movs	r1, #0
 8104a82:	4618      	mov	r0, r3
 8104a84:	f002 fab8 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104a88:	4603      	mov	r3, r0
 8104a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a8e:	e011      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a94:	3328      	adds	r3, #40	@ 0x28
 8104a96:	2100      	movs	r1, #0
 8104a98:	4618      	mov	r0, r3
 8104a9a:	f002 fb5f 	bl	810715c <RCCEx_PLL3_Config>
 8104a9e:	4603      	mov	r3, r0
 8104aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104aa4:	e006      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104aa6:	2301      	movs	r3, #1
 8104aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104aac:	e002      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104aae:	bf00      	nop
 8104ab0:	e000      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d10a      	bne.n	8104ad2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104abc:	4b4f      	ldr	r3, [pc, #316]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104ac0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104aca:	4a4c      	ldr	r2, [pc, #304]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104acc:	430b      	orrs	r3, r1
 8104ace:	6513      	str	r3, [r2, #80]	@ 0x50
 8104ad0:	e003      	b.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ae2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104ae6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8104aea:	2300      	movs	r3, #0
 8104aec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104af0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104af4:	460b      	mov	r3, r1
 8104af6:	4313      	orrs	r3, r2
 8104af8:	d053      	beq.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104b02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104b06:	d035      	beq.n	8104b74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104b0c:	d82e      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104b12:	d031      	beq.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104b14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104b18:	d828      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104b1e:	d01a      	beq.n	8104b56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104b24:	d822      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d003      	beq.n	8104b32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104b2e:	d007      	beq.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104b30:	e01c      	b.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b32:	4b32      	ldr	r3, [pc, #200]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b36:	4a31      	ldr	r2, [pc, #196]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b3e:	e01c      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b44:	3308      	adds	r3, #8
 8104b46:	2100      	movs	r1, #0
 8104b48:	4618      	mov	r0, r3
 8104b4a:	f002 fa55 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104b4e:	4603      	mov	r3, r0
 8104b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104b54:	e011      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b5a:	3328      	adds	r3, #40	@ 0x28
 8104b5c:	2100      	movs	r1, #0
 8104b5e:	4618      	mov	r0, r3
 8104b60:	f002 fafc 	bl	810715c <RCCEx_PLL3_Config>
 8104b64:	4603      	mov	r3, r0
 8104b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b6a:	e006      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104b6c:	2301      	movs	r3, #1
 8104b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104b72:	e002      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b74:	bf00      	nop
 8104b76:	e000      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b7e:	2b00      	cmp	r3, #0
 8104b80:	d10b      	bne.n	8104b9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104b82:	4b1e      	ldr	r3, [pc, #120]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b86:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104b92:	4a1a      	ldr	r2, [pc, #104]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b94:	430b      	orrs	r3, r1
 8104b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8104b98:	e003      	b.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104baa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104bae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104bb2:	2300      	movs	r3, #0
 8104bb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104bb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8104bbc:	460b      	mov	r3, r1
 8104bbe:	4313      	orrs	r3, r2
 8104bc0:	d056      	beq.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104bce:	d038      	beq.n	8104c42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104bd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104bd4:	d831      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104bda:	d034      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104bdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104be0:	d82b      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104be6:	d01d      	beq.n	8104c24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104bec:	d825      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d006      	beq.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104bf6:	d00a      	beq.n	8104c0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104bf8:	e01f      	b.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bfa:	bf00      	nop
 8104bfc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c00:	4ba2      	ldr	r3, [pc, #648]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c04:	4aa1      	ldr	r2, [pc, #644]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104c0c:	e01c      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c12:	3308      	adds	r3, #8
 8104c14:	2100      	movs	r1, #0
 8104c16:	4618      	mov	r0, r3
 8104c18:	f002 f9ee 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104c1c:	4603      	mov	r3, r0
 8104c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104c22:	e011      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c28:	3328      	adds	r3, #40	@ 0x28
 8104c2a:	2100      	movs	r1, #0
 8104c2c:	4618      	mov	r0, r3
 8104c2e:	f002 fa95 	bl	810715c <RCCEx_PLL3_Config>
 8104c32:	4603      	mov	r3, r0
 8104c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104c38:	e006      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104c3a:	2301      	movs	r3, #1
 8104c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c40:	e002      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c42:	bf00      	nop
 8104c44:	e000      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d10b      	bne.n	8104c68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104c50:	4b8e      	ldr	r3, [pc, #568]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104c60:	4a8a      	ldr	r2, [pc, #552]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c62:	430b      	orrs	r3, r1
 8104c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8104c66:	e003      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8104c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8104c80:	2300      	movs	r3, #0
 8104c82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104c86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104c8a:	460b      	mov	r3, r1
 8104c8c:	4313      	orrs	r3, r2
 8104c8e:	d03a      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c96:	2b30      	cmp	r3, #48	@ 0x30
 8104c98:	d01f      	beq.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104c9a:	2b30      	cmp	r3, #48	@ 0x30
 8104c9c:	d819      	bhi.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c9e:	2b20      	cmp	r3, #32
 8104ca0:	d00c      	beq.n	8104cbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104ca2:	2b20      	cmp	r3, #32
 8104ca4:	d815      	bhi.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d019      	beq.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104caa:	2b10      	cmp	r3, #16
 8104cac:	d111      	bne.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cae:	4b77      	ldr	r3, [pc, #476]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cb2:	4a76      	ldr	r2, [pc, #472]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104cba:	e011      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cc0:	3308      	adds	r3, #8
 8104cc2:	2102      	movs	r1, #2
 8104cc4:	4618      	mov	r0, r3
 8104cc6:	f002 f997 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104cca:	4603      	mov	r3, r0
 8104ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104cd0:	e006      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104cd2:	2301      	movs	r3, #1
 8104cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104cd8:	e002      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104cda:	bf00      	nop
 8104cdc:	e000      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d10a      	bne.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104ce8:	4b68      	ldr	r3, [pc, #416]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cf6:	4a65      	ldr	r2, [pc, #404]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cf8:	430b      	orrs	r3, r1
 8104cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104cfc:	e003      	b.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104d12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104d16:	2300      	movs	r3, #0
 8104d18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104d1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104d20:	460b      	mov	r3, r1
 8104d22:	4313      	orrs	r3, r2
 8104d24:	d051      	beq.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104d30:	d035      	beq.n	8104d9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104d36:	d82e      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104d3c:	d031      	beq.n	8104da2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104d3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104d42:	d828      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d48:	d01a      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d4e:	d822      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d003      	beq.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104d58:	d007      	beq.n	8104d6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104d5a:	e01c      	b.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d60:	4a4a      	ldr	r2, [pc, #296]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d68:	e01c      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d6e:	3308      	adds	r3, #8
 8104d70:	2100      	movs	r1, #0
 8104d72:	4618      	mov	r0, r3
 8104d74:	f002 f940 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104d78:	4603      	mov	r3, r0
 8104d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d7e:	e011      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d84:	3328      	adds	r3, #40	@ 0x28
 8104d86:	2100      	movs	r1, #0
 8104d88:	4618      	mov	r0, r3
 8104d8a:	f002 f9e7 	bl	810715c <RCCEx_PLL3_Config>
 8104d8e:	4603      	mov	r3, r0
 8104d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d94:	e006      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d96:	2301      	movs	r3, #1
 8104d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104d9c:	e002      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d9e:	bf00      	nop
 8104da0:	e000      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104da8:	2b00      	cmp	r3, #0
 8104daa:	d10a      	bne.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104dac:	4b37      	ldr	r3, [pc, #220]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104db0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104dba:	4a34      	ldr	r2, [pc, #208]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dbc:	430b      	orrs	r3, r1
 8104dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8104dc0:	e003      	b.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8104dda:	2300      	movs	r3, #0
 8104ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104de0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104de4:	460b      	mov	r3, r1
 8104de6:	4313      	orrs	r3, r2
 8104de8:	d056      	beq.n	8104e98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104df4:	d033      	beq.n	8104e5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104df6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104dfa:	d82c      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104e00:	d02f      	beq.n	8104e62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104e02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104e06:	d826      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104e0c:	d02b      	beq.n	8104e66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104e0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104e12:	d820      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e18:	d012      	beq.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e1e:	d81a      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e20:	2b00      	cmp	r3, #0
 8104e22:	d022      	beq.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104e28:	d115      	bne.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e2e:	3308      	adds	r3, #8
 8104e30:	2101      	movs	r1, #1
 8104e32:	4618      	mov	r0, r3
 8104e34:	f002 f8e0 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104e38:	4603      	mov	r3, r0
 8104e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104e3e:	e015      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e44:	3328      	adds	r3, #40	@ 0x28
 8104e46:	2101      	movs	r1, #1
 8104e48:	4618      	mov	r0, r3
 8104e4a:	f002 f987 	bl	810715c <RCCEx_PLL3_Config>
 8104e4e:	4603      	mov	r3, r0
 8104e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104e54:	e00a      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e56:	2301      	movs	r3, #1
 8104e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104e5c:	e006      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e5e:	bf00      	nop
 8104e60:	e004      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e62:	bf00      	nop
 8104e64:	e002      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e66:	bf00      	nop
 8104e68:	e000      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d10d      	bne.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104e74:	4b05      	ldr	r3, [pc, #20]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8104e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e82:	4a02      	ldr	r2, [pc, #8]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e84:	430b      	orrs	r3, r1
 8104e86:	6513      	str	r3, [r2, #80]	@ 0x50
 8104e88:	e006      	b.n	8104e98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104e8a:	bf00      	nop
 8104e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8104ea8:	2300      	movs	r3, #0
 8104eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8104eae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8104eb2:	460b      	mov	r3, r1
 8104eb4:	4313      	orrs	r3, r2
 8104eb6:	d055      	beq.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104ec4:	d033      	beq.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104eca:	d82c      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104ed0:	d02f      	beq.n	8104f32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104ed6:	d826      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104edc:	d02b      	beq.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104ede:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104ee2:	d820      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ee8:	d012      	beq.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104eee:	d81a      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ef0:	2b00      	cmp	r3, #0
 8104ef2:	d022      	beq.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104ef8:	d115      	bne.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104efe:	3308      	adds	r3, #8
 8104f00:	2101      	movs	r1, #1
 8104f02:	4618      	mov	r0, r3
 8104f04:	f002 f878 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104f08:	4603      	mov	r3, r0
 8104f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104f0e:	e015      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f14:	3328      	adds	r3, #40	@ 0x28
 8104f16:	2101      	movs	r1, #1
 8104f18:	4618      	mov	r0, r3
 8104f1a:	f002 f91f 	bl	810715c <RCCEx_PLL3_Config>
 8104f1e:	4603      	mov	r3, r0
 8104f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104f24:	e00a      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104f26:	2301      	movs	r3, #1
 8104f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104f2c:	e006      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f2e:	bf00      	nop
 8104f30:	e004      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f32:	bf00      	nop
 8104f34:	e002      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f36:	bf00      	nop
 8104f38:	e000      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f40:	2b00      	cmp	r3, #0
 8104f42:	d10b      	bne.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104f44:	4ba4      	ldr	r3, [pc, #656]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104f54:	4aa0      	ldr	r2, [pc, #640]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f56:	430b      	orrs	r3, r1
 8104f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8104f5a:	e003      	b.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8104f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8104f74:	2300      	movs	r3, #0
 8104f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8104f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8104f7e:	460b      	mov	r3, r1
 8104f80:	4313      	orrs	r3, r2
 8104f82:	d037      	beq.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f8e:	d00e      	beq.n	8104fae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f94:	d816      	bhi.n	8104fc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d018      	beq.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f9e:	d111      	bne.n	8104fc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fa0:	4b8d      	ldr	r3, [pc, #564]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104fa4:	4a8c      	ldr	r2, [pc, #560]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104fac:	e00f      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fb2:	3308      	adds	r3, #8
 8104fb4:	2101      	movs	r1, #1
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	f002 f81e 	bl	8106ff8 <RCCEx_PLL2_Config>
 8104fbc:	4603      	mov	r3, r0
 8104fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104fc2:	e004      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104fc4:	2301      	movs	r3, #1
 8104fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104fca:	e000      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104fd2:	2b00      	cmp	r3, #0
 8104fd4:	d10a      	bne.n	8104fec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104fd6:	4b80      	ldr	r3, [pc, #512]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104fda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104fe4:	4a7c      	ldr	r2, [pc, #496]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fe6:	430b      	orrs	r3, r1
 8104fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8104fea:	e003      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ffc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8105000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8105004:	2300      	movs	r3, #0
 8105006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810500a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810500e:	460b      	mov	r3, r1
 8105010:	4313      	orrs	r3, r2
 8105012:	d039      	beq.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810501a:	2b03      	cmp	r3, #3
 810501c:	d81c      	bhi.n	8105058 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810501e:	a201      	add	r2, pc, #4	@ (adr r2, 8105024 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105024:	08105061 	.word	0x08105061
 8105028:	08105035 	.word	0x08105035
 810502c:	08105043 	.word	0x08105043
 8105030:	08105061 	.word	0x08105061
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105034:	4b68      	ldr	r3, [pc, #416]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105038:	4a67      	ldr	r2, [pc, #412]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810503a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810503e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105040:	e00f      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105046:	3308      	adds	r3, #8
 8105048:	2102      	movs	r1, #2
 810504a:	4618      	mov	r0, r3
 810504c:	f001 ffd4 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105050:	4603      	mov	r3, r0
 8105052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105056:	e004      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105058:	2301      	movs	r3, #1
 810505a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810505e:	e000      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105066:	2b00      	cmp	r3, #0
 8105068:	d10a      	bne.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810506a:	4b5b      	ldr	r3, [pc, #364]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810506c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810506e:	f023 0103 	bic.w	r1, r3, #3
 8105072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105078:	4a57      	ldr	r2, [pc, #348]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810507a:	430b      	orrs	r3, r1
 810507c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810507e:	e003      	b.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105090:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105098:	2300      	movs	r3, #0
 810509a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810509e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81050a2:	460b      	mov	r3, r1
 81050a4:	4313      	orrs	r3, r2
 81050a6:	f000 809f 	beq.w	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81050aa:	4b4c      	ldr	r3, [pc, #304]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a4b      	ldr	r2, [pc, #300]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81050b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81050b6:	f7fc fdd7 	bl	8101c68 <HAL_GetTick>
 81050ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050be:	e00b      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81050c0:	f7fc fdd2 	bl	8101c68 <HAL_GetTick>
 81050c4:	4602      	mov	r2, r0
 81050c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81050ca:	1ad3      	subs	r3, r2, r3
 81050cc:	2b64      	cmp	r3, #100	@ 0x64
 81050ce:	d903      	bls.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81050d0:	2303      	movs	r3, #3
 81050d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81050d6:	e005      	b.n	81050e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050d8:	4b40      	ldr	r3, [pc, #256]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	d0ed      	beq.n	81050c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81050e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d179      	bne.n	81051e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81050ec:	4b3a      	ldr	r3, [pc, #232]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81050f8:	4053      	eors	r3, r2
 81050fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81050fe:	2b00      	cmp	r3, #0
 8105100:	d015      	beq.n	810512e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105102:	4b35      	ldr	r3, [pc, #212]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810510a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810510e:	4b32      	ldr	r3, [pc, #200]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105112:	4a31      	ldr	r2, [pc, #196]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105118:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810511a:	4b2f      	ldr	r3, [pc, #188]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810511c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810511e:	4a2e      	ldr	r2, [pc, #184]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105124:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105126:	4a2c      	ldr	r2, [pc, #176]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810512c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810513a:	d118      	bne.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810513c:	f7fc fd94 	bl	8101c68 <HAL_GetTick>
 8105140:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105144:	e00d      	b.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105146:	f7fc fd8f 	bl	8101c68 <HAL_GetTick>
 810514a:	4602      	mov	r2, r0
 810514c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105150:	1ad2      	subs	r2, r2, r3
 8105152:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105156:	429a      	cmp	r2, r3
 8105158:	d903      	bls.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810515a:	2303      	movs	r3, #3
 810515c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8105160:	e005      	b.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105162:	4b1d      	ldr	r3, [pc, #116]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105166:	f003 0302 	and.w	r3, r3, #2
 810516a:	2b00      	cmp	r3, #0
 810516c:	d0eb      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105172:	2b00      	cmp	r3, #0
 8105174:	d12b      	bne.n	81051ce <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810517a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105186:	d110      	bne.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105188:	4b13      	ldr	r3, [pc, #76]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810518a:	691b      	ldr	r3, [r3, #16]
 810518c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105198:	091b      	lsrs	r3, r3, #4
 810519a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810519e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81051a2:	4a0d      	ldr	r2, [pc, #52]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051a4:	430b      	orrs	r3, r1
 81051a6:	6113      	str	r3, [r2, #16]
 81051a8:	e005      	b.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81051aa:	4b0b      	ldr	r3, [pc, #44]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051ac:	691b      	ldr	r3, [r3, #16]
 81051ae:	4a0a      	ldr	r2, [pc, #40]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81051b4:	6113      	str	r3, [r2, #16]
 81051b6:	4b08      	ldr	r3, [pc, #32]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81051c6:	4a04      	ldr	r2, [pc, #16]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051c8:	430b      	orrs	r3, r1
 81051ca:	6713      	str	r3, [r2, #112]	@ 0x70
 81051cc:	e00c      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81051d6:	e007      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81051d8:	58024400 	.word	0x58024400
 81051dc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051f0:	f002 0301 	and.w	r3, r2, #1
 81051f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81051f8:	2300      	movs	r3, #0
 81051fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81051fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8105202:	460b      	mov	r3, r1
 8105204:	4313      	orrs	r3, r2
 8105206:	f000 8089 	beq.w	810531c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810520e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105210:	2b28      	cmp	r3, #40	@ 0x28
 8105212:	d86b      	bhi.n	81052ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105214:	a201      	add	r2, pc, #4	@ (adr r2, 810521c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810521a:	bf00      	nop
 810521c:	081052f5 	.word	0x081052f5
 8105220:	081052ed 	.word	0x081052ed
 8105224:	081052ed 	.word	0x081052ed
 8105228:	081052ed 	.word	0x081052ed
 810522c:	081052ed 	.word	0x081052ed
 8105230:	081052ed 	.word	0x081052ed
 8105234:	081052ed 	.word	0x081052ed
 8105238:	081052ed 	.word	0x081052ed
 810523c:	081052c1 	.word	0x081052c1
 8105240:	081052ed 	.word	0x081052ed
 8105244:	081052ed 	.word	0x081052ed
 8105248:	081052ed 	.word	0x081052ed
 810524c:	081052ed 	.word	0x081052ed
 8105250:	081052ed 	.word	0x081052ed
 8105254:	081052ed 	.word	0x081052ed
 8105258:	081052ed 	.word	0x081052ed
 810525c:	081052d7 	.word	0x081052d7
 8105260:	081052ed 	.word	0x081052ed
 8105264:	081052ed 	.word	0x081052ed
 8105268:	081052ed 	.word	0x081052ed
 810526c:	081052ed 	.word	0x081052ed
 8105270:	081052ed 	.word	0x081052ed
 8105274:	081052ed 	.word	0x081052ed
 8105278:	081052ed 	.word	0x081052ed
 810527c:	081052f5 	.word	0x081052f5
 8105280:	081052ed 	.word	0x081052ed
 8105284:	081052ed 	.word	0x081052ed
 8105288:	081052ed 	.word	0x081052ed
 810528c:	081052ed 	.word	0x081052ed
 8105290:	081052ed 	.word	0x081052ed
 8105294:	081052ed 	.word	0x081052ed
 8105298:	081052ed 	.word	0x081052ed
 810529c:	081052f5 	.word	0x081052f5
 81052a0:	081052ed 	.word	0x081052ed
 81052a4:	081052ed 	.word	0x081052ed
 81052a8:	081052ed 	.word	0x081052ed
 81052ac:	081052ed 	.word	0x081052ed
 81052b0:	081052ed 	.word	0x081052ed
 81052b4:	081052ed 	.word	0x081052ed
 81052b8:	081052ed 	.word	0x081052ed
 81052bc:	081052f5 	.word	0x081052f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052c4:	3308      	adds	r3, #8
 81052c6:	2101      	movs	r1, #1
 81052c8:	4618      	mov	r0, r3
 81052ca:	f001 fe95 	bl	8106ff8 <RCCEx_PLL2_Config>
 81052ce:	4603      	mov	r3, r0
 81052d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81052d4:	e00f      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052da:	3328      	adds	r3, #40	@ 0x28
 81052dc:	2101      	movs	r1, #1
 81052de:	4618      	mov	r0, r3
 81052e0:	f001 ff3c 	bl	810715c <RCCEx_PLL3_Config>
 81052e4:	4603      	mov	r3, r0
 81052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81052ea:	e004      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052ec:	2301      	movs	r3, #1
 81052ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81052f2:	e000      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d10a      	bne.n	8105314 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052fe:	4bbf      	ldr	r3, [pc, #764]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105302:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810530a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810530c:	4abb      	ldr	r2, [pc, #748]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810530e:	430b      	orrs	r3, r1
 8105310:	6553      	str	r3, [r2, #84]	@ 0x54
 8105312:	e003      	b.n	810531c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105324:	f002 0302 	and.w	r3, r2, #2
 8105328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810532c:	2300      	movs	r3, #0
 810532e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105332:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105336:	460b      	mov	r3, r1
 8105338:	4313      	orrs	r3, r2
 810533a:	d041      	beq.n	81053c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105342:	2b05      	cmp	r3, #5
 8105344:	d824      	bhi.n	8105390 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105346:	a201      	add	r2, pc, #4	@ (adr r2, 810534c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810534c:	08105399 	.word	0x08105399
 8105350:	08105365 	.word	0x08105365
 8105354:	0810537b 	.word	0x0810537b
 8105358:	08105399 	.word	0x08105399
 810535c:	08105399 	.word	0x08105399
 8105360:	08105399 	.word	0x08105399
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105368:	3308      	adds	r3, #8
 810536a:	2101      	movs	r1, #1
 810536c:	4618      	mov	r0, r3
 810536e:	f001 fe43 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105372:	4603      	mov	r3, r0
 8105374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105378:	e00f      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810537e:	3328      	adds	r3, #40	@ 0x28
 8105380:	2101      	movs	r1, #1
 8105382:	4618      	mov	r0, r3
 8105384:	f001 feea 	bl	810715c <RCCEx_PLL3_Config>
 8105388:	4603      	mov	r3, r0
 810538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810538e:	e004      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105390:	2301      	movs	r3, #1
 8105392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105396:	e000      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105398:	bf00      	nop
    }

    if (ret == HAL_OK)
 810539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d10a      	bne.n	81053b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81053a2:	4b96      	ldr	r3, [pc, #600]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81053a6:	f023 0107 	bic.w	r1, r3, #7
 81053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81053b0:	4a92      	ldr	r2, [pc, #584]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053b2:	430b      	orrs	r3, r1
 81053b4:	6553      	str	r3, [r2, #84]	@ 0x54
 81053b6:	e003      	b.n	81053c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81053bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053c8:	f002 0304 	and.w	r3, r2, #4
 81053cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81053d0:	2300      	movs	r3, #0
 81053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81053d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81053da:	460b      	mov	r3, r1
 81053dc:	4313      	orrs	r3, r2
 81053de:	d044      	beq.n	810546a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81053e8:	2b05      	cmp	r3, #5
 81053ea:	d825      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81053ec:	a201      	add	r2, pc, #4	@ (adr r2, 81053f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053f2:	bf00      	nop
 81053f4:	08105441 	.word	0x08105441
 81053f8:	0810540d 	.word	0x0810540d
 81053fc:	08105423 	.word	0x08105423
 8105400:	08105441 	.word	0x08105441
 8105404:	08105441 	.word	0x08105441
 8105408:	08105441 	.word	0x08105441
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105410:	3308      	adds	r3, #8
 8105412:	2101      	movs	r1, #1
 8105414:	4618      	mov	r0, r3
 8105416:	f001 fdef 	bl	8106ff8 <RCCEx_PLL2_Config>
 810541a:	4603      	mov	r3, r0
 810541c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105420:	e00f      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105426:	3328      	adds	r3, #40	@ 0x28
 8105428:	2101      	movs	r1, #1
 810542a:	4618      	mov	r0, r3
 810542c:	f001 fe96 	bl	810715c <RCCEx_PLL3_Config>
 8105430:	4603      	mov	r3, r0
 8105432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105436:	e004      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105438:	2301      	movs	r3, #1
 810543a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810543e:	e000      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105446:	2b00      	cmp	r3, #0
 8105448:	d10b      	bne.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810544a:	4b6c      	ldr	r3, [pc, #432]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810544e:	f023 0107 	bic.w	r1, r3, #7
 8105452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810545a:	4a68      	ldr	r2, [pc, #416]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810545c:	430b      	orrs	r3, r1
 810545e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105460:	e003      	b.n	810546a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105472:	f002 0320 	and.w	r3, r2, #32
 8105476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810547a:	2300      	movs	r3, #0
 810547c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105484:	460b      	mov	r3, r1
 8105486:	4313      	orrs	r3, r2
 8105488:	d055      	beq.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105496:	d033      	beq.n	8105500 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105498:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810549c:	d82c      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054a2:	d02f      	beq.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054a8:	d826      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054ae:	d02b      	beq.n	8105508 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81054b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054b4:	d820      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054ba:	d012      	beq.n	81054e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054c0:	d81a      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d022      	beq.n	810550c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81054ca:	d115      	bne.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054d0:	3308      	adds	r3, #8
 81054d2:	2100      	movs	r1, #0
 81054d4:	4618      	mov	r0, r3
 81054d6:	f001 fd8f 	bl	8106ff8 <RCCEx_PLL2_Config>
 81054da:	4603      	mov	r3, r0
 81054dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054e0:	e015      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054e6:	3328      	adds	r3, #40	@ 0x28
 81054e8:	2102      	movs	r1, #2
 81054ea:	4618      	mov	r0, r3
 81054ec:	f001 fe36 	bl	810715c <RCCEx_PLL3_Config>
 81054f0:	4603      	mov	r3, r0
 81054f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054f6:	e00a      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054f8:	2301      	movs	r3, #1
 81054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81054fe:	e006      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105500:	bf00      	nop
 8105502:	e004      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105504:	bf00      	nop
 8105506:	e002      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105508:	bf00      	nop
 810550a:	e000      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105512:	2b00      	cmp	r3, #0
 8105514:	d10b      	bne.n	810552e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105516:	4b39      	ldr	r3, [pc, #228]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810551a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105526:	4a35      	ldr	r2, [pc, #212]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105528:	430b      	orrs	r3, r1
 810552a:	6553      	str	r3, [r2, #84]	@ 0x54
 810552c:	e003      	b.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810553e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8105542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8105546:	2300      	movs	r3, #0
 8105548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810554c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8105550:	460b      	mov	r3, r1
 8105552:	4313      	orrs	r3, r2
 8105554:	d058      	beq.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810555a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810555e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105562:	d033      	beq.n	81055cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105564:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105568:	d82c      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810556e:	d02f      	beq.n	81055d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105574:	d826      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810557a:	d02b      	beq.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810557c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105580:	d820      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105586:	d012      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810558c:	d81a      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810558e:	2b00      	cmp	r3, #0
 8105590:	d022      	beq.n	81055d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105596:	d115      	bne.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810559c:	3308      	adds	r3, #8
 810559e:	2100      	movs	r1, #0
 81055a0:	4618      	mov	r0, r3
 81055a2:	f001 fd29 	bl	8106ff8 <RCCEx_PLL2_Config>
 81055a6:	4603      	mov	r3, r0
 81055a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81055ac:	e015      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055b2:	3328      	adds	r3, #40	@ 0x28
 81055b4:	2102      	movs	r1, #2
 81055b6:	4618      	mov	r0, r3
 81055b8:	f001 fdd0 	bl	810715c <RCCEx_PLL3_Config>
 81055bc:	4603      	mov	r3, r0
 81055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81055c2:	e00a      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055c4:	2301      	movs	r3, #1
 81055c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81055ca:	e006      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055cc:	bf00      	nop
 81055ce:	e004      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d0:	bf00      	nop
 81055d2:	e002      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d4:	bf00      	nop
 81055d6:	e000      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055de:	2b00      	cmp	r3, #0
 81055e0:	d10e      	bne.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81055e2:	4b06      	ldr	r3, [pc, #24]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81055f2:	4a02      	ldr	r2, [pc, #8]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055f4:	430b      	orrs	r3, r1
 81055f6:	6593      	str	r3, [r2, #88]	@ 0x58
 81055f8:	e006      	b.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81055fa:	bf00      	nop
 81055fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105610:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8105614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8105618:	2300      	movs	r3, #0
 810561a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810561e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8105622:	460b      	mov	r3, r1
 8105624:	4313      	orrs	r3, r2
 8105626:	d055      	beq.n	81056d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810562c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105630:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105634:	d033      	beq.n	810569e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105636:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810563a:	d82c      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105640:	d02f      	beq.n	81056a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105646:	d826      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105648:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810564c:	d02b      	beq.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810564e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105652:	d820      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105658:	d012      	beq.n	8105680 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810565a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810565e:	d81a      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105660:	2b00      	cmp	r3, #0
 8105662:	d022      	beq.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105668:	d115      	bne.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810566e:	3308      	adds	r3, #8
 8105670:	2100      	movs	r1, #0
 8105672:	4618      	mov	r0, r3
 8105674:	f001 fcc0 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105678:	4603      	mov	r3, r0
 810567a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810567e:	e015      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105684:	3328      	adds	r3, #40	@ 0x28
 8105686:	2102      	movs	r1, #2
 8105688:	4618      	mov	r0, r3
 810568a:	f001 fd67 	bl	810715c <RCCEx_PLL3_Config>
 810568e:	4603      	mov	r3, r0
 8105690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105694:	e00a      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105696:	2301      	movs	r3, #1
 8105698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810569c:	e006      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810569e:	bf00      	nop
 81056a0:	e004      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056a2:	bf00      	nop
 81056a4:	e002      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056a6:	bf00      	nop
 81056a8:	e000      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81056ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056b0:	2b00      	cmp	r3, #0
 81056b2:	d10b      	bne.n	81056cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81056b4:	4ba1      	ldr	r3, [pc, #644]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81056b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81056c4:	4a9d      	ldr	r2, [pc, #628]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056c6:	430b      	orrs	r3, r1
 81056c8:	6593      	str	r3, [r2, #88]	@ 0x58
 81056ca:	e003      	b.n	81056d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056dc:	f002 0308 	and.w	r3, r2, #8
 81056e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81056e4:	2300      	movs	r3, #0
 81056e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81056ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81056ee:	460b      	mov	r3, r1
 81056f0:	4313      	orrs	r3, r2
 81056f2:	d01e      	beq.n	8105732 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105700:	d10c      	bne.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105706:	3328      	adds	r3, #40	@ 0x28
 8105708:	2102      	movs	r1, #2
 810570a:	4618      	mov	r0, r3
 810570c:	f001 fd26 	bl	810715c <RCCEx_PLL3_Config>
 8105710:	4603      	mov	r3, r0
 8105712:	2b00      	cmp	r3, #0
 8105714:	d002      	beq.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105716:	2301      	movs	r3, #1
 8105718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810571c:	4b87      	ldr	r3, [pc, #540]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810571e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105720:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810572c:	4a83      	ldr	r2, [pc, #524]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810572e:	430b      	orrs	r3, r1
 8105730:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810573a:	f002 0310 	and.w	r3, r2, #16
 810573e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105742:	2300      	movs	r3, #0
 8105744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105748:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810574c:	460b      	mov	r3, r1
 810574e:	4313      	orrs	r3, r2
 8105750:	d01e      	beq.n	8105790 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105756:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810575a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810575e:	d10c      	bne.n	810577a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105764:	3328      	adds	r3, #40	@ 0x28
 8105766:	2102      	movs	r1, #2
 8105768:	4618      	mov	r0, r3
 810576a:	f001 fcf7 	bl	810715c <RCCEx_PLL3_Config>
 810576e:	4603      	mov	r3, r0
 8105770:	2b00      	cmp	r3, #0
 8105772:	d002      	beq.n	810577a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105774:	2301      	movs	r3, #1
 8105776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810577a:	4b70      	ldr	r3, [pc, #448]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810577e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810578a:	4a6c      	ldr	r2, [pc, #432]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810578c:	430b      	orrs	r3, r1
 810578e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105798:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810579c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81057a0:	2300      	movs	r3, #0
 81057a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81057a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81057aa:	460b      	mov	r3, r1
 81057ac:	4313      	orrs	r3, r2
 81057ae:	d03e      	beq.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81057b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057bc:	d022      	beq.n	8105804 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81057be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057c2:	d81b      	bhi.n	81057fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81057c4:	2b00      	cmp	r3, #0
 81057c6:	d003      	beq.n	81057d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81057c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81057cc:	d00b      	beq.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81057ce:	e015      	b.n	81057fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057d4:	3308      	adds	r3, #8
 81057d6:	2100      	movs	r1, #0
 81057d8:	4618      	mov	r0, r3
 81057da:	f001 fc0d 	bl	8106ff8 <RCCEx_PLL2_Config>
 81057de:	4603      	mov	r3, r0
 81057e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057e4:	e00f      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057ea:	3328      	adds	r3, #40	@ 0x28
 81057ec:	2102      	movs	r1, #2
 81057ee:	4618      	mov	r0, r3
 81057f0:	f001 fcb4 	bl	810715c <RCCEx_PLL3_Config>
 81057f4:	4603      	mov	r3, r0
 81057f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057fa:	e004      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057fc:	2301      	movs	r3, #1
 81057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105802:	e000      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810580a:	2b00      	cmp	r3, #0
 810580c:	d10b      	bne.n	8105826 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810580e:	4b4b      	ldr	r3, [pc, #300]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105812:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8105816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810581a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810581e:	4a47      	ldr	r2, [pc, #284]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105820:	430b      	orrs	r3, r1
 8105822:	6593      	str	r3, [r2, #88]	@ 0x58
 8105824:	e003      	b.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810582a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105836:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810583a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810583c:	2300      	movs	r3, #0
 810583e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105840:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8105844:	460b      	mov	r3, r1
 8105846:	4313      	orrs	r3, r2
 8105848:	d03b      	beq.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105856:	d01f      	beq.n	8105898 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810585c:	d818      	bhi.n	8105890 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810585e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105862:	d003      	beq.n	810586c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105868:	d007      	beq.n	810587a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810586a:	e011      	b.n	8105890 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810586c:	4b33      	ldr	r3, [pc, #204]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105870:	4a32      	ldr	r2, [pc, #200]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105878:	e00f      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810587e:	3328      	adds	r3, #40	@ 0x28
 8105880:	2101      	movs	r1, #1
 8105882:	4618      	mov	r0, r3
 8105884:	f001 fc6a 	bl	810715c <RCCEx_PLL3_Config>
 8105888:	4603      	mov	r3, r0
 810588a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810588e:	e004      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105890:	2301      	movs	r3, #1
 8105892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105896:	e000      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105898:	bf00      	nop
    }

    if (ret == HAL_OK)
 810589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d10b      	bne.n	81058ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81058a2:	4b26      	ldr	r3, [pc, #152]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81058b2:	4a22      	ldr	r2, [pc, #136]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058b4:	430b      	orrs	r3, r1
 81058b6:	6553      	str	r3, [r2, #84]	@ 0x54
 81058b8:	e003      	b.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81058be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81058ce:	673b      	str	r3, [r7, #112]	@ 0x70
 81058d0:	2300      	movs	r3, #0
 81058d2:	677b      	str	r3, [r7, #116]	@ 0x74
 81058d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81058d8:	460b      	mov	r3, r1
 81058da:	4313      	orrs	r3, r2
 81058dc:	d034      	beq.n	8105948 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	d003      	beq.n	81058f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81058e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81058ec:	d007      	beq.n	81058fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81058ee:	e011      	b.n	8105914 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058f0:	4b12      	ldr	r3, [pc, #72]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058f4:	4a11      	ldr	r2, [pc, #68]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81058fc:	e00e      	b.n	810591c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105902:	3308      	adds	r3, #8
 8105904:	2102      	movs	r1, #2
 8105906:	4618      	mov	r0, r3
 8105908:	f001 fb76 	bl	8106ff8 <RCCEx_PLL2_Config>
 810590c:	4603      	mov	r3, r0
 810590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105912:	e003      	b.n	810591c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105914:	2301      	movs	r3, #1
 8105916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810591a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810591c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105920:	2b00      	cmp	r3, #0
 8105922:	d10d      	bne.n	8105940 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105924:	4b05      	ldr	r3, [pc, #20]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105928:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105932:	4a02      	ldr	r2, [pc, #8]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105934:	430b      	orrs	r3, r1
 8105936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105938:	e006      	b.n	8105948 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810593a:	bf00      	nop
 810593c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105950:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105956:	2300      	movs	r3, #0
 8105958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810595a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810595e:	460b      	mov	r3, r1
 8105960:	4313      	orrs	r3, r2
 8105962:	d00c      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105968:	3328      	adds	r3, #40	@ 0x28
 810596a:	2102      	movs	r1, #2
 810596c:	4618      	mov	r0, r3
 810596e:	f001 fbf5 	bl	810715c <RCCEx_PLL3_Config>
 8105972:	4603      	mov	r3, r0
 8105974:	2b00      	cmp	r3, #0
 8105976:	d002      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105978:	2301      	movs	r3, #1
 810597a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105986:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810598a:	663b      	str	r3, [r7, #96]	@ 0x60
 810598c:	2300      	movs	r3, #0
 810598e:	667b      	str	r3, [r7, #100]	@ 0x64
 8105990:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105994:	460b      	mov	r3, r1
 8105996:	4313      	orrs	r3, r2
 8105998:	d038      	beq.n	8105a0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81059a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81059a6:	d018      	beq.n	81059da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81059a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81059ac:	d811      	bhi.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81059ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81059b2:	d014      	beq.n	81059de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81059b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81059b8:	d80b      	bhi.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d011      	beq.n	81059e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81059be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81059c2:	d106      	bne.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059c4:	4bc3      	ldr	r3, [pc, #780]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059c8:	4ac2      	ldr	r2, [pc, #776]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81059d0:	e008      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059d2:	2301      	movs	r3, #1
 81059d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81059d8:	e004      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059da:	bf00      	nop
 81059dc:	e002      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059de:	bf00      	nop
 81059e0:	e000      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81059e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	d10b      	bne.n	8105a04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059ec:	4bb9      	ldr	r3, [pc, #740]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81059f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81059fc:	4ab5      	ldr	r2, [pc, #724]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059fe:	430b      	orrs	r3, r1
 8105a00:	6553      	str	r3, [r2, #84]	@ 0x54
 8105a02:	e003      	b.n	8105a0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8105a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105a1a:	2300      	movs	r3, #0
 8105a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8105a1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8105a22:	460b      	mov	r3, r1
 8105a24:	4313      	orrs	r3, r2
 8105a26:	d009      	beq.n	8105a3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105a28:	4baa      	ldr	r3, [pc, #680]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8105a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105a36:	4aa7      	ldr	r2, [pc, #668]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a38:	430b      	orrs	r3, r1
 8105a3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105a48:	653b      	str	r3, [r7, #80]	@ 0x50
 8105a4a:	2300      	movs	r3, #0
 8105a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8105a4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105a52:	460b      	mov	r3, r1
 8105a54:	4313      	orrs	r3, r2
 8105a56:	d00a      	beq.n	8105a6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105a58:	4b9e      	ldr	r3, [pc, #632]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a5a:	691b      	ldr	r3, [r3, #16]
 8105a5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105a68:	4a9a      	ldr	r2, [pc, #616]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a6a:	430b      	orrs	r3, r1
 8105a6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105a7c:	2300      	movs	r3, #0
 8105a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105a80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105a84:	460b      	mov	r3, r1
 8105a86:	4313      	orrs	r3, r2
 8105a88:	d009      	beq.n	8105a9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105a8a:	4b92      	ldr	r3, [pc, #584]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8105a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a98:	4a8e      	ldr	r2, [pc, #568]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a9a:	430b      	orrs	r3, r1
 8105a9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aa6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105aaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8105aac:	2300      	movs	r3, #0
 8105aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8105ab0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105ab4:	460b      	mov	r3, r1
 8105ab6:	4313      	orrs	r3, r2
 8105ab8:	d00e      	beq.n	8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105aba:	4b86      	ldr	r3, [pc, #536]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105abc:	691b      	ldr	r3, [r3, #16]
 8105abe:	4a85      	ldr	r2, [pc, #532]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ac0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105ac4:	6113      	str	r3, [r2, #16]
 8105ac6:	4b83      	ldr	r3, [pc, #524]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ac8:	6919      	ldr	r1, [r3, #16]
 8105aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ace:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105ad2:	4a80      	ldr	r2, [pc, #512]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ad4:	430b      	orrs	r3, r1
 8105ad6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ae0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8105ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105ae6:	2300      	movs	r3, #0
 8105ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105aea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105aee:	460b      	mov	r3, r1
 8105af0:	4313      	orrs	r3, r2
 8105af2:	d009      	beq.n	8105b08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105af4:	4b77      	ldr	r3, [pc, #476]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105af8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b02:	4a74      	ldr	r2, [pc, #464]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b04:	430b      	orrs	r3, r1
 8105b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b10:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8105b16:	2300      	movs	r3, #0
 8105b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8105b1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8105b1e:	460b      	mov	r3, r1
 8105b20:	4313      	orrs	r3, r2
 8105b22:	d00a      	beq.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105b24:	4b6b      	ldr	r3, [pc, #428]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b28:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8105b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105b34:	4a67      	ldr	r2, [pc, #412]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b36:	430b      	orrs	r3, r1
 8105b38:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b42:	2100      	movs	r1, #0
 8105b44:	62b9      	str	r1, [r7, #40]	@ 0x28
 8105b46:	f003 0301 	and.w	r3, r3, #1
 8105b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105b4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105b50:	460b      	mov	r3, r1
 8105b52:	4313      	orrs	r3, r2
 8105b54:	d011      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b5a:	3308      	adds	r3, #8
 8105b5c:	2100      	movs	r1, #0
 8105b5e:	4618      	mov	r0, r3
 8105b60:	f001 fa4a 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105b64:	4603      	mov	r3, r0
 8105b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	d003      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b82:	2100      	movs	r1, #0
 8105b84:	6239      	str	r1, [r7, #32]
 8105b86:	f003 0302 	and.w	r3, r3, #2
 8105b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8105b8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105b90:	460b      	mov	r3, r1
 8105b92:	4313      	orrs	r3, r2
 8105b94:	d011      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b9a:	3308      	adds	r3, #8
 8105b9c:	2101      	movs	r1, #1
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f001 fa2a 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105ba4:	4603      	mov	r3, r0
 8105ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bae:	2b00      	cmp	r3, #0
 8105bb0:	d003      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bc2:	2100      	movs	r1, #0
 8105bc4:	61b9      	str	r1, [r7, #24]
 8105bc6:	f003 0304 	and.w	r3, r3, #4
 8105bca:	61fb      	str	r3, [r7, #28]
 8105bcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105bd0:	460b      	mov	r3, r1
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	d011      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bda:	3308      	adds	r3, #8
 8105bdc:	2102      	movs	r1, #2
 8105bde:	4618      	mov	r0, r3
 8105be0:	f001 fa0a 	bl	8106ff8 <RCCEx_PLL2_Config>
 8105be4:	4603      	mov	r3, r0
 8105be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d003      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c02:	2100      	movs	r1, #0
 8105c04:	6139      	str	r1, [r7, #16]
 8105c06:	f003 0308 	and.w	r3, r3, #8
 8105c0a:	617b      	str	r3, [r7, #20]
 8105c0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105c10:	460b      	mov	r3, r1
 8105c12:	4313      	orrs	r3, r2
 8105c14:	d011      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c1a:	3328      	adds	r3, #40	@ 0x28
 8105c1c:	2100      	movs	r1, #0
 8105c1e:	4618      	mov	r0, r3
 8105c20:	f001 fa9c 	bl	810715c <RCCEx_PLL3_Config>
 8105c24:	4603      	mov	r3, r0
 8105c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8105c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c2e:	2b00      	cmp	r3, #0
 8105c30:	d003      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c42:	2100      	movs	r1, #0
 8105c44:	60b9      	str	r1, [r7, #8]
 8105c46:	f003 0310 	and.w	r3, r3, #16
 8105c4a:	60fb      	str	r3, [r7, #12]
 8105c4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105c50:	460b      	mov	r3, r1
 8105c52:	4313      	orrs	r3, r2
 8105c54:	d011      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c5a:	3328      	adds	r3, #40	@ 0x28
 8105c5c:	2101      	movs	r1, #1
 8105c5e:	4618      	mov	r0, r3
 8105c60:	f001 fa7c 	bl	810715c <RCCEx_PLL3_Config>
 8105c64:	4603      	mov	r3, r0
 8105c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d003      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c82:	2100      	movs	r1, #0
 8105c84:	6039      	str	r1, [r7, #0]
 8105c86:	f003 0320 	and.w	r3, r3, #32
 8105c8a:	607b      	str	r3, [r7, #4]
 8105c8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105c90:	460b      	mov	r3, r1
 8105c92:	4313      	orrs	r3, r2
 8105c94:	d011      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c9a:	3328      	adds	r3, #40	@ 0x28
 8105c9c:	2102      	movs	r1, #2
 8105c9e:	4618      	mov	r0, r3
 8105ca0:	f001 fa5c 	bl	810715c <RCCEx_PLL3_Config>
 8105ca4:	4603      	mov	r3, r0
 8105ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cae:	2b00      	cmp	r3, #0
 8105cb0:	d003      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8105cba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d101      	bne.n	8105cc6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105cc2:	2300      	movs	r3, #0
 8105cc4:	e000      	b.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105cc6:	2301      	movs	r3, #1
}
 8105cc8:	4618      	mov	r0, r3
 8105cca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8105cce:	46bd      	mov	sp, r7
 8105cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105cd4:	58024400 	.word	0x58024400

08105cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8105cd8:	b580      	push	{r7, lr}
 8105cda:	b090      	sub	sp, #64	@ 0x40
 8105cdc:	af00      	add	r7, sp, #0
 8105cde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105ce6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8105cea:	430b      	orrs	r3, r1
 8105cec:	f040 8094 	bne.w	8105e18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105cf4:	f003 0307 	and.w	r3, r3, #7
 8105cf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8105cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cfc:	2b04      	cmp	r3, #4
 8105cfe:	f200 8087 	bhi.w	8105e10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8105d02:	a201      	add	r2, pc, #4	@ (adr r2, 8105d08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8105d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d08:	08105d1d 	.word	0x08105d1d
 8105d0c:	08105d45 	.word	0x08105d45
 8105d10:	08105d6d 	.word	0x08105d6d
 8105d14:	08105e09 	.word	0x08105e09
 8105d18:	08105d95 	.word	0x08105d95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105d1c:	4b93      	ldr	r3, [pc, #588]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105d24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105d28:	d108      	bne.n	8105d3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105d2e:	4618      	mov	r0, r3
 8105d30:	f001 f810 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d38:	f000 bd45 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d3c:	2300      	movs	r3, #0
 8105d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d40:	f000 bd41 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d44:	4b89      	ldr	r3, [pc, #548]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105d50:	d108      	bne.n	8105d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d52:	f107 0318 	add.w	r3, r7, #24
 8105d56:	4618      	mov	r0, r3
 8105d58:	f000 fd54 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105d5c:	69bb      	ldr	r3, [r7, #24]
 8105d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d60:	f000 bd31 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d64:	2300      	movs	r3, #0
 8105d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d68:	f000 bd2d 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105d78:	d108      	bne.n	8105d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d7a:	f107 030c 	add.w	r3, r7, #12
 8105d7e:	4618      	mov	r0, r3
 8105d80:	f000 fe94 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d88:	f000 bd1d 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d8c:	2300      	movs	r3, #0
 8105d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d90:	f000 bd19 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105d94:	4b75      	ldr	r3, [pc, #468]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105d98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105d9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105d9e:	4b73      	ldr	r3, [pc, #460]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	f003 0304 	and.w	r3, r3, #4
 8105da6:	2b04      	cmp	r3, #4
 8105da8:	d10c      	bne.n	8105dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8105daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105dac:	2b00      	cmp	r3, #0
 8105dae:	d109      	bne.n	8105dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105db0:	4b6e      	ldr	r3, [pc, #440]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	08db      	lsrs	r3, r3, #3
 8105db6:	f003 0303 	and.w	r3, r3, #3
 8105dba:	4a6d      	ldr	r2, [pc, #436]	@ (8105f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8105dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105dc2:	e01f      	b.n	8105e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105dc4:	4b69      	ldr	r3, [pc, #420]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105dd0:	d106      	bne.n	8105de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8105dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105dd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105dd8:	d102      	bne.n	8105de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105dda:	4b66      	ldr	r3, [pc, #408]	@ (8105f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105dde:	e011      	b.n	8105e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105de0:	4b62      	ldr	r3, [pc, #392]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105dec:	d106      	bne.n	8105dfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8105dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105df4:	d102      	bne.n	8105dfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105df6:	4b60      	ldr	r3, [pc, #384]	@ (8105f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105dfa:	e003      	b.n	8105e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105dfc:	2300      	movs	r3, #0
 8105dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105e00:	f000 bce1 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105e04:	f000 bcdf 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105e08:	4b5c      	ldr	r3, [pc, #368]	@ (8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e0c:	f000 bcdb 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105e10:	2300      	movs	r3, #0
 8105e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e14:	f000 bcd7 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105e1c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8105e20:	430b      	orrs	r3, r1
 8105e22:	f040 80ad 	bne.w	8105f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105e26:	4b51      	ldr	r3, [pc, #324]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e2a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8105e2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8105e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105e36:	d056      	beq.n	8105ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105e3e:	f200 8090 	bhi.w	8105f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e44:	2bc0      	cmp	r3, #192	@ 0xc0
 8105e46:	f000 8088 	beq.w	8105f5a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8105e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8105e4e:	f200 8088 	bhi.w	8105f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e54:	2b80      	cmp	r3, #128	@ 0x80
 8105e56:	d032      	beq.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e5a:	2b80      	cmp	r3, #128	@ 0x80
 8105e5c:	f200 8081 	bhi.w	8105f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e62:	2b00      	cmp	r3, #0
 8105e64:	d003      	beq.n	8105e6e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8105e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e68:	2b40      	cmp	r3, #64	@ 0x40
 8105e6a:	d014      	beq.n	8105e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105e6c:	e079      	b.n	8105f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e70:	681b      	ldr	r3, [r3, #0]
 8105e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105e7a:	d108      	bne.n	8105e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105e80:	4618      	mov	r0, r3
 8105e82:	f000 ff67 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e8a:	f000 bc9c 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e8e:	2300      	movs	r3, #0
 8105e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e92:	f000 bc98 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105e96:	4b35      	ldr	r3, [pc, #212]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e98:	681b      	ldr	r3, [r3, #0]
 8105e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105ea2:	d108      	bne.n	8105eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ea4:	f107 0318 	add.w	r3, r7, #24
 8105ea8:	4618      	mov	r0, r3
 8105eaa:	f000 fcab 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105eae:	69bb      	ldr	r3, [r7, #24]
 8105eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105eb2:	f000 bc88 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105eb6:	2300      	movs	r3, #0
 8105eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105eba:	f000 bc84 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105eca:	d108      	bne.n	8105ede <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ecc:	f107 030c 	add.w	r3, r7, #12
 8105ed0:	4618      	mov	r0, r3
 8105ed2:	f000 fdeb 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105ed6:	68fb      	ldr	r3, [r7, #12]
 8105ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105eda:	f000 bc74 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ede:	2300      	movs	r3, #0
 8105ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ee2:	f000 bc70 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105ee6:	4b21      	ldr	r3, [pc, #132]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105eea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105eee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	f003 0304 	and.w	r3, r3, #4
 8105ef8:	2b04      	cmp	r3, #4
 8105efa:	d10c      	bne.n	8105f16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8105efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d109      	bne.n	8105f16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f02:	4b1a      	ldr	r3, [pc, #104]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105f04:	681b      	ldr	r3, [r3, #0]
 8105f06:	08db      	lsrs	r3, r3, #3
 8105f08:	f003 0303 	and.w	r3, r3, #3
 8105f0c:	4a18      	ldr	r2, [pc, #96]	@ (8105f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8105f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105f14:	e01f      	b.n	8105f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105f16:	4b15      	ldr	r3, [pc, #84]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105f18:	681b      	ldr	r3, [r3, #0]
 8105f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105f22:	d106      	bne.n	8105f32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8105f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105f2a:	d102      	bne.n	8105f32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105f2c:	4b11      	ldr	r3, [pc, #68]	@ (8105f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105f30:	e011      	b.n	8105f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105f32:	4b0e      	ldr	r3, [pc, #56]	@ (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f3e:	d106      	bne.n	8105f4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8105f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105f46:	d102      	bne.n	8105f4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105f48:	4b0b      	ldr	r3, [pc, #44]	@ (8105f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105f4c:	e003      	b.n	8105f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105f4e:	2300      	movs	r3, #0
 8105f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105f52:	f000 bc38 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105f56:	f000 bc36 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105f5a:	4b08      	ldr	r3, [pc, #32]	@ (8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f5e:	f000 bc32 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105f62:	2300      	movs	r3, #0
 8105f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f66:	f000 bc2e 	b.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105f6a:	bf00      	nop
 8105f6c:	58024400 	.word	0x58024400
 8105f70:	03d09000 	.word	0x03d09000
 8105f74:	003d0900 	.word	0x003d0900
 8105f78:	017d7840 	.word	0x017d7840
 8105f7c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105f84:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8105f88:	430b      	orrs	r3, r1
 8105f8a:	f040 809c 	bne.w	81060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105f92:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8105f96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8105f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105f9e:	d054      	beq.n	810604a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105fa6:	f200 808b 	bhi.w	81060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105fb0:	f000 8083 	beq.w	81060ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8105fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105fba:	f200 8081 	bhi.w	81060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105fc4:	d02f      	beq.n	8106026 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8105fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105fcc:	d878      	bhi.n	81060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fd0:	2b00      	cmp	r3, #0
 8105fd2:	d004      	beq.n	8105fde <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8105fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105fda:	d012      	beq.n	8106002 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8105fdc:	e070      	b.n	81060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105fde:	4b8a      	ldr	r3, [pc, #552]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105fe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105fea:	d107      	bne.n	8105ffc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105ff0:	4618      	mov	r0, r3
 8105ff2:	f000 feaf 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105ffa:	e3e4      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ffc:	2300      	movs	r3, #0
 8105ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106000:	e3e1      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106002:	4b81      	ldr	r3, [pc, #516]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810600a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810600e:	d107      	bne.n	8106020 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106010:	f107 0318 	add.w	r3, r7, #24
 8106014:	4618      	mov	r0, r3
 8106016:	f000 fbf5 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810601a:	69bb      	ldr	r3, [r7, #24]
 810601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810601e:	e3d2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106020:	2300      	movs	r3, #0
 8106022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106024:	e3cf      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106026:	4b78      	ldr	r3, [pc, #480]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810602e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106032:	d107      	bne.n	8106044 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106034:	f107 030c 	add.w	r3, r7, #12
 8106038:	4618      	mov	r0, r3
 810603a:	f000 fd37 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810603e:	68fb      	ldr	r3, [r7, #12]
 8106040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106042:	e3c0      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106044:	2300      	movs	r3, #0
 8106046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106048:	e3bd      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810604a:	4b6f      	ldr	r3, [pc, #444]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810604c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810604e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106052:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106054:	4b6c      	ldr	r3, [pc, #432]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	f003 0304 	and.w	r3, r3, #4
 810605c:	2b04      	cmp	r3, #4
 810605e:	d10c      	bne.n	810607a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8106060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106062:	2b00      	cmp	r3, #0
 8106064:	d109      	bne.n	810607a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106066:	4b68      	ldr	r3, [pc, #416]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	08db      	lsrs	r3, r3, #3
 810606c:	f003 0303 	and.w	r3, r3, #3
 8106070:	4a66      	ldr	r2, [pc, #408]	@ (810620c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106072:	fa22 f303 	lsr.w	r3, r2, r3
 8106076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106078:	e01e      	b.n	81060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810607a:	4b63      	ldr	r3, [pc, #396]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106086:	d106      	bne.n	8106096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8106088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810608a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810608e:	d102      	bne.n	8106096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106090:	4b5f      	ldr	r3, [pc, #380]	@ (8106210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106094:	e010      	b.n	81060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106096:	4b5c      	ldr	r3, [pc, #368]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810609e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81060a2:	d106      	bne.n	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81060a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81060a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81060aa:	d102      	bne.n	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81060ac:	4b59      	ldr	r3, [pc, #356]	@ (8106214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81060b0:	e002      	b.n	81060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81060b2:	2300      	movs	r3, #0
 81060b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81060b6:	e386      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81060b8:	e385      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81060ba:	4b57      	ldr	r3, [pc, #348]	@ (8106218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81060be:	e382      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81060c0:	2300      	movs	r3, #0
 81060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81060c4:	e37f      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81060c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81060ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81060ce:	430b      	orrs	r3, r1
 81060d0:	f040 80a7 	bne.w	8106222 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81060d4:	4b4c      	ldr	r3, [pc, #304]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81060d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81060d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81060dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81060e4:	d055      	beq.n	8106192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81060ec:	f200 8096 	bhi.w	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81060f6:	f000 8084 	beq.w	8106202 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106100:	f200 808c 	bhi.w	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810610a:	d030      	beq.n	810616e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810610e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106112:	f200 8083 	bhi.w	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106118:	2b00      	cmp	r3, #0
 810611a:	d004      	beq.n	8106126 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810611e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106122:	d012      	beq.n	810614a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8106124:	e07a      	b.n	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106126:	4b38      	ldr	r3, [pc, #224]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810612e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106132:	d107      	bne.n	8106144 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106138:	4618      	mov	r0, r3
 810613a:	f000 fe0b 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106142:	e340      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106144:	2300      	movs	r3, #0
 8106146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106148:	e33d      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810614a:	4b2f      	ldr	r3, [pc, #188]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810614c:	681b      	ldr	r3, [r3, #0]
 810614e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106156:	d107      	bne.n	8106168 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106158:	f107 0318 	add.w	r3, r7, #24
 810615c:	4618      	mov	r0, r3
 810615e:	f000 fb51 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106162:	69bb      	ldr	r3, [r7, #24]
 8106164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106166:	e32e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106168:	2300      	movs	r3, #0
 810616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810616c:	e32b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810616e:	4b26      	ldr	r3, [pc, #152]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810617a:	d107      	bne.n	810618c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810617c:	f107 030c 	add.w	r3, r7, #12
 8106180:	4618      	mov	r0, r3
 8106182:	f000 fc93 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106186:	68fb      	ldr	r3, [r7, #12]
 8106188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810618a:	e31c      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810618c:	2300      	movs	r3, #0
 810618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106190:	e319      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106192:	4b1d      	ldr	r3, [pc, #116]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810619a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810619c:	4b1a      	ldr	r3, [pc, #104]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	f003 0304 	and.w	r3, r3, #4
 81061a4:	2b04      	cmp	r3, #4
 81061a6:	d10c      	bne.n	81061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81061a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81061aa:	2b00      	cmp	r3, #0
 81061ac:	d109      	bne.n	81061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81061ae:	4b16      	ldr	r3, [pc, #88]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	08db      	lsrs	r3, r3, #3
 81061b4:	f003 0303 	and.w	r3, r3, #3
 81061b8:	4a14      	ldr	r2, [pc, #80]	@ (810620c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81061ba:	fa22 f303 	lsr.w	r3, r2, r3
 81061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81061c0:	e01e      	b.n	8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81061c2:	4b11      	ldr	r3, [pc, #68]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81061c4:	681b      	ldr	r3, [r3, #0]
 81061c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81061ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81061ce:	d106      	bne.n	81061de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81061d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81061d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81061d6:	d102      	bne.n	81061de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8106210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81061dc:	e010      	b.n	8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81061de:	4b0a      	ldr	r3, [pc, #40]	@ (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81061e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81061ea:	d106      	bne.n	81061fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81061ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81061f2:	d102      	bne.n	81061fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81061f4:	4b07      	ldr	r3, [pc, #28]	@ (8106214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81061f8:	e002      	b.n	8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81061fa:	2300      	movs	r3, #0
 81061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81061fe:	e2e2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106200:	e2e1      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106202:	4b05      	ldr	r3, [pc, #20]	@ (8106218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106206:	e2de      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106208:	58024400 	.word	0x58024400
 810620c:	03d09000 	.word	0x03d09000
 8106210:	003d0900 	.word	0x003d0900
 8106214:	017d7840 	.word	0x017d7840
 8106218:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810621c:	2300      	movs	r3, #0
 810621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106220:	e2d1      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106226:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810622a:	430b      	orrs	r3, r1
 810622c:	f040 809c 	bne.w	8106368 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106230:	4b93      	ldr	r3, [pc, #588]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106234:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8106238:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810623c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106240:	d054      	beq.n	81062ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106248:	f200 808b 	bhi.w	8106362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810624e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106252:	f000 8083 	beq.w	810635c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8106256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810625c:	f200 8081 	bhi.w	8106362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106266:	d02f      	beq.n	81062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8106268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810626a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810626e:	d878      	bhi.n	8106362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106272:	2b00      	cmp	r3, #0
 8106274:	d004      	beq.n	8106280 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8106276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810627c:	d012      	beq.n	81062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810627e:	e070      	b.n	8106362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106280:	4b7f      	ldr	r3, [pc, #508]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810628c:	d107      	bne.n	810629e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810628e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106292:	4618      	mov	r0, r3
 8106294:	f000 fd5e 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810629c:	e293      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810629e:	2300      	movs	r3, #0
 81062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062a2:	e290      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81062a4:	4b76      	ldr	r3, [pc, #472]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062a6:	681b      	ldr	r3, [r3, #0]
 81062a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81062ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81062b0:	d107      	bne.n	81062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81062b2:	f107 0318 	add.w	r3, r7, #24
 81062b6:	4618      	mov	r0, r3
 81062b8:	f000 faa4 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81062bc:	69bb      	ldr	r3, [r7, #24]
 81062be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81062c0:	e281      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81062c2:	2300      	movs	r3, #0
 81062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062c6:	e27e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81062c8:	4b6d      	ldr	r3, [pc, #436]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81062d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81062d4:	d107      	bne.n	81062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81062d6:	f107 030c 	add.w	r3, r7, #12
 81062da:	4618      	mov	r0, r3
 81062dc:	f000 fbe6 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81062e0:	68fb      	ldr	r3, [r7, #12]
 81062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81062e4:	e26f      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81062e6:	2300      	movs	r3, #0
 81062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062ea:	e26c      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81062ec:	4b64      	ldr	r3, [pc, #400]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81062f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81062f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81062f6:	4b62      	ldr	r3, [pc, #392]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062f8:	681b      	ldr	r3, [r3, #0]
 81062fa:	f003 0304 	and.w	r3, r3, #4
 81062fe:	2b04      	cmp	r3, #4
 8106300:	d10c      	bne.n	810631c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8106302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106304:	2b00      	cmp	r3, #0
 8106306:	d109      	bne.n	810631c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106308:	4b5d      	ldr	r3, [pc, #372]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	08db      	lsrs	r3, r3, #3
 810630e:	f003 0303 	and.w	r3, r3, #3
 8106312:	4a5c      	ldr	r2, [pc, #368]	@ (8106484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106314:	fa22 f303 	lsr.w	r3, r2, r3
 8106318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810631a:	e01e      	b.n	810635a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810631c:	4b58      	ldr	r3, [pc, #352]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106328:	d106      	bne.n	8106338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810632a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810632c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106330:	d102      	bne.n	8106338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106332:	4b55      	ldr	r3, [pc, #340]	@ (8106488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106336:	e010      	b.n	810635a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106338:	4b51      	ldr	r3, [pc, #324]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106344:	d106      	bne.n	8106354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8106346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810634c:	d102      	bne.n	8106354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810634e:	4b4f      	ldr	r3, [pc, #316]	@ (810648c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106352:	e002      	b.n	810635a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106354:	2300      	movs	r3, #0
 8106356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106358:	e235      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810635a:	e234      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810635c:	4b4c      	ldr	r3, [pc, #304]	@ (8106490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106360:	e231      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106362:	2300      	movs	r3, #0
 8106364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106366:	e22e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8106368:	e9d7 2300 	ldrd	r2, r3, [r7]
 810636c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8106370:	430b      	orrs	r3, r1
 8106372:	f040 808f 	bne.w	8106494 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106376:	4b42      	ldr	r3, [pc, #264]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810637a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810637e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8106380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106386:	d06b      	beq.n	8106460 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8106388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810638a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810638e:	d874      	bhi.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106396:	d056      	beq.n	8106446 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810639a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810639e:	d86c      	bhi.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81063a6:	d03b      	beq.n	8106420 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81063ae:	d864      	bhi.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063b6:	d021      	beq.n	81063fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063be:	d85c      	bhi.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d004      	beq.n	81063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81063c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81063cc:	d004      	beq.n	81063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81063ce:	e054      	b.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81063d0:	f7fe fa4c 	bl	810486c <HAL_RCC_GetPCLK1Freq>
 81063d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81063d6:	e1f6      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81063d8:	4b29      	ldr	r3, [pc, #164]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81063e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81063e4:	d107      	bne.n	81063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81063e6:	f107 0318 	add.w	r3, r7, #24
 81063ea:	4618      	mov	r0, r3
 81063ec:	f000 fa0a 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81063f0:	69fb      	ldr	r3, [r7, #28]
 81063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063f4:	e1e7      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063f6:	2300      	movs	r3, #0
 81063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81063fa:	e1e4      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81063fc:	4b20      	ldr	r3, [pc, #128]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106408:	d107      	bne.n	810641a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810640a:	f107 030c 	add.w	r3, r7, #12
 810640e:	4618      	mov	r0, r3
 8106410:	f000 fb4c 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106414:	693b      	ldr	r3, [r7, #16]
 8106416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106418:	e1d5      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810641a:	2300      	movs	r3, #0
 810641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810641e:	e1d2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106420:	4b17      	ldr	r3, [pc, #92]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	f003 0304 	and.w	r3, r3, #4
 8106428:	2b04      	cmp	r3, #4
 810642a:	d109      	bne.n	8106440 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810642c:	4b14      	ldr	r3, [pc, #80]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	08db      	lsrs	r3, r3, #3
 8106432:	f003 0303 	and.w	r3, r3, #3
 8106436:	4a13      	ldr	r2, [pc, #76]	@ (8106484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106438:	fa22 f303 	lsr.w	r3, r2, r3
 810643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810643e:	e1c2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106440:	2300      	movs	r3, #0
 8106442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106444:	e1bf      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106446:	4b0e      	ldr	r3, [pc, #56]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106448:	681b      	ldr	r3, [r3, #0]
 810644a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810644e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106452:	d102      	bne.n	810645a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8106454:	4b0c      	ldr	r3, [pc, #48]	@ (8106488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106458:	e1b5      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810645a:	2300      	movs	r3, #0
 810645c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810645e:	e1b2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106460:	4b07      	ldr	r3, [pc, #28]	@ (8106480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810646c:	d102      	bne.n	8106474 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810646e:	4b07      	ldr	r3, [pc, #28]	@ (810648c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106472:	e1a8      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106474:	2300      	movs	r3, #0
 8106476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106478:	e1a5      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810647a:	2300      	movs	r3, #0
 810647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810647e:	e1a2      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106480:	58024400 	.word	0x58024400
 8106484:	03d09000 	.word	0x03d09000
 8106488:	003d0900 	.word	0x003d0900
 810648c:	017d7840 	.word	0x017d7840
 8106490:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106498:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810649c:	430b      	orrs	r3, r1
 810649e:	d173      	bne.n	8106588 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81064a0:	4b9c      	ldr	r3, [pc, #624]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81064a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81064a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81064b0:	d02f      	beq.n	8106512 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81064b8:	d863      	bhi.n	8106582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064bc:	2b00      	cmp	r3, #0
 81064be:	d004      	beq.n	81064ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81064c6:	d012      	beq.n	81064ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81064c8:	e05b      	b.n	8106582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81064ca:	4b92      	ldr	r3, [pc, #584]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81064d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81064d6:	d107      	bne.n	81064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81064d8:	f107 0318 	add.w	r3, r7, #24
 81064dc:	4618      	mov	r0, r3
 81064de:	f000 f991 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81064e2:	69bb      	ldr	r3, [r7, #24]
 81064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81064e6:	e16e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81064e8:	2300      	movs	r3, #0
 81064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81064ec:	e16b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81064ee:	4b89      	ldr	r3, [pc, #548]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81064f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81064fa:	d107      	bne.n	810650c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81064fc:	f107 030c 	add.w	r3, r7, #12
 8106500:	4618      	mov	r0, r3
 8106502:	f000 fad3 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106506:	697b      	ldr	r3, [r7, #20]
 8106508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810650a:	e15c      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810650c:	2300      	movs	r3, #0
 810650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106510:	e159      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106512:	4b80      	ldr	r3, [pc, #512]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810651a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810651c:	4b7d      	ldr	r3, [pc, #500]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	f003 0304 	and.w	r3, r3, #4
 8106524:	2b04      	cmp	r3, #4
 8106526:	d10c      	bne.n	8106542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8106528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810652a:	2b00      	cmp	r3, #0
 810652c:	d109      	bne.n	8106542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810652e:	4b79      	ldr	r3, [pc, #484]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	08db      	lsrs	r3, r3, #3
 8106534:	f003 0303 	and.w	r3, r3, #3
 8106538:	4a77      	ldr	r2, [pc, #476]	@ (8106718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810653a:	fa22 f303 	lsr.w	r3, r2, r3
 810653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106540:	e01e      	b.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106542:	4b74      	ldr	r3, [pc, #464]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106544:	681b      	ldr	r3, [r3, #0]
 8106546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810654a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810654e:	d106      	bne.n	810655e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8106550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106556:	d102      	bne.n	810655e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106558:	4b70      	ldr	r3, [pc, #448]	@ (810671c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810655c:	e010      	b.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810655e:	4b6d      	ldr	r3, [pc, #436]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810656a:	d106      	bne.n	810657a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810656e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106572:	d102      	bne.n	810657a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106574:	4b6a      	ldr	r3, [pc, #424]	@ (8106720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106578:	e002      	b.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810657a:	2300      	movs	r3, #0
 810657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810657e:	e122      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106580:	e121      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106582:	2300      	movs	r3, #0
 8106584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106586:	e11e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106588:	e9d7 2300 	ldrd	r2, r3, [r7]
 810658c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8106590:	430b      	orrs	r3, r1
 8106592:	d133      	bne.n	81065fc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8106594:	4b5f      	ldr	r3, [pc, #380]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810659c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065a0:	2b00      	cmp	r3, #0
 81065a2:	d004      	beq.n	81065ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81065aa:	d012      	beq.n	81065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81065ac:	e023      	b.n	81065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81065ae:	4b59      	ldr	r3, [pc, #356]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81065b0:	681b      	ldr	r3, [r3, #0]
 81065b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81065b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81065ba:	d107      	bne.n	81065cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81065bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81065c0:	4618      	mov	r0, r3
 81065c2:	f000 fbc7 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81065ca:	e0fc      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81065cc:	2300      	movs	r3, #0
 81065ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065d0:	e0f9      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81065d2:	4b50      	ldr	r3, [pc, #320]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81065da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81065de:	d107      	bne.n	81065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065e0:	f107 0318 	add.w	r3, r7, #24
 81065e4:	4618      	mov	r0, r3
 81065e6:	f000 f90d 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81065ea:	6a3b      	ldr	r3, [r7, #32]
 81065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81065ee:	e0ea      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81065f0:	2300      	movs	r3, #0
 81065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065f4:	e0e7      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81065f6:	2300      	movs	r3, #0
 81065f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065fa:	e0e4      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81065fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106600:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8106604:	430b      	orrs	r3, r1
 8106606:	f040 808d 	bne.w	8106724 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810660a:	4b42      	ldr	r3, [pc, #264]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810660c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810660e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8106612:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810661a:	d06b      	beq.n	81066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810661e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106622:	d874      	bhi.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810662a:	d056      	beq.n	81066da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810662e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106632:	d86c      	bhi.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810663a:	d03b      	beq.n	81066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810663e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106642:	d864      	bhi.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810664a:	d021      	beq.n	8106690 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810664e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106652:	d85c      	bhi.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106656:	2b00      	cmp	r3, #0
 8106658:	d004      	beq.n	8106664 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810665c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106660:	d004      	beq.n	810666c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8106662:	e054      	b.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106664:	f000 f8b8 	bl	81067d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8106668:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810666a:	e0ac      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810666c:	4b29      	ldr	r3, [pc, #164]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106678:	d107      	bne.n	810668a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810667a:	f107 0318 	add.w	r3, r7, #24
 810667e:	4618      	mov	r0, r3
 8106680:	f000 f8c0 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106684:	69fb      	ldr	r3, [r7, #28]
 8106686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106688:	e09d      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810668a:	2300      	movs	r3, #0
 810668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810668e:	e09a      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106690:	4b20      	ldr	r3, [pc, #128]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810669c:	d107      	bne.n	81066ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810669e:	f107 030c 	add.w	r3, r7, #12
 81066a2:	4618      	mov	r0, r3
 81066a4:	f000 fa02 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81066a8:	693b      	ldr	r3, [r7, #16]
 81066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81066ac:	e08b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81066ae:	2300      	movs	r3, #0
 81066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81066b2:	e088      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81066b4:	4b17      	ldr	r3, [pc, #92]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	f003 0304 	and.w	r3, r3, #4
 81066bc:	2b04      	cmp	r3, #4
 81066be:	d109      	bne.n	81066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81066c0:	4b14      	ldr	r3, [pc, #80]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	08db      	lsrs	r3, r3, #3
 81066c6:	f003 0303 	and.w	r3, r3, #3
 81066ca:	4a13      	ldr	r2, [pc, #76]	@ (8106718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81066cc:	fa22 f303 	lsr.w	r3, r2, r3
 81066d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81066d2:	e078      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81066d4:	2300      	movs	r3, #0
 81066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81066d8:	e075      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81066da:	4b0e      	ldr	r3, [pc, #56]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81066e6:	d102      	bne.n	81066ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81066e8:	4b0c      	ldr	r3, [pc, #48]	@ (810671c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81066ec:	e06b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81066ee:	2300      	movs	r3, #0
 81066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81066f2:	e068      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81066f4:	4b07      	ldr	r3, [pc, #28]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81066fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106700:	d102      	bne.n	8106708 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8106702:	4b07      	ldr	r3, [pc, #28]	@ (8106720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106706:	e05e      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106708:	2300      	movs	r3, #0
 810670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810670c:	e05b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810670e:	2300      	movs	r3, #0
 8106710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106712:	e058      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106714:	58024400 	.word	0x58024400
 8106718:	03d09000 	.word	0x03d09000
 810671c:	003d0900 	.word	0x003d0900
 8106720:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106728:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810672c:	430b      	orrs	r3, r1
 810672e:	d148      	bne.n	81067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8106730:	4b27      	ldr	r3, [pc, #156]	@ (81067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106734:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106738:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810673c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106740:	d02a      	beq.n	8106798 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8106742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106748:	d838      	bhi.n	81067bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810674c:	2b00      	cmp	r3, #0
 810674e:	d004      	beq.n	810675a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8106750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106756:	d00d      	beq.n	8106774 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8106758:	e030      	b.n	81067bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810675a:	4b1d      	ldr	r3, [pc, #116]	@ (81067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106766:	d102      	bne.n	810676e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8106768:	4b1a      	ldr	r3, [pc, #104]	@ (81067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810676c:	e02b      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810676e:	2300      	movs	r3, #0
 8106770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106772:	e028      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106774:	4b16      	ldr	r3, [pc, #88]	@ (81067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810677c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106780:	d107      	bne.n	8106792 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106786:	4618      	mov	r0, r3
 8106788:	f000 fae4 	bl	8106d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106790:	e019      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106792:	2300      	movs	r3, #0
 8106794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106796:	e016      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106798:	4b0d      	ldr	r3, [pc, #52]	@ (81067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81067a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81067a4:	d107      	bne.n	81067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067a6:	f107 0318 	add.w	r3, r7, #24
 81067aa:	4618      	mov	r0, r3
 81067ac:	f000 f82a 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81067b0:	69fb      	ldr	r3, [r7, #28]
 81067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81067b4:	e007      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81067b6:	2300      	movs	r3, #0
 81067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067ba:	e004      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81067bc:	2300      	movs	r3, #0
 81067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067c0:	e001      	b.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81067c2:	2300      	movs	r3, #0
 81067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81067c8:	4618      	mov	r0, r3
 81067ca:	3740      	adds	r7, #64	@ 0x40
 81067cc:	46bd      	mov	sp, r7
 81067ce:	bd80      	pop	{r7, pc}
 81067d0:	58024400 	.word	0x58024400
 81067d4:	017d7840 	.word	0x017d7840

081067d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81067d8:	b580      	push	{r7, lr}
 81067da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81067dc:	f7fe f814 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 81067e0:	4602      	mov	r2, r0
 81067e2:	4b06      	ldr	r3, [pc, #24]	@ (81067fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81067e4:	6a1b      	ldr	r3, [r3, #32]
 81067e6:	091b      	lsrs	r3, r3, #4
 81067e8:	f003 0307 	and.w	r3, r3, #7
 81067ec:	4904      	ldr	r1, [pc, #16]	@ (8106800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81067ee:	5ccb      	ldrb	r3, [r1, r3]
 81067f0:	f003 031f 	and.w	r3, r3, #31
 81067f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81067f8:	4618      	mov	r0, r3
 81067fa:	bd80      	pop	{r7, pc}
 81067fc:	58024400 	.word	0x58024400
 8106800:	08109ab4 	.word	0x08109ab4

08106804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8106804:	b480      	push	{r7}
 8106806:	b089      	sub	sp, #36	@ 0x24
 8106808:	af00      	add	r7, sp, #0
 810680a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810680c:	4ba1      	ldr	r3, [pc, #644]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106810:	f003 0303 	and.w	r3, r3, #3
 8106814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106816:	4b9f      	ldr	r3, [pc, #636]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810681a:	0b1b      	lsrs	r3, r3, #12
 810681c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106822:	4b9c      	ldr	r3, [pc, #624]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106826:	091b      	lsrs	r3, r3, #4
 8106828:	f003 0301 	and.w	r3, r3, #1
 810682c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810682e:	4b99      	ldr	r3, [pc, #612]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106832:	08db      	lsrs	r3, r3, #3
 8106834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106838:	693a      	ldr	r2, [r7, #16]
 810683a:	fb02 f303 	mul.w	r3, r2, r3
 810683e:	ee07 3a90 	vmov	s15, r3
 8106842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810684a:	697b      	ldr	r3, [r7, #20]
 810684c:	2b00      	cmp	r3, #0
 810684e:	f000 8111 	beq.w	8106a74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106852:	69bb      	ldr	r3, [r7, #24]
 8106854:	2b02      	cmp	r3, #2
 8106856:	f000 8083 	beq.w	8106960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810685a:	69bb      	ldr	r3, [r7, #24]
 810685c:	2b02      	cmp	r3, #2
 810685e:	f200 80a1 	bhi.w	81069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106862:	69bb      	ldr	r3, [r7, #24]
 8106864:	2b00      	cmp	r3, #0
 8106866:	d003      	beq.n	8106870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106868:	69bb      	ldr	r3, [r7, #24]
 810686a:	2b01      	cmp	r3, #1
 810686c:	d056      	beq.n	810691c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810686e:	e099      	b.n	81069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106870:	4b88      	ldr	r3, [pc, #544]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	f003 0320 	and.w	r3, r3, #32
 8106878:	2b00      	cmp	r3, #0
 810687a:	d02d      	beq.n	81068d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810687c:	4b85      	ldr	r3, [pc, #532]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	08db      	lsrs	r3, r3, #3
 8106882:	f003 0303 	and.w	r3, r3, #3
 8106886:	4a84      	ldr	r2, [pc, #528]	@ (8106a98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106888:	fa22 f303 	lsr.w	r3, r2, r3
 810688c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810688e:	68bb      	ldr	r3, [r7, #8]
 8106890:	ee07 3a90 	vmov	s15, r3
 8106894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106898:	697b      	ldr	r3, [r7, #20]
 810689a:	ee07 3a90 	vmov	s15, r3
 810689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068a6:	4b7b      	ldr	r3, [pc, #492]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068ae:	ee07 3a90 	vmov	s15, r3
 81068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81068ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81068d6:	e087      	b.n	81069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81068d8:	697b      	ldr	r3, [r7, #20]
 81068da:	ee07 3a90 	vmov	s15, r3
 81068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068ea:	4b6a      	ldr	r3, [pc, #424]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068f2:	ee07 3a90 	vmov	s15, r3
 81068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81068fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810690a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810691a:	e065      	b.n	81069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810691c:	697b      	ldr	r3, [r7, #20]
 810691e:	ee07 3a90 	vmov	s15, r3
 8106922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810692a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810692e:	4b59      	ldr	r3, [pc, #356]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106936:	ee07 3a90 	vmov	s15, r3
 810693a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810693e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810694a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810694e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106956:	ee67 7a27 	vmul.f32	s15, s14, s15
 810695a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810695e:	e043      	b.n	81069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106960:	697b      	ldr	r3, [r7, #20]
 8106962:	ee07 3a90 	vmov	s15, r3
 8106966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810696a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810696e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106972:	4b48      	ldr	r3, [pc, #288]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810697a:	ee07 3a90 	vmov	s15, r3
 810697e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106982:	ed97 6a03 	vldr	s12, [r7, #12]
 8106986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810698a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810698e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810699e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81069a2:	e021      	b.n	81069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81069a4:	697b      	ldr	r3, [r7, #20]
 81069a6:	ee07 3a90 	vmov	s15, r3
 81069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069b6:	4b37      	ldr	r3, [pc, #220]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069be:	ee07 3a90 	vmov	s15, r3
 81069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81069ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81069e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81069e8:	4b2a      	ldr	r3, [pc, #168]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81069ec:	0a5b      	lsrs	r3, r3, #9
 81069ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81069f2:	ee07 3a90 	vmov	s15, r3
 81069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81069fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a0e:	ee17 2a90 	vmov	r2, s15
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8106a16:	4b1f      	ldr	r3, [pc, #124]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a1a:	0c1b      	lsrs	r3, r3, #16
 8106a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106a20:	ee07 3a90 	vmov	s15, r3
 8106a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a3c:	ee17 2a90 	vmov	r2, s15
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106a44:	4b13      	ldr	r3, [pc, #76]	@ (8106a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a48:	0e1b      	lsrs	r3, r3, #24
 8106a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106a4e:	ee07 3a90 	vmov	s15, r3
 8106a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a6a:	ee17 2a90 	vmov	r2, s15
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106a72:	e008      	b.n	8106a86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106a74:	687b      	ldr	r3, [r7, #4]
 8106a76:	2200      	movs	r2, #0
 8106a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	2200      	movs	r2, #0
 8106a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	2200      	movs	r2, #0
 8106a84:	609a      	str	r2, [r3, #8]
}
 8106a86:	bf00      	nop
 8106a88:	3724      	adds	r7, #36	@ 0x24
 8106a8a:	46bd      	mov	sp, r7
 8106a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a90:	4770      	bx	lr
 8106a92:	bf00      	nop
 8106a94:	58024400 	.word	0x58024400
 8106a98:	03d09000 	.word	0x03d09000
 8106a9c:	46000000 	.word	0x46000000
 8106aa0:	4c742400 	.word	0x4c742400
 8106aa4:	4a742400 	.word	0x4a742400
 8106aa8:	4bbebc20 	.word	0x4bbebc20

08106aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106aac:	b480      	push	{r7}
 8106aae:	b089      	sub	sp, #36	@ 0x24
 8106ab0:	af00      	add	r7, sp, #0
 8106ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106ab4:	4ba1      	ldr	r3, [pc, #644]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106ab8:	f003 0303 	and.w	r3, r3, #3
 8106abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106abe:	4b9f      	ldr	r3, [pc, #636]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106ac2:	0d1b      	lsrs	r3, r3, #20
 8106ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106aca:	4b9c      	ldr	r3, [pc, #624]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ace:	0a1b      	lsrs	r3, r3, #8
 8106ad0:	f003 0301 	and.w	r3, r3, #1
 8106ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106ad6:	4b99      	ldr	r3, [pc, #612]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106ada:	08db      	lsrs	r3, r3, #3
 8106adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106ae0:	693a      	ldr	r2, [r7, #16]
 8106ae2:	fb02 f303 	mul.w	r3, r2, r3
 8106ae6:	ee07 3a90 	vmov	s15, r3
 8106aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106af2:	697b      	ldr	r3, [r7, #20]
 8106af4:	2b00      	cmp	r3, #0
 8106af6:	f000 8111 	beq.w	8106d1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106afa:	69bb      	ldr	r3, [r7, #24]
 8106afc:	2b02      	cmp	r3, #2
 8106afe:	f000 8083 	beq.w	8106c08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106b02:	69bb      	ldr	r3, [r7, #24]
 8106b04:	2b02      	cmp	r3, #2
 8106b06:	f200 80a1 	bhi.w	8106c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106b0a:	69bb      	ldr	r3, [r7, #24]
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	d003      	beq.n	8106b18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106b10:	69bb      	ldr	r3, [r7, #24]
 8106b12:	2b01      	cmp	r3, #1
 8106b14:	d056      	beq.n	8106bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106b16:	e099      	b.n	8106c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b18:	4b88      	ldr	r3, [pc, #544]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	f003 0320 	and.w	r3, r3, #32
 8106b20:	2b00      	cmp	r3, #0
 8106b22:	d02d      	beq.n	8106b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b24:	4b85      	ldr	r3, [pc, #532]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	08db      	lsrs	r3, r3, #3
 8106b2a:	f003 0303 	and.w	r3, r3, #3
 8106b2e:	4a84      	ldr	r2, [pc, #528]	@ (8106d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106b30:	fa22 f303 	lsr.w	r3, r2, r3
 8106b34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b36:	68bb      	ldr	r3, [r7, #8]
 8106b38:	ee07 3a90 	vmov	s15, r3
 8106b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b40:	697b      	ldr	r3, [r7, #20]
 8106b42:	ee07 3a90 	vmov	s15, r3
 8106b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b56:	ee07 3a90 	vmov	s15, r3
 8106b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106b7e:	e087      	b.n	8106c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b80:	697b      	ldr	r3, [r7, #20]
 8106b82:	ee07 3a90 	vmov	s15, r3
 8106b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106d48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b92:	4b6a      	ldr	r3, [pc, #424]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b9a:	ee07 3a90 	vmov	s15, r3
 8106b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106bc2:	e065      	b.n	8106c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106bc4:	697b      	ldr	r3, [r7, #20]
 8106bc6:	ee07 3a90 	vmov	s15, r3
 8106bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bd6:	4b59      	ldr	r3, [pc, #356]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bde:	ee07 3a90 	vmov	s15, r3
 8106be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c06:	e043      	b.n	8106c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106c08:	697b      	ldr	r3, [r7, #20]
 8106c0a:	ee07 3a90 	vmov	s15, r3
 8106c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c1a:	4b48      	ldr	r3, [pc, #288]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c22:	ee07 3a90 	vmov	s15, r3
 8106c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c4a:	e021      	b.n	8106c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106c4c:	697b      	ldr	r3, [r7, #20]
 8106c4e:	ee07 3a90 	vmov	s15, r3
 8106c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c5e:	4b37      	ldr	r3, [pc, #220]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c66:	ee07 3a90 	vmov	s15, r3
 8106c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106c90:	4b2a      	ldr	r3, [pc, #168]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c94:	0a5b      	lsrs	r3, r3, #9
 8106c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106c9a:	ee07 3a90 	vmov	s15, r3
 8106c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106cb6:	ee17 2a90 	vmov	r2, s15
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8106cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cc2:	0c1b      	lsrs	r3, r3, #16
 8106cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106cc8:	ee07 3a90 	vmov	s15, r3
 8106ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ce4:	ee17 2a90 	vmov	r2, s15
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106cec:	4b13      	ldr	r3, [pc, #76]	@ (8106d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cf0:	0e1b      	lsrs	r3, r3, #24
 8106cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106cf6:	ee07 3a90 	vmov	s15, r3
 8106cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8106d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106d12:	ee17 2a90 	vmov	r2, s15
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106d1a:	e008      	b.n	8106d2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	2200      	movs	r2, #0
 8106d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	2200      	movs	r2, #0
 8106d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	2200      	movs	r2, #0
 8106d2c:	609a      	str	r2, [r3, #8]
}
 8106d2e:	bf00      	nop
 8106d30:	3724      	adds	r7, #36	@ 0x24
 8106d32:	46bd      	mov	sp, r7
 8106d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d38:	4770      	bx	lr
 8106d3a:	bf00      	nop
 8106d3c:	58024400 	.word	0x58024400
 8106d40:	03d09000 	.word	0x03d09000
 8106d44:	46000000 	.word	0x46000000
 8106d48:	4c742400 	.word	0x4c742400
 8106d4c:	4a742400 	.word	0x4a742400
 8106d50:	4bbebc20 	.word	0x4bbebc20

08106d54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8106d54:	b480      	push	{r7}
 8106d56:	b089      	sub	sp, #36	@ 0x24
 8106d58:	af00      	add	r7, sp, #0
 8106d5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106d5c:	4ba0      	ldr	r3, [pc, #640]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d60:	f003 0303 	and.w	r3, r3, #3
 8106d64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8106d66:	4b9e      	ldr	r3, [pc, #632]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d6a:	091b      	lsrs	r3, r3, #4
 8106d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106d70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8106d72:	4b9b      	ldr	r3, [pc, #620]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d76:	f003 0301 	and.w	r3, r3, #1
 8106d7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106d7c:	4b98      	ldr	r3, [pc, #608]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106d80:	08db      	lsrs	r3, r3, #3
 8106d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106d86:	693a      	ldr	r2, [r7, #16]
 8106d88:	fb02 f303 	mul.w	r3, r2, r3
 8106d8c:	ee07 3a90 	vmov	s15, r3
 8106d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106d98:	697b      	ldr	r3, [r7, #20]
 8106d9a:	2b00      	cmp	r3, #0
 8106d9c:	f000 8111 	beq.w	8106fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106da0:	69bb      	ldr	r3, [r7, #24]
 8106da2:	2b02      	cmp	r3, #2
 8106da4:	f000 8083 	beq.w	8106eae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106da8:	69bb      	ldr	r3, [r7, #24]
 8106daa:	2b02      	cmp	r3, #2
 8106dac:	f200 80a1 	bhi.w	8106ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106db0:	69bb      	ldr	r3, [r7, #24]
 8106db2:	2b00      	cmp	r3, #0
 8106db4:	d003      	beq.n	8106dbe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8106db6:	69bb      	ldr	r3, [r7, #24]
 8106db8:	2b01      	cmp	r3, #1
 8106dba:	d056      	beq.n	8106e6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106dbc:	e099      	b.n	8106ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106dbe:	4b88      	ldr	r3, [pc, #544]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106dc0:	681b      	ldr	r3, [r3, #0]
 8106dc2:	f003 0320 	and.w	r3, r3, #32
 8106dc6:	2b00      	cmp	r3, #0
 8106dc8:	d02d      	beq.n	8106e26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106dca:	4b85      	ldr	r3, [pc, #532]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106dcc:	681b      	ldr	r3, [r3, #0]
 8106dce:	08db      	lsrs	r3, r3, #3
 8106dd0:	f003 0303 	and.w	r3, r3, #3
 8106dd4:	4a83      	ldr	r2, [pc, #524]	@ (8106fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8106dda:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106ddc:	68bb      	ldr	r3, [r7, #8]
 8106dde:	ee07 3a90 	vmov	s15, r3
 8106de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106de6:	697b      	ldr	r3, [r7, #20]
 8106de8:	ee07 3a90 	vmov	s15, r3
 8106dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106df4:	4b7a      	ldr	r3, [pc, #488]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dfc:	ee07 3a90 	vmov	s15, r3
 8106e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e08:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8106fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106e24:	e087      	b.n	8106f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106e26:	697b      	ldr	r3, [r7, #20]
 8106e28:	ee07 3a90 	vmov	s15, r3
 8106e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e30:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8106fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e38:	4b69      	ldr	r3, [pc, #420]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e40:	ee07 3a90 	vmov	s15, r3
 8106e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e4c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8106fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e68:	e065      	b.n	8106f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106e6a:	697b      	ldr	r3, [r7, #20]
 8106e6c:	ee07 3a90 	vmov	s15, r3
 8106e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e74:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8106ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e7c:	4b58      	ldr	r3, [pc, #352]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e84:	ee07 3a90 	vmov	s15, r3
 8106e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e90:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8106fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ea8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106eac:	e043      	b.n	8106f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106eae:	697b      	ldr	r3, [r7, #20]
 8106eb0:	ee07 3a90 	vmov	s15, r3
 8106eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8106ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ec0:	4b47      	ldr	r3, [pc, #284]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ec8:	ee07 3a90 	vmov	s15, r3
 8106ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ed4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8106fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106eec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106ef0:	e021      	b.n	8106f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106ef2:	697b      	ldr	r3, [r7, #20]
 8106ef4:	ee07 3a90 	vmov	s15, r3
 8106ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106efc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8106fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106f04:	4b36      	ldr	r3, [pc, #216]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f0c:	ee07 3a90 	vmov	s15, r3
 8106f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8106f18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8106fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106f34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8106f36:	4b2a      	ldr	r3, [pc, #168]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106f3a:	0a5b      	lsrs	r3, r3, #9
 8106f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f40:	ee07 3a90 	vmov	s15, r3
 8106f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f5c:	ee17 2a90 	vmov	r2, s15
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8106f64:	4b1e      	ldr	r3, [pc, #120]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106f68:	0c1b      	lsrs	r3, r3, #16
 8106f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f6e:	ee07 3a90 	vmov	s15, r3
 8106f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f8a:	ee17 2a90 	vmov	r2, s15
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8106f92:	4b13      	ldr	r3, [pc, #76]	@ (8106fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106f96:	0e1b      	lsrs	r3, r3, #24
 8106f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f9c:	ee07 3a90 	vmov	s15, r3
 8106fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8106fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106fb8:	ee17 2a90 	vmov	r2, s15
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106fc0:	e008      	b.n	8106fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	2200      	movs	r2, #0
 8106fc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	2200      	movs	r2, #0
 8106fcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	2200      	movs	r2, #0
 8106fd2:	609a      	str	r2, [r3, #8]
}
 8106fd4:	bf00      	nop
 8106fd6:	3724      	adds	r7, #36	@ 0x24
 8106fd8:	46bd      	mov	sp, r7
 8106fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fde:	4770      	bx	lr
 8106fe0:	58024400 	.word	0x58024400
 8106fe4:	03d09000 	.word	0x03d09000
 8106fe8:	46000000 	.word	0x46000000
 8106fec:	4c742400 	.word	0x4c742400
 8106ff0:	4a742400 	.word	0x4a742400
 8106ff4:	4bbebc20 	.word	0x4bbebc20

08106ff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106ff8:	b580      	push	{r7, lr}
 8106ffa:	b084      	sub	sp, #16
 8106ffc:	af00      	add	r7, sp, #0
 8106ffe:	6078      	str	r0, [r7, #4]
 8107000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107002:	2300      	movs	r3, #0
 8107004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107006:	4b54      	ldr	r3, [pc, #336]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810700a:	f003 0303 	and.w	r3, r3, #3
 810700e:	2b03      	cmp	r3, #3
 8107010:	d101      	bne.n	8107016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107012:	2301      	movs	r3, #1
 8107014:	e09b      	b.n	810714e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107016:	4b50      	ldr	r3, [pc, #320]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	4a4f      	ldr	r2, [pc, #316]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 810701c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8107020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107022:	f7fa fe21 	bl	8101c68 <HAL_GetTick>
 8107026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107028:	e008      	b.n	810703c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810702a:	f7fa fe1d 	bl	8101c68 <HAL_GetTick>
 810702e:	4602      	mov	r2, r0
 8107030:	68bb      	ldr	r3, [r7, #8]
 8107032:	1ad3      	subs	r3, r2, r3
 8107034:	2b02      	cmp	r3, #2
 8107036:	d901      	bls.n	810703c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107038:	2303      	movs	r3, #3
 810703a:	e088      	b.n	810714e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810703c:	4b46      	ldr	r3, [pc, #280]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 810703e:	681b      	ldr	r3, [r3, #0]
 8107040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107044:	2b00      	cmp	r3, #0
 8107046:	d1f0      	bne.n	810702a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107048:	4b43      	ldr	r3, [pc, #268]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 810704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810704c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	031b      	lsls	r3, r3, #12
 8107056:	4940      	ldr	r1, [pc, #256]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107058:	4313      	orrs	r3, r2
 810705a:	628b      	str	r3, [r1, #40]	@ 0x28
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	685b      	ldr	r3, [r3, #4]
 8107060:	3b01      	subs	r3, #1
 8107062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	689b      	ldr	r3, [r3, #8]
 810706a:	3b01      	subs	r3, #1
 810706c:	025b      	lsls	r3, r3, #9
 810706e:	b29b      	uxth	r3, r3
 8107070:	431a      	orrs	r2, r3
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	68db      	ldr	r3, [r3, #12]
 8107076:	3b01      	subs	r3, #1
 8107078:	041b      	lsls	r3, r3, #16
 810707a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810707e:	431a      	orrs	r2, r3
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	691b      	ldr	r3, [r3, #16]
 8107084:	3b01      	subs	r3, #1
 8107086:	061b      	lsls	r3, r3, #24
 8107088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810708c:	4932      	ldr	r1, [pc, #200]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 810708e:	4313      	orrs	r3, r2
 8107090:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107092:	4b31      	ldr	r3, [pc, #196]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107096:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	695b      	ldr	r3, [r3, #20]
 810709e:	492e      	ldr	r1, [pc, #184]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070a0:	4313      	orrs	r3, r2
 81070a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81070a4:	4b2c      	ldr	r3, [pc, #176]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070a8:	f023 0220 	bic.w	r2, r3, #32
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	699b      	ldr	r3, [r3, #24]
 81070b0:	4929      	ldr	r1, [pc, #164]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070b2:	4313      	orrs	r3, r2
 81070b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81070b6:	4b28      	ldr	r3, [pc, #160]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070ba:	4a27      	ldr	r2, [pc, #156]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070bc:	f023 0310 	bic.w	r3, r3, #16
 81070c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81070c2:	4b25      	ldr	r3, [pc, #148]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81070c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81070ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81070ce:	687a      	ldr	r2, [r7, #4]
 81070d0:	69d2      	ldr	r2, [r2, #28]
 81070d2:	00d2      	lsls	r2, r2, #3
 81070d4:	4920      	ldr	r1, [pc, #128]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070d6:	4313      	orrs	r3, r2
 81070d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81070da:	4b1f      	ldr	r3, [pc, #124]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070de:	4a1e      	ldr	r2, [pc, #120]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070e0:	f043 0310 	orr.w	r3, r3, #16
 81070e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81070e6:	683b      	ldr	r3, [r7, #0]
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d106      	bne.n	81070fa <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81070ec:	4b1a      	ldr	r3, [pc, #104]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070f0:	4a19      	ldr	r2, [pc, #100]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 81070f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81070f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81070f8:	e00f      	b.n	810711a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81070fa:	683b      	ldr	r3, [r7, #0]
 81070fc:	2b01      	cmp	r3, #1
 81070fe:	d106      	bne.n	810710e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107100:	4b15      	ldr	r3, [pc, #84]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107104:	4a14      	ldr	r2, [pc, #80]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810710a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810710c:	e005      	b.n	810711a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810710e:	4b12      	ldr	r3, [pc, #72]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107112:	4a11      	ldr	r2, [pc, #68]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8107118:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810711a:	4b0f      	ldr	r3, [pc, #60]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	4a0e      	ldr	r2, [pc, #56]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8107124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107126:	f7fa fd9f 	bl	8101c68 <HAL_GetTick>
 810712a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810712c:	e008      	b.n	8107140 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810712e:	f7fa fd9b 	bl	8101c68 <HAL_GetTick>
 8107132:	4602      	mov	r2, r0
 8107134:	68bb      	ldr	r3, [r7, #8]
 8107136:	1ad3      	subs	r3, r2, r3
 8107138:	2b02      	cmp	r3, #2
 810713a:	d901      	bls.n	8107140 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810713c:	2303      	movs	r3, #3
 810713e:	e006      	b.n	810714e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107140:	4b05      	ldr	r3, [pc, #20]	@ (8107158 <RCCEx_PLL2_Config+0x160>)
 8107142:	681b      	ldr	r3, [r3, #0]
 8107144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107148:	2b00      	cmp	r3, #0
 810714a:	d0f0      	beq.n	810712e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810714c:	7bfb      	ldrb	r3, [r7, #15]
}
 810714e:	4618      	mov	r0, r3
 8107150:	3710      	adds	r7, #16
 8107152:	46bd      	mov	sp, r7
 8107154:	bd80      	pop	{r7, pc}
 8107156:	bf00      	nop
 8107158:	58024400 	.word	0x58024400

0810715c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810715c:	b580      	push	{r7, lr}
 810715e:	b084      	sub	sp, #16
 8107160:	af00      	add	r7, sp, #0
 8107162:	6078      	str	r0, [r7, #4]
 8107164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107166:	2300      	movs	r3, #0
 8107168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810716a:	4b54      	ldr	r3, [pc, #336]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810716e:	f003 0303 	and.w	r3, r3, #3
 8107172:	2b03      	cmp	r3, #3
 8107174:	d101      	bne.n	810717a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107176:	2301      	movs	r3, #1
 8107178:	e09b      	b.n	81072b2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810717a:	4b50      	ldr	r3, [pc, #320]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	4a4f      	ldr	r2, [pc, #316]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107186:	f7fa fd6f 	bl	8101c68 <HAL_GetTick>
 810718a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810718c:	e008      	b.n	81071a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810718e:	f7fa fd6b 	bl	8101c68 <HAL_GetTick>
 8107192:	4602      	mov	r2, r0
 8107194:	68bb      	ldr	r3, [r7, #8]
 8107196:	1ad3      	subs	r3, r2, r3
 8107198:	2b02      	cmp	r3, #2
 810719a:	d901      	bls.n	81071a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810719c:	2303      	movs	r3, #3
 810719e:	e088      	b.n	81072b2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81071a0:	4b46      	ldr	r3, [pc, #280]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81071a2:	681b      	ldr	r3, [r3, #0]
 81071a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81071a8:	2b00      	cmp	r3, #0
 81071aa:	d1f0      	bne.n	810718e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81071ac:	4b43      	ldr	r3, [pc, #268]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81071ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81071b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	681b      	ldr	r3, [r3, #0]
 81071b8:	051b      	lsls	r3, r3, #20
 81071ba:	4940      	ldr	r1, [pc, #256]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81071bc:	4313      	orrs	r3, r2
 81071be:	628b      	str	r3, [r1, #40]	@ 0x28
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	685b      	ldr	r3, [r3, #4]
 81071c4:	3b01      	subs	r3, #1
 81071c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	689b      	ldr	r3, [r3, #8]
 81071ce:	3b01      	subs	r3, #1
 81071d0:	025b      	lsls	r3, r3, #9
 81071d2:	b29b      	uxth	r3, r3
 81071d4:	431a      	orrs	r2, r3
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	68db      	ldr	r3, [r3, #12]
 81071da:	3b01      	subs	r3, #1
 81071dc:	041b      	lsls	r3, r3, #16
 81071de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81071e2:	431a      	orrs	r2, r3
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	691b      	ldr	r3, [r3, #16]
 81071e8:	3b01      	subs	r3, #1
 81071ea:	061b      	lsls	r3, r3, #24
 81071ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81071f0:	4932      	ldr	r1, [pc, #200]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81071f2:	4313      	orrs	r3, r2
 81071f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81071f6:	4b31      	ldr	r3, [pc, #196]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81071fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	695b      	ldr	r3, [r3, #20]
 8107202:	492e      	ldr	r1, [pc, #184]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107204:	4313      	orrs	r3, r2
 8107206:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107208:	4b2c      	ldr	r3, [pc, #176]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810720c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	699b      	ldr	r3, [r3, #24]
 8107214:	4929      	ldr	r1, [pc, #164]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107216:	4313      	orrs	r3, r2
 8107218:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810721a:	4b28      	ldr	r3, [pc, #160]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810721e:	4a27      	ldr	r2, [pc, #156]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107226:	4b25      	ldr	r3, [pc, #148]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810722a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810722e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107232:	687a      	ldr	r2, [r7, #4]
 8107234:	69d2      	ldr	r2, [r2, #28]
 8107236:	00d2      	lsls	r2, r2, #3
 8107238:	4920      	ldr	r1, [pc, #128]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810723a:	4313      	orrs	r3, r2
 810723c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810723e:	4b1f      	ldr	r3, [pc, #124]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107242:	4a1e      	ldr	r2, [pc, #120]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810724a:	683b      	ldr	r3, [r7, #0]
 810724c:	2b00      	cmp	r3, #0
 810724e:	d106      	bne.n	810725e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107250:	4b1a      	ldr	r3, [pc, #104]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107254:	4a19      	ldr	r2, [pc, #100]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107256:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810725a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810725c:	e00f      	b.n	810727e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810725e:	683b      	ldr	r3, [r7, #0]
 8107260:	2b01      	cmp	r3, #1
 8107262:	d106      	bne.n	8107272 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107264:	4b15      	ldr	r3, [pc, #84]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107268:	4a14      	ldr	r2, [pc, #80]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 810726a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810726e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107270:	e005      	b.n	810727e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107272:	4b12      	ldr	r3, [pc, #72]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107276:	4a11      	ldr	r2, [pc, #68]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107278:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810727c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810727e:	4b0f      	ldr	r3, [pc, #60]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107280:	681b      	ldr	r3, [r3, #0]
 8107282:	4a0e      	ldr	r2, [pc, #56]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 8107284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810728a:	f7fa fced 	bl	8101c68 <HAL_GetTick>
 810728e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107290:	e008      	b.n	81072a4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107292:	f7fa fce9 	bl	8101c68 <HAL_GetTick>
 8107296:	4602      	mov	r2, r0
 8107298:	68bb      	ldr	r3, [r7, #8]
 810729a:	1ad3      	subs	r3, r2, r3
 810729c:	2b02      	cmp	r3, #2
 810729e:	d901      	bls.n	81072a4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81072a0:	2303      	movs	r3, #3
 81072a2:	e006      	b.n	81072b2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81072a4:	4b05      	ldr	r3, [pc, #20]	@ (81072bc <RCCEx_PLL3_Config+0x160>)
 81072a6:	681b      	ldr	r3, [r3, #0]
 81072a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d0f0      	beq.n	8107292 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 81072b2:	4618      	mov	r0, r3
 81072b4:	3710      	adds	r7, #16
 81072b6:	46bd      	mov	sp, r7
 81072b8:	bd80      	pop	{r7, pc}
 81072ba:	bf00      	nop
 81072bc:	58024400 	.word	0x58024400

081072c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81072c0:	b580      	push	{r7, lr}
 81072c2:	b08a      	sub	sp, #40	@ 0x28
 81072c4:	af00      	add	r7, sp, #0
 81072c6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d101      	bne.n	81072d2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81072ce:	2301      	movs	r3, #1
 81072d0:	e290      	b.n	81077f4 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81072d2:	f7fa fcf9 	bl	8101cc8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81072dc:	2b01      	cmp	r3, #1
 81072de:	d113      	bne.n	8107308 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	681b      	ldr	r3, [r3, #0]
 81072e4:	4a96      	ldr	r2, [pc, #600]	@ (8107540 <HAL_SAI_Init+0x280>)
 81072e6:	4293      	cmp	r3, r2
 81072e8:	d004      	beq.n	81072f4 <HAL_SAI_Init+0x34>
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	4a95      	ldr	r2, [pc, #596]	@ (8107544 <HAL_SAI_Init+0x284>)
 81072f0:	4293      	cmp	r3, r2
 81072f2:	d107      	bne.n	8107304 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81072f4:	687b      	ldr	r3, [r7, #4]
 81072f6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81072f8:	2b01      	cmp	r3, #1
 81072fa:	d103      	bne.n	8107304 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107300:	2b00      	cmp	r3, #0
 8107302:	d001      	beq.n	8107308 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8107304:	2301      	movs	r3, #1
 8107306:	e275      	b.n	81077f4 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	681b      	ldr	r3, [r3, #0]
 810730c:	4a8c      	ldr	r2, [pc, #560]	@ (8107540 <HAL_SAI_Init+0x280>)
 810730e:	4293      	cmp	r3, r2
 8107310:	d004      	beq.n	810731c <HAL_SAI_Init+0x5c>
 8107312:	687b      	ldr	r3, [r7, #4]
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	4a8c      	ldr	r2, [pc, #560]	@ (8107548 <HAL_SAI_Init+0x288>)
 8107318:	4293      	cmp	r3, r2
 810731a:	d102      	bne.n	8107322 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 810731c:	4b8b      	ldr	r3, [pc, #556]	@ (810754c <HAL_SAI_Init+0x28c>)
 810731e:	61bb      	str	r3, [r7, #24]
 8107320:	e028      	b.n	8107374 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	4a8a      	ldr	r2, [pc, #552]	@ (8107550 <HAL_SAI_Init+0x290>)
 8107328:	4293      	cmp	r3, r2
 810732a:	d004      	beq.n	8107336 <HAL_SAI_Init+0x76>
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	4a88      	ldr	r2, [pc, #544]	@ (8107554 <HAL_SAI_Init+0x294>)
 8107332:	4293      	cmp	r3, r2
 8107334:	d102      	bne.n	810733c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8107336:	4b88      	ldr	r3, [pc, #544]	@ (8107558 <HAL_SAI_Init+0x298>)
 8107338:	61bb      	str	r3, [r7, #24]
 810733a:	e01b      	b.n	8107374 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 810733c:	687b      	ldr	r3, [r7, #4]
 810733e:	681b      	ldr	r3, [r3, #0]
 8107340:	4a86      	ldr	r2, [pc, #536]	@ (810755c <HAL_SAI_Init+0x29c>)
 8107342:	4293      	cmp	r3, r2
 8107344:	d004      	beq.n	8107350 <HAL_SAI_Init+0x90>
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	4a85      	ldr	r2, [pc, #532]	@ (8107560 <HAL_SAI_Init+0x2a0>)
 810734c:	4293      	cmp	r3, r2
 810734e:	d102      	bne.n	8107356 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8107350:	4b84      	ldr	r3, [pc, #528]	@ (8107564 <HAL_SAI_Init+0x2a4>)
 8107352:	61bb      	str	r3, [r7, #24]
 8107354:	e00e      	b.n	8107374 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	4a7a      	ldr	r2, [pc, #488]	@ (8107544 <HAL_SAI_Init+0x284>)
 810735c:	4293      	cmp	r3, r2
 810735e:	d004      	beq.n	810736a <HAL_SAI_Init+0xaa>
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	4a80      	ldr	r2, [pc, #512]	@ (8107568 <HAL_SAI_Init+0x2a8>)
 8107366:	4293      	cmp	r3, r2
 8107368:	d102      	bne.n	8107370 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810736a:	4b80      	ldr	r3, [pc, #512]	@ (810756c <HAL_SAI_Init+0x2ac>)
 810736c:	61bb      	str	r3, [r7, #24]
 810736e:	e001      	b.n	8107374 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8107370:	2301      	movs	r3, #1
 8107372:	e23f      	b.n	81077f4 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 810737a:	b2db      	uxtb	r3, r3
 810737c:	2b00      	cmp	r3, #0
 810737e:	d106      	bne.n	810738e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	2200      	movs	r2, #0
 8107384:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8107388:	6878      	ldr	r0, [r7, #4]
 810738a:	f7fa fac5 	bl	8101918 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810738e:	6878      	ldr	r0, [r7, #4]
 8107390:	f000 fa40 	bl	8107814 <SAI_Disable>
 8107394:	4603      	mov	r3, r0
 8107396:	2b00      	cmp	r3, #0
 8107398:	d001      	beq.n	810739e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810739a:	2301      	movs	r3, #1
 810739c:	e22a      	b.n	81077f4 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	2202      	movs	r2, #2
 81073a2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 81073a6:	687b      	ldr	r3, [r7, #4]
 81073a8:	68db      	ldr	r3, [r3, #12]
 81073aa:	2b02      	cmp	r3, #2
 81073ac:	d00c      	beq.n	81073c8 <HAL_SAI_Init+0x108>
 81073ae:	2b02      	cmp	r3, #2
 81073b0:	d80d      	bhi.n	81073ce <HAL_SAI_Init+0x10e>
 81073b2:	2b00      	cmp	r3, #0
 81073b4:	d002      	beq.n	81073bc <HAL_SAI_Init+0xfc>
 81073b6:	2b01      	cmp	r3, #1
 81073b8:	d003      	beq.n	81073c2 <HAL_SAI_Init+0x102>
 81073ba:	e008      	b.n	81073ce <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81073bc:	2300      	movs	r3, #0
 81073be:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81073c0:	e008      	b.n	81073d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81073c2:	2310      	movs	r3, #16
 81073c4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81073c6:	e005      	b.n	81073d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81073c8:	2320      	movs	r3, #32
 81073ca:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81073cc:	e002      	b.n	81073d4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81073ce:	2300      	movs	r3, #0
 81073d0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81073d2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	689b      	ldr	r3, [r3, #8]
 81073d8:	2b05      	cmp	r3, #5
 81073da:	d832      	bhi.n	8107442 <HAL_SAI_Init+0x182>
 81073dc:	a201      	add	r2, pc, #4	@ (adr r2, 81073e4 <HAL_SAI_Init+0x124>)
 81073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073e2:	bf00      	nop
 81073e4:	081073fd 	.word	0x081073fd
 81073e8:	08107403 	.word	0x08107403
 81073ec:	0810740b 	.word	0x0810740b
 81073f0:	08107413 	.word	0x08107413
 81073f4:	08107423 	.word	0x08107423
 81073f8:	08107433 	.word	0x08107433
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81073fc:	2300      	movs	r3, #0
 81073fe:	61fb      	str	r3, [r7, #28]
      break;
 8107400:	e022      	b.n	8107448 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8107402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8107406:	61fb      	str	r3, [r7, #28]
      break;
 8107408:	e01e      	b.n	8107448 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810740a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810740e:	61fb      	str	r3, [r7, #28]
      break;
 8107410:	e01a      	b.n	8107448 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107416:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8107418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810741a:	f043 0301 	orr.w	r3, r3, #1
 810741e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107420:	e012      	b.n	8107448 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107422:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107426:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8107428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810742a:	f043 0302 	orr.w	r3, r3, #2
 810742e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107430:	e00a      	b.n	8107448 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107436:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8107438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810743a:	f043 0303 	orr.w	r3, r3, #3
 810743e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107440:	e002      	b.n	8107448 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8107442:	2300      	movs	r3, #0
 8107444:	61fb      	str	r3, [r7, #28]
      break;
 8107446:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8107448:	69bb      	ldr	r3, [r7, #24]
 810744a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810744c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	6a1b      	ldr	r3, [r3, #32]
 8107452:	2b00      	cmp	r3, #0
 8107454:	f000 80c5 	beq.w	81075e2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8107458:	2300      	movs	r3, #0
 810745a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	681b      	ldr	r3, [r3, #0]
 8107460:	4a37      	ldr	r2, [pc, #220]	@ (8107540 <HAL_SAI_Init+0x280>)
 8107462:	4293      	cmp	r3, r2
 8107464:	d004      	beq.n	8107470 <HAL_SAI_Init+0x1b0>
 8107466:	687b      	ldr	r3, [r7, #4]
 8107468:	681b      	ldr	r3, [r3, #0]
 810746a:	4a37      	ldr	r2, [pc, #220]	@ (8107548 <HAL_SAI_Init+0x288>)
 810746c:	4293      	cmp	r3, r2
 810746e:	d106      	bne.n	810747e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8107470:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8107474:	f04f 0100 	mov.w	r1, #0
 8107478:	f7fe fc2e 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 810747c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	4a33      	ldr	r2, [pc, #204]	@ (8107550 <HAL_SAI_Init+0x290>)
 8107484:	4293      	cmp	r3, r2
 8107486:	d004      	beq.n	8107492 <HAL_SAI_Init+0x1d2>
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	681b      	ldr	r3, [r3, #0]
 810748c:	4a31      	ldr	r2, [pc, #196]	@ (8107554 <HAL_SAI_Init+0x294>)
 810748e:	4293      	cmp	r3, r2
 8107490:	d106      	bne.n	81074a0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8107492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8107496:	f04f 0100 	mov.w	r1, #0
 810749a:	f7fe fc1d 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 810749e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	4a2d      	ldr	r2, [pc, #180]	@ (810755c <HAL_SAI_Init+0x29c>)
 81074a6:	4293      	cmp	r3, r2
 81074a8:	d004      	beq.n	81074b4 <HAL_SAI_Init+0x1f4>
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	4a2c      	ldr	r2, [pc, #176]	@ (8107560 <HAL_SAI_Init+0x2a0>)
 81074b0:	4293      	cmp	r3, r2
 81074b2:	d106      	bne.n	81074c2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81074b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81074b8:	f04f 0100 	mov.w	r1, #0
 81074bc:	f7fe fc0c 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 81074c0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	4a1f      	ldr	r2, [pc, #124]	@ (8107544 <HAL_SAI_Init+0x284>)
 81074c8:	4293      	cmp	r3, r2
 81074ca:	d106      	bne.n	81074da <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81074cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81074d0:	f04f 0100 	mov.w	r1, #0
 81074d4:	f7fe fc00 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 81074d8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	681b      	ldr	r3, [r3, #0]
 81074de:	4a22      	ldr	r2, [pc, #136]	@ (8107568 <HAL_SAI_Init+0x2a8>)
 81074e0:	4293      	cmp	r3, r2
 81074e2:	d106      	bne.n	81074f2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81074e4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 81074e8:	f04f 0100 	mov.w	r1, #0
 81074ec:	f7fe fbf4 	bl	8105cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 81074f0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	699b      	ldr	r3, [r3, #24]
 81074f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81074fa:	d139      	bne.n	8107570 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81074fc:	687b      	ldr	r3, [r7, #4]
 81074fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107500:	2b04      	cmp	r3, #4
 8107502:	d102      	bne.n	810750a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8107504:	2340      	movs	r3, #64	@ 0x40
 8107506:	60fb      	str	r3, [r7, #12]
 8107508:	e00a      	b.n	8107520 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810750e:	2b08      	cmp	r3, #8
 8107510:	d103      	bne.n	810751a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8107512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107516:	60fb      	str	r3, [r7, #12]
 8107518:	e002      	b.n	8107520 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810751e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8107520:	697a      	ldr	r2, [r7, #20]
 8107522:	4613      	mov	r3, r2
 8107524:	009b      	lsls	r3, r3, #2
 8107526:	4413      	add	r3, r2
 8107528:	005b      	lsls	r3, r3, #1
 810752a:	4619      	mov	r1, r3
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	6a1b      	ldr	r3, [r3, #32]
 8107530:	68fa      	ldr	r2, [r7, #12]
 8107532:	fb02 f303 	mul.w	r3, r2, r3
 8107536:	fbb1 f3f3 	udiv	r3, r1, r3
 810753a:	613b      	str	r3, [r7, #16]
 810753c:	e030      	b.n	81075a0 <HAL_SAI_Init+0x2e0>
 810753e:	bf00      	nop
 8107540:	40015804 	.word	0x40015804
 8107544:	58005404 	.word	0x58005404
 8107548:	40015824 	.word	0x40015824
 810754c:	40015800 	.word	0x40015800
 8107550:	40015c04 	.word	0x40015c04
 8107554:	40015c24 	.word	0x40015c24
 8107558:	40015c00 	.word	0x40015c00
 810755c:	40016004 	.word	0x40016004
 8107560:	40016024 	.word	0x40016024
 8107564:	40016000 	.word	0x40016000
 8107568:	58005424 	.word	0x58005424
 810756c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107578:	d101      	bne.n	810757e <HAL_SAI_Init+0x2be>
 810757a:	2302      	movs	r3, #2
 810757c:	e000      	b.n	8107580 <HAL_SAI_Init+0x2c0>
 810757e:	2301      	movs	r3, #1
 8107580:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8107582:	697a      	ldr	r2, [r7, #20]
 8107584:	4613      	mov	r3, r2
 8107586:	009b      	lsls	r3, r3, #2
 8107588:	4413      	add	r3, r2
 810758a:	005b      	lsls	r3, r3, #1
 810758c:	4619      	mov	r1, r3
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	6a1b      	ldr	r3, [r3, #32]
 8107592:	68ba      	ldr	r2, [r7, #8]
 8107594:	fb02 f303 	mul.w	r3, r2, r3
 8107598:	021b      	lsls	r3, r3, #8
 810759a:	fbb1 f3f3 	udiv	r3, r1, r3
 810759e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81075a0:	693b      	ldr	r3, [r7, #16]
 81075a2:	4a96      	ldr	r2, [pc, #600]	@ (81077fc <HAL_SAI_Init+0x53c>)
 81075a4:	fba2 2303 	umull	r2, r3, r2, r3
 81075a8:	08da      	lsrs	r2, r3, #3
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81075ae:	6939      	ldr	r1, [r7, #16]
 81075b0:	4b92      	ldr	r3, [pc, #584]	@ (81077fc <HAL_SAI_Init+0x53c>)
 81075b2:	fba3 2301 	umull	r2, r3, r3, r1
 81075b6:	08da      	lsrs	r2, r3, #3
 81075b8:	4613      	mov	r3, r2
 81075ba:	009b      	lsls	r3, r3, #2
 81075bc:	4413      	add	r3, r2
 81075be:	005b      	lsls	r3, r3, #1
 81075c0:	1aca      	subs	r2, r1, r3
 81075c2:	2a08      	cmp	r2, #8
 81075c4:	d904      	bls.n	81075d0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81075ca:	1c5a      	adds	r2, r3, #1
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81075d0:	687b      	ldr	r3, [r7, #4]
 81075d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81075d4:	2b04      	cmp	r3, #4
 81075d6:	d104      	bne.n	81075e2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81075dc:	085a      	lsrs	r2, r3, #1
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	685b      	ldr	r3, [r3, #4]
 81075e6:	2b00      	cmp	r3, #0
 81075e8:	d003      	beq.n	81075f2 <HAL_SAI_Init+0x332>
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	685b      	ldr	r3, [r3, #4]
 81075ee:	2b02      	cmp	r3, #2
 81075f0:	d109      	bne.n	8107606 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81075f6:	2b01      	cmp	r3, #1
 81075f8:	d101      	bne.n	81075fe <HAL_SAI_Init+0x33e>
 81075fa:	2300      	movs	r3, #0
 81075fc:	e001      	b.n	8107602 <HAL_SAI_Init+0x342>
 81075fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107602:	623b      	str	r3, [r7, #32]
 8107604:	e008      	b.n	8107618 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810760a:	2b01      	cmp	r3, #1
 810760c:	d102      	bne.n	8107614 <HAL_SAI_Init+0x354>
 810760e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107612:	e000      	b.n	8107616 <HAL_SAI_Init+0x356>
 8107614:	2300      	movs	r3, #0
 8107616:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107618:	f7fa fb56 	bl	8101cc8 <HAL_GetREVID>
 810761c:	4603      	mov	r3, r0
 810761e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107622:	d331      	bcc.n	8107688 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	681b      	ldr	r3, [r3, #0]
 8107628:	6819      	ldr	r1, [r3, #0]
 810762a:	687b      	ldr	r3, [r7, #4]
 810762c:	681a      	ldr	r2, [r3, #0]
 810762e:	4b74      	ldr	r3, [pc, #464]	@ (8107800 <HAL_SAI_Init+0x540>)
 8107630:	400b      	ands	r3, r1
 8107632:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	6819      	ldr	r1, [r3, #0]
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	685a      	ldr	r2, [r3, #4]
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107642:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107644:	687b      	ldr	r3, [r7, #4]
 8107646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107648:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810764a:	687b      	ldr	r3, [r7, #4]
 810764c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810764e:	431a      	orrs	r2, r3
 8107650:	6a3b      	ldr	r3, [r7, #32]
 8107652:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107654:	69fb      	ldr	r3, [r7, #28]
 8107656:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 810765c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	695b      	ldr	r3, [r3, #20]
 8107662:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107664:	687b      	ldr	r3, [r7, #4]
 8107666:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107668:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810766e:	051b      	lsls	r3, r3, #20
 8107670:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107676:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107678:	687b      	ldr	r3, [r7, #4]
 810767a:	691b      	ldr	r3, [r3, #16]
 810767c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	430a      	orrs	r2, r1
 8107684:	601a      	str	r2, [r3, #0]
 8107686:	e02d      	b.n	81076e4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	6819      	ldr	r1, [r3, #0]
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	681a      	ldr	r2, [r3, #0]
 8107692:	4b5c      	ldr	r3, [pc, #368]	@ (8107804 <HAL_SAI_Init+0x544>)
 8107694:	400b      	ands	r3, r1
 8107696:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	681b      	ldr	r3, [r3, #0]
 810769c:	6819      	ldr	r1, [r3, #0]
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	685a      	ldr	r2, [r3, #4]
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81076a6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81076a8:	687b      	ldr	r3, [r7, #4]
 81076aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81076ac:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81076b2:	431a      	orrs	r2, r3
 81076b4:	6a3b      	ldr	r3, [r7, #32]
 81076b6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81076b8:	69fb      	ldr	r3, [r7, #28]
 81076ba:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81076c0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	695b      	ldr	r3, [r3, #20]
 81076c6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81076cc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81076ce:	687b      	ldr	r3, [r7, #4]
 81076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076d2:	051b      	lsls	r3, r3, #20
 81076d4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81076da:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	430a      	orrs	r2, r1
 81076e2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	681b      	ldr	r3, [r3, #0]
 81076e8:	685b      	ldr	r3, [r3, #4]
 81076ea:	687a      	ldr	r2, [r7, #4]
 81076ec:	6812      	ldr	r2, [r2, #0]
 81076ee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 81076f2:	f023 030f 	bic.w	r3, r3, #15
 81076f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	681b      	ldr	r3, [r3, #0]
 81076fc:	6859      	ldr	r1, [r3, #4]
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	69da      	ldr	r2, [r3, #28]
 8107702:	687b      	ldr	r3, [r7, #4]
 8107704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107706:	431a      	orrs	r2, r3
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810770c:	431a      	orrs	r2, r3
 810770e:	687b      	ldr	r3, [r7, #4]
 8107710:	681b      	ldr	r3, [r3, #0]
 8107712:	430a      	orrs	r2, r1
 8107714:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8107716:	687b      	ldr	r3, [r7, #4]
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	6899      	ldr	r1, [r3, #8]
 810771c:	687b      	ldr	r3, [r7, #4]
 810771e:	681a      	ldr	r2, [r3, #0]
 8107720:	4b39      	ldr	r3, [pc, #228]	@ (8107808 <HAL_SAI_Init+0x548>)
 8107722:	400b      	ands	r3, r1
 8107724:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8107726:	687b      	ldr	r3, [r7, #4]
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	6899      	ldr	r1, [r3, #8]
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107730:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8107736:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 810773c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810773e:	687b      	ldr	r3, [r7, #4]
 8107740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8107742:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107748:	3b01      	subs	r3, #1
 810774a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810774c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	430a      	orrs	r2, r1
 8107754:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	681b      	ldr	r3, [r3, #0]
 810775a:	68d9      	ldr	r1, [r3, #12]
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	681a      	ldr	r2, [r3, #0]
 8107760:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8107764:	400b      	ands	r3, r1
 8107766:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	68d9      	ldr	r1, [r3, #12]
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107776:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810777c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810777e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107784:	3b01      	subs	r3, #1
 8107786:	021b      	lsls	r3, r3, #8
 8107788:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	681b      	ldr	r3, [r3, #0]
 810778e:	430a      	orrs	r2, r1
 8107790:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	681b      	ldr	r3, [r3, #0]
 8107796:	4a1d      	ldr	r2, [pc, #116]	@ (810780c <HAL_SAI_Init+0x54c>)
 8107798:	4293      	cmp	r3, r2
 810779a:	d004      	beq.n	81077a6 <HAL_SAI_Init+0x4e6>
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	4a1b      	ldr	r2, [pc, #108]	@ (8107810 <HAL_SAI_Init+0x550>)
 81077a2:	4293      	cmp	r3, r2
 81077a4:	d119      	bne.n	81077da <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81077a6:	69bb      	ldr	r3, [r7, #24]
 81077a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81077aa:	f023 0201 	bic.w	r2, r3, #1
 81077ae:	69bb      	ldr	r3, [r7, #24]
 81077b0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81077b8:	2b01      	cmp	r3, #1
 81077ba:	d10e      	bne.n	81077da <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81077c4:	3b01      	subs	r3, #1
 81077c6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81077c8:	431a      	orrs	r2, r3
 81077ca:	69bb      	ldr	r3, [r7, #24]
 81077cc:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81077ce:	69bb      	ldr	r3, [r7, #24]
 81077d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81077d2:	f043 0201 	orr.w	r2, r3, #1
 81077d6:	69bb      	ldr	r3, [r7, #24]
 81077d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	2200      	movs	r2, #0
 81077de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	2201      	movs	r2, #1
 81077e6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	2200      	movs	r2, #0
 81077ee:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 81077f2:	2300      	movs	r3, #0
}
 81077f4:	4618      	mov	r0, r3
 81077f6:	3728      	adds	r7, #40	@ 0x28
 81077f8:	46bd      	mov	sp, r7
 81077fa:	bd80      	pop	{r7, pc}
 81077fc:	cccccccd 	.word	0xcccccccd
 8107800:	f005c010 	.word	0xf005c010
 8107804:	f805c010 	.word	0xf805c010
 8107808:	fff88000 	.word	0xfff88000
 810780c:	40015804 	.word	0x40015804
 8107810:	58005404 	.word	0x58005404

08107814 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8107814:	b480      	push	{r7}
 8107816:	b085      	sub	sp, #20
 8107818:	af00      	add	r7, sp, #0
 810781a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 810781c:	4b18      	ldr	r3, [pc, #96]	@ (8107880 <SAI_Disable+0x6c>)
 810781e:	681b      	ldr	r3, [r3, #0]
 8107820:	4a18      	ldr	r2, [pc, #96]	@ (8107884 <SAI_Disable+0x70>)
 8107822:	fba2 2303 	umull	r2, r3, r2, r3
 8107826:	0b1b      	lsrs	r3, r3, #12
 8107828:	009b      	lsls	r3, r3, #2
 810782a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 810782c:	2300      	movs	r3, #0
 810782e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	681b      	ldr	r3, [r3, #0]
 8107834:	681a      	ldr	r2, [r3, #0]
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	681b      	ldr	r3, [r3, #0]
 810783a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 810783e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8107840:	68fb      	ldr	r3, [r7, #12]
 8107842:	2b00      	cmp	r3, #0
 8107844:	d10a      	bne.n	810785c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810784c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8107856:	2303      	movs	r3, #3
 8107858:	72fb      	strb	r3, [r7, #11]
      break;
 810785a:	e009      	b.n	8107870 <SAI_Disable+0x5c>
    }
    count--;
 810785c:	68fb      	ldr	r3, [r7, #12]
 810785e:	3b01      	subs	r3, #1
 8107860:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8107862:	687b      	ldr	r3, [r7, #4]
 8107864:	681b      	ldr	r3, [r3, #0]
 8107866:	681b      	ldr	r3, [r3, #0]
 8107868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810786c:	2b00      	cmp	r3, #0
 810786e:	d1e7      	bne.n	8107840 <SAI_Disable+0x2c>

  return status;
 8107870:	7afb      	ldrb	r3, [r7, #11]
}
 8107872:	4618      	mov	r0, r3
 8107874:	3714      	adds	r7, #20
 8107876:	46bd      	mov	sp, r7
 8107878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810787c:	4770      	bx	lr
 810787e:	bf00      	nop
 8107880:	10000000 	.word	0x10000000
 8107884:	95cbec1b 	.word	0x95cbec1b

08107888 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8107888:	b580      	push	{r7, lr}
 810788a:	b082      	sub	sp, #8
 810788c:	af00      	add	r7, sp, #0
 810788e:	6078      	str	r0, [r7, #4]
 8107890:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	2b00      	cmp	r3, #0
 8107896:	d101      	bne.n	810789c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8107898:	2301      	movs	r3, #1
 810789a:	e02b      	b.n	81078f4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810789c:	687b      	ldr	r3, [r7, #4]
 810789e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81078a2:	b2db      	uxtb	r3, r3
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d106      	bne.n	81078b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	2200      	movs	r2, #0
 81078ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 81078b0:	6878      	ldr	r0, [r7, #4]
 81078b2:	f7fa f827 	bl	8101904 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	2202      	movs	r2, #2
 81078ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	681a      	ldr	r2, [r3, #0]
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	3304      	adds	r3, #4
 81078c6:	4619      	mov	r1, r3
 81078c8:	4610      	mov	r0, r2
 81078ca:	f001 f8f3 	bl	8108ab4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	6818      	ldr	r0, [r3, #0]
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	685b      	ldr	r3, [r3, #4]
 81078d6:	461a      	mov	r2, r3
 81078d8:	6839      	ldr	r1, [r7, #0]
 81078da:	f001 f948 	bl	8108b6e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 81078de:	4b07      	ldr	r3, [pc, #28]	@ (81078fc <HAL_SDRAM_Init+0x74>)
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	4a06      	ldr	r2, [pc, #24]	@ (81078fc <HAL_SDRAM_Init+0x74>)
 81078e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81078e8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 81078ea:	687b      	ldr	r3, [r7, #4]
 81078ec:	2201      	movs	r2, #1
 81078ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 81078f2:	2300      	movs	r3, #0
}
 81078f4:	4618      	mov	r0, r3
 81078f6:	3708      	adds	r7, #8
 81078f8:	46bd      	mov	sp, r7
 81078fa:	bd80      	pop	{r7, pc}
 81078fc:	52004000 	.word	0x52004000

08107900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107900:	b580      	push	{r7, lr}
 8107902:	b082      	sub	sp, #8
 8107904:	af00      	add	r7, sp, #0
 8107906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	2b00      	cmp	r3, #0
 810790c:	d101      	bne.n	8107912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810790e:	2301      	movs	r3, #1
 8107910:	e042      	b.n	8107998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107912:	687b      	ldr	r3, [r7, #4]
 8107914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107918:	2b00      	cmp	r3, #0
 810791a:	d106      	bne.n	810792a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	2200      	movs	r2, #0
 8107920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107924:	6878      	ldr	r0, [r7, #4]
 8107926:	f7f9 fe4b 	bl	81015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	2224      	movs	r2, #36	@ 0x24
 810792e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	681a      	ldr	r2, [r3, #0]
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	f022 0201 	bic.w	r2, r2, #1
 8107940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107946:	2b00      	cmp	r3, #0
 8107948:	d002      	beq.n	8107950 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810794a:	6878      	ldr	r0, [r7, #4]
 810794c:	f000 fd90 	bl	8108470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107950:	6878      	ldr	r0, [r7, #4]
 8107952:	f000 f825 	bl	81079a0 <UART_SetConfig>
 8107956:	4603      	mov	r3, r0
 8107958:	2b01      	cmp	r3, #1
 810795a:	d101      	bne.n	8107960 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810795c:	2301      	movs	r3, #1
 810795e:	e01b      	b.n	8107998 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	685a      	ldr	r2, [r3, #4]
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	681b      	ldr	r3, [r3, #0]
 810796a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810796e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	681b      	ldr	r3, [r3, #0]
 8107974:	689a      	ldr	r2, [r3, #8]
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	681b      	ldr	r3, [r3, #0]
 810797a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810797e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	681b      	ldr	r3, [r3, #0]
 8107984:	681a      	ldr	r2, [r3, #0]
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	681b      	ldr	r3, [r3, #0]
 810798a:	f042 0201 	orr.w	r2, r2, #1
 810798e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107990:	6878      	ldr	r0, [r7, #4]
 8107992:	f000 fe0f 	bl	81085b4 <UART_CheckIdleState>
 8107996:	4603      	mov	r3, r0
}
 8107998:	4618      	mov	r0, r3
 810799a:	3708      	adds	r7, #8
 810799c:	46bd      	mov	sp, r7
 810799e:	bd80      	pop	{r7, pc}

081079a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81079a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81079a4:	b092      	sub	sp, #72	@ 0x48
 81079a6:	af00      	add	r7, sp, #0
 81079a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81079aa:	2300      	movs	r3, #0
 81079ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81079b0:	697b      	ldr	r3, [r7, #20]
 81079b2:	689a      	ldr	r2, [r3, #8]
 81079b4:	697b      	ldr	r3, [r7, #20]
 81079b6:	691b      	ldr	r3, [r3, #16]
 81079b8:	431a      	orrs	r2, r3
 81079ba:	697b      	ldr	r3, [r7, #20]
 81079bc:	695b      	ldr	r3, [r3, #20]
 81079be:	431a      	orrs	r2, r3
 81079c0:	697b      	ldr	r3, [r7, #20]
 81079c2:	69db      	ldr	r3, [r3, #28]
 81079c4:	4313      	orrs	r3, r2
 81079c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81079c8:	697b      	ldr	r3, [r7, #20]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	681a      	ldr	r2, [r3, #0]
 81079ce:	4bbd      	ldr	r3, [pc, #756]	@ (8107cc4 <UART_SetConfig+0x324>)
 81079d0:	4013      	ands	r3, r2
 81079d2:	697a      	ldr	r2, [r7, #20]
 81079d4:	6812      	ldr	r2, [r2, #0]
 81079d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81079d8:	430b      	orrs	r3, r1
 81079da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81079dc:	697b      	ldr	r3, [r7, #20]
 81079de:	681b      	ldr	r3, [r3, #0]
 81079e0:	685b      	ldr	r3, [r3, #4]
 81079e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81079e6:	697b      	ldr	r3, [r7, #20]
 81079e8:	68da      	ldr	r2, [r3, #12]
 81079ea:	697b      	ldr	r3, [r7, #20]
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	430a      	orrs	r2, r1
 81079f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81079f2:	697b      	ldr	r3, [r7, #20]
 81079f4:	699b      	ldr	r3, [r3, #24]
 81079f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81079f8:	697b      	ldr	r3, [r7, #20]
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	4ab2      	ldr	r2, [pc, #712]	@ (8107cc8 <UART_SetConfig+0x328>)
 81079fe:	4293      	cmp	r3, r2
 8107a00:	d004      	beq.n	8107a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107a02:	697b      	ldr	r3, [r7, #20]
 8107a04:	6a1b      	ldr	r3, [r3, #32]
 8107a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8107a08:	4313      	orrs	r3, r2
 8107a0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107a0c:	697b      	ldr	r3, [r7, #20]
 8107a0e:	681b      	ldr	r3, [r3, #0]
 8107a10:	689b      	ldr	r3, [r3, #8]
 8107a12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8107a16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8107a1a:	697a      	ldr	r2, [r7, #20]
 8107a1c:	6812      	ldr	r2, [r2, #0]
 8107a1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8107a20:	430b      	orrs	r3, r1
 8107a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107a24:	697b      	ldr	r3, [r7, #20]
 8107a26:	681b      	ldr	r3, [r3, #0]
 8107a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107a2a:	f023 010f 	bic.w	r1, r3, #15
 8107a2e:	697b      	ldr	r3, [r7, #20]
 8107a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8107a32:	697b      	ldr	r3, [r7, #20]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	430a      	orrs	r2, r1
 8107a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107a3a:	697b      	ldr	r3, [r7, #20]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	4aa3      	ldr	r2, [pc, #652]	@ (8107ccc <UART_SetConfig+0x32c>)
 8107a40:	4293      	cmp	r3, r2
 8107a42:	d177      	bne.n	8107b34 <UART_SetConfig+0x194>
 8107a44:	4ba2      	ldr	r3, [pc, #648]	@ (8107cd0 <UART_SetConfig+0x330>)
 8107a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8107a4c:	2b28      	cmp	r3, #40	@ 0x28
 8107a4e:	d86d      	bhi.n	8107b2c <UART_SetConfig+0x18c>
 8107a50:	a201      	add	r2, pc, #4	@ (adr r2, 8107a58 <UART_SetConfig+0xb8>)
 8107a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a56:	bf00      	nop
 8107a58:	08107afd 	.word	0x08107afd
 8107a5c:	08107b2d 	.word	0x08107b2d
 8107a60:	08107b2d 	.word	0x08107b2d
 8107a64:	08107b2d 	.word	0x08107b2d
 8107a68:	08107b2d 	.word	0x08107b2d
 8107a6c:	08107b2d 	.word	0x08107b2d
 8107a70:	08107b2d 	.word	0x08107b2d
 8107a74:	08107b2d 	.word	0x08107b2d
 8107a78:	08107b05 	.word	0x08107b05
 8107a7c:	08107b2d 	.word	0x08107b2d
 8107a80:	08107b2d 	.word	0x08107b2d
 8107a84:	08107b2d 	.word	0x08107b2d
 8107a88:	08107b2d 	.word	0x08107b2d
 8107a8c:	08107b2d 	.word	0x08107b2d
 8107a90:	08107b2d 	.word	0x08107b2d
 8107a94:	08107b2d 	.word	0x08107b2d
 8107a98:	08107b0d 	.word	0x08107b0d
 8107a9c:	08107b2d 	.word	0x08107b2d
 8107aa0:	08107b2d 	.word	0x08107b2d
 8107aa4:	08107b2d 	.word	0x08107b2d
 8107aa8:	08107b2d 	.word	0x08107b2d
 8107aac:	08107b2d 	.word	0x08107b2d
 8107ab0:	08107b2d 	.word	0x08107b2d
 8107ab4:	08107b2d 	.word	0x08107b2d
 8107ab8:	08107b15 	.word	0x08107b15
 8107abc:	08107b2d 	.word	0x08107b2d
 8107ac0:	08107b2d 	.word	0x08107b2d
 8107ac4:	08107b2d 	.word	0x08107b2d
 8107ac8:	08107b2d 	.word	0x08107b2d
 8107acc:	08107b2d 	.word	0x08107b2d
 8107ad0:	08107b2d 	.word	0x08107b2d
 8107ad4:	08107b2d 	.word	0x08107b2d
 8107ad8:	08107b1d 	.word	0x08107b1d
 8107adc:	08107b2d 	.word	0x08107b2d
 8107ae0:	08107b2d 	.word	0x08107b2d
 8107ae4:	08107b2d 	.word	0x08107b2d
 8107ae8:	08107b2d 	.word	0x08107b2d
 8107aec:	08107b2d 	.word	0x08107b2d
 8107af0:	08107b2d 	.word	0x08107b2d
 8107af4:	08107b2d 	.word	0x08107b2d
 8107af8:	08107b25 	.word	0x08107b25
 8107afc:	2301      	movs	r3, #1
 8107afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b02:	e220      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b04:	2304      	movs	r3, #4
 8107b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b0a:	e21c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b0c:	2308      	movs	r3, #8
 8107b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b12:	e218      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b14:	2310      	movs	r3, #16
 8107b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b1a:	e214      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b1c:	2320      	movs	r3, #32
 8107b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b22:	e210      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b24:	2340      	movs	r3, #64	@ 0x40
 8107b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b2a:	e20c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b2c:	2380      	movs	r3, #128	@ 0x80
 8107b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b32:	e208      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b34:	697b      	ldr	r3, [r7, #20]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	4a66      	ldr	r2, [pc, #408]	@ (8107cd4 <UART_SetConfig+0x334>)
 8107b3a:	4293      	cmp	r3, r2
 8107b3c:	d130      	bne.n	8107ba0 <UART_SetConfig+0x200>
 8107b3e:	4b64      	ldr	r3, [pc, #400]	@ (8107cd0 <UART_SetConfig+0x330>)
 8107b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107b42:	f003 0307 	and.w	r3, r3, #7
 8107b46:	2b05      	cmp	r3, #5
 8107b48:	d826      	bhi.n	8107b98 <UART_SetConfig+0x1f8>
 8107b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8107b50 <UART_SetConfig+0x1b0>)
 8107b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b50:	08107b69 	.word	0x08107b69
 8107b54:	08107b71 	.word	0x08107b71
 8107b58:	08107b79 	.word	0x08107b79
 8107b5c:	08107b81 	.word	0x08107b81
 8107b60:	08107b89 	.word	0x08107b89
 8107b64:	08107b91 	.word	0x08107b91
 8107b68:	2300      	movs	r3, #0
 8107b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b6e:	e1ea      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b70:	2304      	movs	r3, #4
 8107b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b76:	e1e6      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b78:	2308      	movs	r3, #8
 8107b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b7e:	e1e2      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b80:	2310      	movs	r3, #16
 8107b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b86:	e1de      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b88:	2320      	movs	r3, #32
 8107b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b8e:	e1da      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b90:	2340      	movs	r3, #64	@ 0x40
 8107b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b96:	e1d6      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107b98:	2380      	movs	r3, #128	@ 0x80
 8107b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107b9e:	e1d2      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ba0:	697b      	ldr	r3, [r7, #20]
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	4a4c      	ldr	r2, [pc, #304]	@ (8107cd8 <UART_SetConfig+0x338>)
 8107ba6:	4293      	cmp	r3, r2
 8107ba8:	d130      	bne.n	8107c0c <UART_SetConfig+0x26c>
 8107baa:	4b49      	ldr	r3, [pc, #292]	@ (8107cd0 <UART_SetConfig+0x330>)
 8107bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107bae:	f003 0307 	and.w	r3, r3, #7
 8107bb2:	2b05      	cmp	r3, #5
 8107bb4:	d826      	bhi.n	8107c04 <UART_SetConfig+0x264>
 8107bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8107bbc <UART_SetConfig+0x21c>)
 8107bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107bbc:	08107bd5 	.word	0x08107bd5
 8107bc0:	08107bdd 	.word	0x08107bdd
 8107bc4:	08107be5 	.word	0x08107be5
 8107bc8:	08107bed 	.word	0x08107bed
 8107bcc:	08107bf5 	.word	0x08107bf5
 8107bd0:	08107bfd 	.word	0x08107bfd
 8107bd4:	2300      	movs	r3, #0
 8107bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107bda:	e1b4      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107bdc:	2304      	movs	r3, #4
 8107bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107be2:	e1b0      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107be4:	2308      	movs	r3, #8
 8107be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107bea:	e1ac      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107bec:	2310      	movs	r3, #16
 8107bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107bf2:	e1a8      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107bf4:	2320      	movs	r3, #32
 8107bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107bfa:	e1a4      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107bfc:	2340      	movs	r3, #64	@ 0x40
 8107bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c02:	e1a0      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c04:	2380      	movs	r3, #128	@ 0x80
 8107c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c0a:	e19c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c0c:	697b      	ldr	r3, [r7, #20]
 8107c0e:	681b      	ldr	r3, [r3, #0]
 8107c10:	4a32      	ldr	r2, [pc, #200]	@ (8107cdc <UART_SetConfig+0x33c>)
 8107c12:	4293      	cmp	r3, r2
 8107c14:	d130      	bne.n	8107c78 <UART_SetConfig+0x2d8>
 8107c16:	4b2e      	ldr	r3, [pc, #184]	@ (8107cd0 <UART_SetConfig+0x330>)
 8107c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107c1a:	f003 0307 	and.w	r3, r3, #7
 8107c1e:	2b05      	cmp	r3, #5
 8107c20:	d826      	bhi.n	8107c70 <UART_SetConfig+0x2d0>
 8107c22:	a201      	add	r2, pc, #4	@ (adr r2, 8107c28 <UART_SetConfig+0x288>)
 8107c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c28:	08107c41 	.word	0x08107c41
 8107c2c:	08107c49 	.word	0x08107c49
 8107c30:	08107c51 	.word	0x08107c51
 8107c34:	08107c59 	.word	0x08107c59
 8107c38:	08107c61 	.word	0x08107c61
 8107c3c:	08107c69 	.word	0x08107c69
 8107c40:	2300      	movs	r3, #0
 8107c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c46:	e17e      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c48:	2304      	movs	r3, #4
 8107c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c4e:	e17a      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c50:	2308      	movs	r3, #8
 8107c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c56:	e176      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c58:	2310      	movs	r3, #16
 8107c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c5e:	e172      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c60:	2320      	movs	r3, #32
 8107c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c66:	e16e      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c68:	2340      	movs	r3, #64	@ 0x40
 8107c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c6e:	e16a      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c70:	2380      	movs	r3, #128	@ 0x80
 8107c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107c76:	e166      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107c78:	697b      	ldr	r3, [r7, #20]
 8107c7a:	681b      	ldr	r3, [r3, #0]
 8107c7c:	4a18      	ldr	r2, [pc, #96]	@ (8107ce0 <UART_SetConfig+0x340>)
 8107c7e:	4293      	cmp	r3, r2
 8107c80:	d140      	bne.n	8107d04 <UART_SetConfig+0x364>
 8107c82:	4b13      	ldr	r3, [pc, #76]	@ (8107cd0 <UART_SetConfig+0x330>)
 8107c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107c86:	f003 0307 	and.w	r3, r3, #7
 8107c8a:	2b05      	cmp	r3, #5
 8107c8c:	d836      	bhi.n	8107cfc <UART_SetConfig+0x35c>
 8107c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8107c94 <UART_SetConfig+0x2f4>)
 8107c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c94:	08107cad 	.word	0x08107cad
 8107c98:	08107cb5 	.word	0x08107cb5
 8107c9c:	08107cbd 	.word	0x08107cbd
 8107ca0:	08107ce5 	.word	0x08107ce5
 8107ca4:	08107ced 	.word	0x08107ced
 8107ca8:	08107cf5 	.word	0x08107cf5
 8107cac:	2300      	movs	r3, #0
 8107cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cb2:	e148      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cb4:	2304      	movs	r3, #4
 8107cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cba:	e144      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cbc:	2308      	movs	r3, #8
 8107cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cc2:	e140      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cc4:	cfff69f3 	.word	0xcfff69f3
 8107cc8:	58000c00 	.word	0x58000c00
 8107ccc:	40011000 	.word	0x40011000
 8107cd0:	58024400 	.word	0x58024400
 8107cd4:	40004400 	.word	0x40004400
 8107cd8:	40004800 	.word	0x40004800
 8107cdc:	40004c00 	.word	0x40004c00
 8107ce0:	40005000 	.word	0x40005000
 8107ce4:	2310      	movs	r3, #16
 8107ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cea:	e12c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cec:	2320      	movs	r3, #32
 8107cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cf2:	e128      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cf4:	2340      	movs	r3, #64	@ 0x40
 8107cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107cfa:	e124      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107cfc:	2380      	movs	r3, #128	@ 0x80
 8107cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107d02:	e120      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107d04:	697b      	ldr	r3, [r7, #20]
 8107d06:	681b      	ldr	r3, [r3, #0]
 8107d08:	4acb      	ldr	r2, [pc, #812]	@ (8108038 <UART_SetConfig+0x698>)
 8107d0a:	4293      	cmp	r3, r2
 8107d0c:	d176      	bne.n	8107dfc <UART_SetConfig+0x45c>
 8107d0e:	4bcb      	ldr	r3, [pc, #812]	@ (810803c <UART_SetConfig+0x69c>)
 8107d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8107d16:	2b28      	cmp	r3, #40	@ 0x28
 8107d18:	d86c      	bhi.n	8107df4 <UART_SetConfig+0x454>
 8107d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8107d20 <UART_SetConfig+0x380>)
 8107d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d20:	08107dc5 	.word	0x08107dc5
 8107d24:	08107df5 	.word	0x08107df5
 8107d28:	08107df5 	.word	0x08107df5
 8107d2c:	08107df5 	.word	0x08107df5
 8107d30:	08107df5 	.word	0x08107df5
 8107d34:	08107df5 	.word	0x08107df5
 8107d38:	08107df5 	.word	0x08107df5
 8107d3c:	08107df5 	.word	0x08107df5
 8107d40:	08107dcd 	.word	0x08107dcd
 8107d44:	08107df5 	.word	0x08107df5
 8107d48:	08107df5 	.word	0x08107df5
 8107d4c:	08107df5 	.word	0x08107df5
 8107d50:	08107df5 	.word	0x08107df5
 8107d54:	08107df5 	.word	0x08107df5
 8107d58:	08107df5 	.word	0x08107df5
 8107d5c:	08107df5 	.word	0x08107df5
 8107d60:	08107dd5 	.word	0x08107dd5
 8107d64:	08107df5 	.word	0x08107df5
 8107d68:	08107df5 	.word	0x08107df5
 8107d6c:	08107df5 	.word	0x08107df5
 8107d70:	08107df5 	.word	0x08107df5
 8107d74:	08107df5 	.word	0x08107df5
 8107d78:	08107df5 	.word	0x08107df5
 8107d7c:	08107df5 	.word	0x08107df5
 8107d80:	08107ddd 	.word	0x08107ddd
 8107d84:	08107df5 	.word	0x08107df5
 8107d88:	08107df5 	.word	0x08107df5
 8107d8c:	08107df5 	.word	0x08107df5
 8107d90:	08107df5 	.word	0x08107df5
 8107d94:	08107df5 	.word	0x08107df5
 8107d98:	08107df5 	.word	0x08107df5
 8107d9c:	08107df5 	.word	0x08107df5
 8107da0:	08107de5 	.word	0x08107de5
 8107da4:	08107df5 	.word	0x08107df5
 8107da8:	08107df5 	.word	0x08107df5
 8107dac:	08107df5 	.word	0x08107df5
 8107db0:	08107df5 	.word	0x08107df5
 8107db4:	08107df5 	.word	0x08107df5
 8107db8:	08107df5 	.word	0x08107df5
 8107dbc:	08107df5 	.word	0x08107df5
 8107dc0:	08107ded 	.word	0x08107ded
 8107dc4:	2301      	movs	r3, #1
 8107dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107dca:	e0bc      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107dcc:	2304      	movs	r3, #4
 8107dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107dd2:	e0b8      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107dd4:	2308      	movs	r3, #8
 8107dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107dda:	e0b4      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ddc:	2310      	movs	r3, #16
 8107dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107de2:	e0b0      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107de4:	2320      	movs	r3, #32
 8107de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107dea:	e0ac      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107dec:	2340      	movs	r3, #64	@ 0x40
 8107dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107df2:	e0a8      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107df4:	2380      	movs	r3, #128	@ 0x80
 8107df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107dfa:	e0a4      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107dfc:	697b      	ldr	r3, [r7, #20]
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	4a8f      	ldr	r2, [pc, #572]	@ (8108040 <UART_SetConfig+0x6a0>)
 8107e02:	4293      	cmp	r3, r2
 8107e04:	d130      	bne.n	8107e68 <UART_SetConfig+0x4c8>
 8107e06:	4b8d      	ldr	r3, [pc, #564]	@ (810803c <UART_SetConfig+0x69c>)
 8107e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e0a:	f003 0307 	and.w	r3, r3, #7
 8107e0e:	2b05      	cmp	r3, #5
 8107e10:	d826      	bhi.n	8107e60 <UART_SetConfig+0x4c0>
 8107e12:	a201      	add	r2, pc, #4	@ (adr r2, 8107e18 <UART_SetConfig+0x478>)
 8107e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e18:	08107e31 	.word	0x08107e31
 8107e1c:	08107e39 	.word	0x08107e39
 8107e20:	08107e41 	.word	0x08107e41
 8107e24:	08107e49 	.word	0x08107e49
 8107e28:	08107e51 	.word	0x08107e51
 8107e2c:	08107e59 	.word	0x08107e59
 8107e30:	2300      	movs	r3, #0
 8107e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e36:	e086      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e38:	2304      	movs	r3, #4
 8107e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e3e:	e082      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e40:	2308      	movs	r3, #8
 8107e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e46:	e07e      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e48:	2310      	movs	r3, #16
 8107e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e4e:	e07a      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e50:	2320      	movs	r3, #32
 8107e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e56:	e076      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e58:	2340      	movs	r3, #64	@ 0x40
 8107e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e5e:	e072      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e60:	2380      	movs	r3, #128	@ 0x80
 8107e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107e66:	e06e      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107e68:	697b      	ldr	r3, [r7, #20]
 8107e6a:	681b      	ldr	r3, [r3, #0]
 8107e6c:	4a75      	ldr	r2, [pc, #468]	@ (8108044 <UART_SetConfig+0x6a4>)
 8107e6e:	4293      	cmp	r3, r2
 8107e70:	d130      	bne.n	8107ed4 <UART_SetConfig+0x534>
 8107e72:	4b72      	ldr	r3, [pc, #456]	@ (810803c <UART_SetConfig+0x69c>)
 8107e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e76:	f003 0307 	and.w	r3, r3, #7
 8107e7a:	2b05      	cmp	r3, #5
 8107e7c:	d826      	bhi.n	8107ecc <UART_SetConfig+0x52c>
 8107e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8107e84 <UART_SetConfig+0x4e4>)
 8107e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e84:	08107e9d 	.word	0x08107e9d
 8107e88:	08107ea5 	.word	0x08107ea5
 8107e8c:	08107ead 	.word	0x08107ead
 8107e90:	08107eb5 	.word	0x08107eb5
 8107e94:	08107ebd 	.word	0x08107ebd
 8107e98:	08107ec5 	.word	0x08107ec5
 8107e9c:	2300      	movs	r3, #0
 8107e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107ea2:	e050      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ea4:	2304      	movs	r3, #4
 8107ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107eaa:	e04c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107eac:	2308      	movs	r3, #8
 8107eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107eb2:	e048      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107eb4:	2310      	movs	r3, #16
 8107eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107eba:	e044      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ebc:	2320      	movs	r3, #32
 8107ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107ec2:	e040      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ec4:	2340      	movs	r3, #64	@ 0x40
 8107ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107eca:	e03c      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ecc:	2380      	movs	r3, #128	@ 0x80
 8107ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107ed2:	e038      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107ed4:	697b      	ldr	r3, [r7, #20]
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8108048 <UART_SetConfig+0x6a8>)
 8107eda:	4293      	cmp	r3, r2
 8107edc:	d130      	bne.n	8107f40 <UART_SetConfig+0x5a0>
 8107ede:	4b57      	ldr	r3, [pc, #348]	@ (810803c <UART_SetConfig+0x69c>)
 8107ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ee2:	f003 0307 	and.w	r3, r3, #7
 8107ee6:	2b05      	cmp	r3, #5
 8107ee8:	d826      	bhi.n	8107f38 <UART_SetConfig+0x598>
 8107eea:	a201      	add	r2, pc, #4	@ (adr r2, 8107ef0 <UART_SetConfig+0x550>)
 8107eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ef0:	08107f09 	.word	0x08107f09
 8107ef4:	08107f11 	.word	0x08107f11
 8107ef8:	08107f19 	.word	0x08107f19
 8107efc:	08107f21 	.word	0x08107f21
 8107f00:	08107f29 	.word	0x08107f29
 8107f04:	08107f31 	.word	0x08107f31
 8107f08:	2302      	movs	r3, #2
 8107f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f0e:	e01a      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f10:	2304      	movs	r3, #4
 8107f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f16:	e016      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f18:	2308      	movs	r3, #8
 8107f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f1e:	e012      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f20:	2310      	movs	r3, #16
 8107f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f26:	e00e      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f28:	2320      	movs	r3, #32
 8107f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f2e:	e00a      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f30:	2340      	movs	r3, #64	@ 0x40
 8107f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f36:	e006      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f38:	2380      	movs	r3, #128	@ 0x80
 8107f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107f3e:	e002      	b.n	8107f46 <UART_SetConfig+0x5a6>
 8107f40:	2380      	movs	r3, #128	@ 0x80
 8107f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107f46:	697b      	ldr	r3, [r7, #20]
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8108048 <UART_SetConfig+0x6a8>)
 8107f4c:	4293      	cmp	r3, r2
 8107f4e:	f040 80f8 	bne.w	8108142 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8107f56:	2b20      	cmp	r3, #32
 8107f58:	dc46      	bgt.n	8107fe8 <UART_SetConfig+0x648>
 8107f5a:	2b02      	cmp	r3, #2
 8107f5c:	f2c0 8082 	blt.w	8108064 <UART_SetConfig+0x6c4>
 8107f60:	3b02      	subs	r3, #2
 8107f62:	2b1e      	cmp	r3, #30
 8107f64:	d87e      	bhi.n	8108064 <UART_SetConfig+0x6c4>
 8107f66:	a201      	add	r2, pc, #4	@ (adr r2, 8107f6c <UART_SetConfig+0x5cc>)
 8107f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f6c:	08107fef 	.word	0x08107fef
 8107f70:	08108065 	.word	0x08108065
 8107f74:	08107ff7 	.word	0x08107ff7
 8107f78:	08108065 	.word	0x08108065
 8107f7c:	08108065 	.word	0x08108065
 8107f80:	08108065 	.word	0x08108065
 8107f84:	08108007 	.word	0x08108007
 8107f88:	08108065 	.word	0x08108065
 8107f8c:	08108065 	.word	0x08108065
 8107f90:	08108065 	.word	0x08108065
 8107f94:	08108065 	.word	0x08108065
 8107f98:	08108065 	.word	0x08108065
 8107f9c:	08108065 	.word	0x08108065
 8107fa0:	08108065 	.word	0x08108065
 8107fa4:	08108017 	.word	0x08108017
 8107fa8:	08108065 	.word	0x08108065
 8107fac:	08108065 	.word	0x08108065
 8107fb0:	08108065 	.word	0x08108065
 8107fb4:	08108065 	.word	0x08108065
 8107fb8:	08108065 	.word	0x08108065
 8107fbc:	08108065 	.word	0x08108065
 8107fc0:	08108065 	.word	0x08108065
 8107fc4:	08108065 	.word	0x08108065
 8107fc8:	08108065 	.word	0x08108065
 8107fcc:	08108065 	.word	0x08108065
 8107fd0:	08108065 	.word	0x08108065
 8107fd4:	08108065 	.word	0x08108065
 8107fd8:	08108065 	.word	0x08108065
 8107fdc:	08108065 	.word	0x08108065
 8107fe0:	08108065 	.word	0x08108065
 8107fe4:	08108057 	.word	0x08108057
 8107fe8:	2b40      	cmp	r3, #64	@ 0x40
 8107fea:	d037      	beq.n	810805c <UART_SetConfig+0x6bc>
 8107fec:	e03a      	b.n	8108064 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107fee:	f7fe fbf3 	bl	81067d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8107ff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107ff4:	e03c      	b.n	8108070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107ffa:	4618      	mov	r0, r3
 8107ffc:	f7fe fc02 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108004:	e034      	b.n	8108070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108006:	f107 0318 	add.w	r3, r7, #24
 810800a:	4618      	mov	r0, r3
 810800c:	f7fe fd4e 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108010:	69fb      	ldr	r3, [r7, #28]
 8108012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108014:	e02c      	b.n	8108070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108016:	4b09      	ldr	r3, [pc, #36]	@ (810803c <UART_SetConfig+0x69c>)
 8108018:	681b      	ldr	r3, [r3, #0]
 810801a:	f003 0320 	and.w	r3, r3, #32
 810801e:	2b00      	cmp	r3, #0
 8108020:	d016      	beq.n	8108050 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108022:	4b06      	ldr	r3, [pc, #24]	@ (810803c <UART_SetConfig+0x69c>)
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	08db      	lsrs	r3, r3, #3
 8108028:	f003 0303 	and.w	r3, r3, #3
 810802c:	4a07      	ldr	r2, [pc, #28]	@ (810804c <UART_SetConfig+0x6ac>)
 810802e:	fa22 f303 	lsr.w	r3, r2, r3
 8108032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108034:	e01c      	b.n	8108070 <UART_SetConfig+0x6d0>
 8108036:	bf00      	nop
 8108038:	40011400 	.word	0x40011400
 810803c:	58024400 	.word	0x58024400
 8108040:	40007800 	.word	0x40007800
 8108044:	40007c00 	.word	0x40007c00
 8108048:	58000c00 	.word	0x58000c00
 810804c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108050:	4b9d      	ldr	r3, [pc, #628]	@ (81082c8 <UART_SetConfig+0x928>)
 8108052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108054:	e00c      	b.n	8108070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108056:	4b9d      	ldr	r3, [pc, #628]	@ (81082cc <UART_SetConfig+0x92c>)
 8108058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810805a:	e009      	b.n	8108070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810805c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108062:	e005      	b.n	8108070 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108064:	2300      	movs	r3, #0
 8108066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108068:	2301      	movs	r3, #1
 810806a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810806e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108072:	2b00      	cmp	r3, #0
 8108074:	f000 81de 	beq.w	8108434 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108078:	697b      	ldr	r3, [r7, #20]
 810807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810807c:	4a94      	ldr	r2, [pc, #592]	@ (81082d0 <UART_SetConfig+0x930>)
 810807e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108082:	461a      	mov	r2, r3
 8108084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108086:	fbb3 f3f2 	udiv	r3, r3, r2
 810808a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810808c:	697b      	ldr	r3, [r7, #20]
 810808e:	685a      	ldr	r2, [r3, #4]
 8108090:	4613      	mov	r3, r2
 8108092:	005b      	lsls	r3, r3, #1
 8108094:	4413      	add	r3, r2
 8108096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108098:	429a      	cmp	r2, r3
 810809a:	d305      	bcc.n	81080a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810809c:	697b      	ldr	r3, [r7, #20]
 810809e:	685b      	ldr	r3, [r3, #4]
 81080a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81080a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81080a4:	429a      	cmp	r2, r3
 81080a6:	d903      	bls.n	81080b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81080a8:	2301      	movs	r3, #1
 81080aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81080ae:	e1c1      	b.n	8108434 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81080b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81080b2:	2200      	movs	r2, #0
 81080b4:	60bb      	str	r3, [r7, #8]
 81080b6:	60fa      	str	r2, [r7, #12]
 81080b8:	697b      	ldr	r3, [r7, #20]
 81080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81080bc:	4a84      	ldr	r2, [pc, #528]	@ (81082d0 <UART_SetConfig+0x930>)
 81080be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81080c2:	b29b      	uxth	r3, r3
 81080c4:	2200      	movs	r2, #0
 81080c6:	603b      	str	r3, [r7, #0]
 81080c8:	607a      	str	r2, [r7, #4]
 81080ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 81080ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81080d2:	f7f8 f901 	bl	81002d8 <__aeabi_uldivmod>
 81080d6:	4602      	mov	r2, r0
 81080d8:	460b      	mov	r3, r1
 81080da:	4610      	mov	r0, r2
 81080dc:	4619      	mov	r1, r3
 81080de:	f04f 0200 	mov.w	r2, #0
 81080e2:	f04f 0300 	mov.w	r3, #0
 81080e6:	020b      	lsls	r3, r1, #8
 81080e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81080ec:	0202      	lsls	r2, r0, #8
 81080ee:	6979      	ldr	r1, [r7, #20]
 81080f0:	6849      	ldr	r1, [r1, #4]
 81080f2:	0849      	lsrs	r1, r1, #1
 81080f4:	2000      	movs	r0, #0
 81080f6:	460c      	mov	r4, r1
 81080f8:	4605      	mov	r5, r0
 81080fa:	eb12 0804 	adds.w	r8, r2, r4
 81080fe:	eb43 0905 	adc.w	r9, r3, r5
 8108102:	697b      	ldr	r3, [r7, #20]
 8108104:	685b      	ldr	r3, [r3, #4]
 8108106:	2200      	movs	r2, #0
 8108108:	469a      	mov	sl, r3
 810810a:	4693      	mov	fp, r2
 810810c:	4652      	mov	r2, sl
 810810e:	465b      	mov	r3, fp
 8108110:	4640      	mov	r0, r8
 8108112:	4649      	mov	r1, r9
 8108114:	f7f8 f8e0 	bl	81002d8 <__aeabi_uldivmod>
 8108118:	4602      	mov	r2, r0
 810811a:	460b      	mov	r3, r1
 810811c:	4613      	mov	r3, r2
 810811e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108126:	d308      	bcc.n	810813a <UART_SetConfig+0x79a>
 8108128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810812a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810812e:	d204      	bcs.n	810813a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108130:	697b      	ldr	r3, [r7, #20]
 8108132:	681b      	ldr	r3, [r3, #0]
 8108134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108136:	60da      	str	r2, [r3, #12]
 8108138:	e17c      	b.n	8108434 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810813a:	2301      	movs	r3, #1
 810813c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108140:	e178      	b.n	8108434 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108142:	697b      	ldr	r3, [r7, #20]
 8108144:	69db      	ldr	r3, [r3, #28]
 8108146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810814a:	f040 80c5 	bne.w	81082d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810814e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108152:	2b20      	cmp	r3, #32
 8108154:	dc48      	bgt.n	81081e8 <UART_SetConfig+0x848>
 8108156:	2b00      	cmp	r3, #0
 8108158:	db7b      	blt.n	8108252 <UART_SetConfig+0x8b2>
 810815a:	2b20      	cmp	r3, #32
 810815c:	d879      	bhi.n	8108252 <UART_SetConfig+0x8b2>
 810815e:	a201      	add	r2, pc, #4	@ (adr r2, 8108164 <UART_SetConfig+0x7c4>)
 8108160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108164:	081081ef 	.word	0x081081ef
 8108168:	081081f7 	.word	0x081081f7
 810816c:	08108253 	.word	0x08108253
 8108170:	08108253 	.word	0x08108253
 8108174:	081081ff 	.word	0x081081ff
 8108178:	08108253 	.word	0x08108253
 810817c:	08108253 	.word	0x08108253
 8108180:	08108253 	.word	0x08108253
 8108184:	0810820f 	.word	0x0810820f
 8108188:	08108253 	.word	0x08108253
 810818c:	08108253 	.word	0x08108253
 8108190:	08108253 	.word	0x08108253
 8108194:	08108253 	.word	0x08108253
 8108198:	08108253 	.word	0x08108253
 810819c:	08108253 	.word	0x08108253
 81081a0:	08108253 	.word	0x08108253
 81081a4:	0810821f 	.word	0x0810821f
 81081a8:	08108253 	.word	0x08108253
 81081ac:	08108253 	.word	0x08108253
 81081b0:	08108253 	.word	0x08108253
 81081b4:	08108253 	.word	0x08108253
 81081b8:	08108253 	.word	0x08108253
 81081bc:	08108253 	.word	0x08108253
 81081c0:	08108253 	.word	0x08108253
 81081c4:	08108253 	.word	0x08108253
 81081c8:	08108253 	.word	0x08108253
 81081cc:	08108253 	.word	0x08108253
 81081d0:	08108253 	.word	0x08108253
 81081d4:	08108253 	.word	0x08108253
 81081d8:	08108253 	.word	0x08108253
 81081dc:	08108253 	.word	0x08108253
 81081e0:	08108253 	.word	0x08108253
 81081e4:	08108245 	.word	0x08108245
 81081e8:	2b40      	cmp	r3, #64	@ 0x40
 81081ea:	d02e      	beq.n	810824a <UART_SetConfig+0x8aa>
 81081ec:	e031      	b.n	8108252 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81081ee:	f7fc fb3d 	bl	810486c <HAL_RCC_GetPCLK1Freq>
 81081f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81081f4:	e033      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81081f6:	f7fc fb4f 	bl	8104898 <HAL_RCC_GetPCLK2Freq>
 81081fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81081fc:	e02f      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108202:	4618      	mov	r0, r3
 8108204:	f7fe fafe 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810820c:	e027      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810820e:	f107 0318 	add.w	r3, r7, #24
 8108212:	4618      	mov	r0, r3
 8108214:	f7fe fc4a 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108218:	69fb      	ldr	r3, [r7, #28]
 810821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810821c:	e01f      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810821e:	4b2d      	ldr	r3, [pc, #180]	@ (81082d4 <UART_SetConfig+0x934>)
 8108220:	681b      	ldr	r3, [r3, #0]
 8108222:	f003 0320 	and.w	r3, r3, #32
 8108226:	2b00      	cmp	r3, #0
 8108228:	d009      	beq.n	810823e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810822a:	4b2a      	ldr	r3, [pc, #168]	@ (81082d4 <UART_SetConfig+0x934>)
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	08db      	lsrs	r3, r3, #3
 8108230:	f003 0303 	and.w	r3, r3, #3
 8108234:	4a24      	ldr	r2, [pc, #144]	@ (81082c8 <UART_SetConfig+0x928>)
 8108236:	fa22 f303 	lsr.w	r3, r2, r3
 810823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810823c:	e00f      	b.n	810825e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810823e:	4b22      	ldr	r3, [pc, #136]	@ (81082c8 <UART_SetConfig+0x928>)
 8108240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108242:	e00c      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108244:	4b21      	ldr	r3, [pc, #132]	@ (81082cc <UART_SetConfig+0x92c>)
 8108246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108248:	e009      	b.n	810825e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810824a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108250:	e005      	b.n	810825e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108252:	2300      	movs	r3, #0
 8108254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108256:	2301      	movs	r3, #1
 8108258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810825c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108260:	2b00      	cmp	r3, #0
 8108262:	f000 80e7 	beq.w	8108434 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108266:	697b      	ldr	r3, [r7, #20]
 8108268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810826a:	4a19      	ldr	r2, [pc, #100]	@ (81082d0 <UART_SetConfig+0x930>)
 810826c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108270:	461a      	mov	r2, r3
 8108272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108274:	fbb3 f3f2 	udiv	r3, r3, r2
 8108278:	005a      	lsls	r2, r3, #1
 810827a:	697b      	ldr	r3, [r7, #20]
 810827c:	685b      	ldr	r3, [r3, #4]
 810827e:	085b      	lsrs	r3, r3, #1
 8108280:	441a      	add	r2, r3
 8108282:	697b      	ldr	r3, [r7, #20]
 8108284:	685b      	ldr	r3, [r3, #4]
 8108286:	fbb2 f3f3 	udiv	r3, r2, r3
 810828a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810828c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810828e:	2b0f      	cmp	r3, #15
 8108290:	d916      	bls.n	81082c0 <UART_SetConfig+0x920>
 8108292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108298:	d212      	bcs.n	81082c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810829c:	b29b      	uxth	r3, r3
 810829e:	f023 030f 	bic.w	r3, r3, #15
 81082a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082a6:	085b      	lsrs	r3, r3, #1
 81082a8:	b29b      	uxth	r3, r3
 81082aa:	f003 0307 	and.w	r3, r3, #7
 81082ae:	b29a      	uxth	r2, r3
 81082b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 81082b2:	4313      	orrs	r3, r2
 81082b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 81082b6:	697b      	ldr	r3, [r7, #20]
 81082b8:	681b      	ldr	r3, [r3, #0]
 81082ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 81082bc:	60da      	str	r2, [r3, #12]
 81082be:	e0b9      	b.n	8108434 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81082c0:	2301      	movs	r3, #1
 81082c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81082c6:	e0b5      	b.n	8108434 <UART_SetConfig+0xa94>
 81082c8:	03d09000 	.word	0x03d09000
 81082cc:	003d0900 	.word	0x003d0900
 81082d0:	08109ac4 	.word	0x08109ac4
 81082d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81082d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81082dc:	2b20      	cmp	r3, #32
 81082de:	dc49      	bgt.n	8108374 <UART_SetConfig+0x9d4>
 81082e0:	2b00      	cmp	r3, #0
 81082e2:	db7c      	blt.n	81083de <UART_SetConfig+0xa3e>
 81082e4:	2b20      	cmp	r3, #32
 81082e6:	d87a      	bhi.n	81083de <UART_SetConfig+0xa3e>
 81082e8:	a201      	add	r2, pc, #4	@ (adr r2, 81082f0 <UART_SetConfig+0x950>)
 81082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082ee:	bf00      	nop
 81082f0:	0810837b 	.word	0x0810837b
 81082f4:	08108383 	.word	0x08108383
 81082f8:	081083df 	.word	0x081083df
 81082fc:	081083df 	.word	0x081083df
 8108300:	0810838b 	.word	0x0810838b
 8108304:	081083df 	.word	0x081083df
 8108308:	081083df 	.word	0x081083df
 810830c:	081083df 	.word	0x081083df
 8108310:	0810839b 	.word	0x0810839b
 8108314:	081083df 	.word	0x081083df
 8108318:	081083df 	.word	0x081083df
 810831c:	081083df 	.word	0x081083df
 8108320:	081083df 	.word	0x081083df
 8108324:	081083df 	.word	0x081083df
 8108328:	081083df 	.word	0x081083df
 810832c:	081083df 	.word	0x081083df
 8108330:	081083ab 	.word	0x081083ab
 8108334:	081083df 	.word	0x081083df
 8108338:	081083df 	.word	0x081083df
 810833c:	081083df 	.word	0x081083df
 8108340:	081083df 	.word	0x081083df
 8108344:	081083df 	.word	0x081083df
 8108348:	081083df 	.word	0x081083df
 810834c:	081083df 	.word	0x081083df
 8108350:	081083df 	.word	0x081083df
 8108354:	081083df 	.word	0x081083df
 8108358:	081083df 	.word	0x081083df
 810835c:	081083df 	.word	0x081083df
 8108360:	081083df 	.word	0x081083df
 8108364:	081083df 	.word	0x081083df
 8108368:	081083df 	.word	0x081083df
 810836c:	081083df 	.word	0x081083df
 8108370:	081083d1 	.word	0x081083d1
 8108374:	2b40      	cmp	r3, #64	@ 0x40
 8108376:	d02e      	beq.n	81083d6 <UART_SetConfig+0xa36>
 8108378:	e031      	b.n	81083de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810837a:	f7fc fa77 	bl	810486c <HAL_RCC_GetPCLK1Freq>
 810837e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108380:	e033      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108382:	f7fc fa89 	bl	8104898 <HAL_RCC_GetPCLK2Freq>
 8108386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108388:	e02f      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810838a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810838e:	4618      	mov	r0, r3
 8108390:	f7fe fa38 	bl	8106804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108398:	e027      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810839a:	f107 0318 	add.w	r3, r7, #24
 810839e:	4618      	mov	r0, r3
 81083a0:	f7fe fb84 	bl	8106aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81083a4:	69fb      	ldr	r3, [r7, #28]
 81083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083a8:	e01f      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81083aa:	4b2d      	ldr	r3, [pc, #180]	@ (8108460 <UART_SetConfig+0xac0>)
 81083ac:	681b      	ldr	r3, [r3, #0]
 81083ae:	f003 0320 	and.w	r3, r3, #32
 81083b2:	2b00      	cmp	r3, #0
 81083b4:	d009      	beq.n	81083ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81083b6:	4b2a      	ldr	r3, [pc, #168]	@ (8108460 <UART_SetConfig+0xac0>)
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	08db      	lsrs	r3, r3, #3
 81083bc:	f003 0303 	and.w	r3, r3, #3
 81083c0:	4a28      	ldr	r2, [pc, #160]	@ (8108464 <UART_SetConfig+0xac4>)
 81083c2:	fa22 f303 	lsr.w	r3, r2, r3
 81083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81083c8:	e00f      	b.n	81083ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81083ca:	4b26      	ldr	r3, [pc, #152]	@ (8108464 <UART_SetConfig+0xac4>)
 81083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083ce:	e00c      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81083d0:	4b25      	ldr	r3, [pc, #148]	@ (8108468 <UART_SetConfig+0xac8>)
 81083d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083d4:	e009      	b.n	81083ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81083d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083dc:	e005      	b.n	81083ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81083de:	2300      	movs	r3, #0
 81083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81083e2:	2301      	movs	r3, #1
 81083e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81083e8:	bf00      	nop
    }

    if (pclk != 0U)
 81083ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81083ec:	2b00      	cmp	r3, #0
 81083ee:	d021      	beq.n	8108434 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81083f0:	697b      	ldr	r3, [r7, #20]
 81083f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81083f4:	4a1d      	ldr	r2, [pc, #116]	@ (810846c <UART_SetConfig+0xacc>)
 81083f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81083fa:	461a      	mov	r2, r3
 81083fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81083fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8108402:	697b      	ldr	r3, [r7, #20]
 8108404:	685b      	ldr	r3, [r3, #4]
 8108406:	085b      	lsrs	r3, r3, #1
 8108408:	441a      	add	r2, r3
 810840a:	697b      	ldr	r3, [r7, #20]
 810840c:	685b      	ldr	r3, [r3, #4]
 810840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108412:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108416:	2b0f      	cmp	r3, #15
 8108418:	d909      	bls.n	810842e <UART_SetConfig+0xa8e>
 810841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810841c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108420:	d205      	bcs.n	810842e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108424:	b29a      	uxth	r2, r3
 8108426:	697b      	ldr	r3, [r7, #20]
 8108428:	681b      	ldr	r3, [r3, #0]
 810842a:	60da      	str	r2, [r3, #12]
 810842c:	e002      	b.n	8108434 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810842e:	2301      	movs	r3, #1
 8108430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108434:	697b      	ldr	r3, [r7, #20]
 8108436:	2201      	movs	r2, #1
 8108438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810843c:	697b      	ldr	r3, [r7, #20]
 810843e:	2201      	movs	r2, #1
 8108440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108444:	697b      	ldr	r3, [r7, #20]
 8108446:	2200      	movs	r2, #0
 8108448:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810844a:	697b      	ldr	r3, [r7, #20]
 810844c:	2200      	movs	r2, #0
 810844e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8108450:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8108454:	4618      	mov	r0, r3
 8108456:	3748      	adds	r7, #72	@ 0x48
 8108458:	46bd      	mov	sp, r7
 810845a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810845e:	bf00      	nop
 8108460:	58024400 	.word	0x58024400
 8108464:	03d09000 	.word	0x03d09000
 8108468:	003d0900 	.word	0x003d0900
 810846c:	08109ac4 	.word	0x08109ac4

08108470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108470:	b480      	push	{r7}
 8108472:	b083      	sub	sp, #12
 8108474:	af00      	add	r7, sp, #0
 8108476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810847c:	f003 0308 	and.w	r3, r3, #8
 8108480:	2b00      	cmp	r3, #0
 8108482:	d00a      	beq.n	810849a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	681b      	ldr	r3, [r3, #0]
 8108488:	685b      	ldr	r3, [r3, #4]
 810848a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810848e:	687b      	ldr	r3, [r7, #4]
 8108490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	430a      	orrs	r2, r1
 8108498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810849a:	687b      	ldr	r3, [r7, #4]
 810849c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810849e:	f003 0301 	and.w	r3, r3, #1
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d00a      	beq.n	81084bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	685b      	ldr	r3, [r3, #4]
 81084ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	430a      	orrs	r2, r1
 81084ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084c0:	f003 0302 	and.w	r3, r3, #2
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d00a      	beq.n	81084de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	681b      	ldr	r3, [r3, #0]
 81084cc:	685b      	ldr	r3, [r3, #4]
 81084ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81084d2:	687b      	ldr	r3, [r7, #4]
 81084d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81084d6:	687b      	ldr	r3, [r7, #4]
 81084d8:	681b      	ldr	r3, [r3, #0]
 81084da:	430a      	orrs	r2, r1
 81084dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81084de:	687b      	ldr	r3, [r7, #4]
 81084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084e2:	f003 0304 	and.w	r3, r3, #4
 81084e6:	2b00      	cmp	r3, #0
 81084e8:	d00a      	beq.n	8108500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81084ea:	687b      	ldr	r3, [r7, #4]
 81084ec:	681b      	ldr	r3, [r3, #0]
 81084ee:	685b      	ldr	r3, [r3, #4]
 81084f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	430a      	orrs	r2, r1
 81084fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108504:	f003 0310 	and.w	r3, r3, #16
 8108508:	2b00      	cmp	r3, #0
 810850a:	d00a      	beq.n	8108522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	681b      	ldr	r3, [r3, #0]
 8108510:	689b      	ldr	r3, [r3, #8]
 8108512:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8108516:	687b      	ldr	r3, [r7, #4]
 8108518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810851a:	687b      	ldr	r3, [r7, #4]
 810851c:	681b      	ldr	r3, [r3, #0]
 810851e:	430a      	orrs	r2, r1
 8108520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108522:	687b      	ldr	r3, [r7, #4]
 8108524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108526:	f003 0320 	and.w	r3, r3, #32
 810852a:	2b00      	cmp	r3, #0
 810852c:	d00a      	beq.n	8108544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	681b      	ldr	r3, [r3, #0]
 8108532:	689b      	ldr	r3, [r3, #8]
 8108534:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8108538:	687b      	ldr	r3, [r7, #4]
 810853a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	430a      	orrs	r2, r1
 8108542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810854c:	2b00      	cmp	r3, #0
 810854e:	d01a      	beq.n	8108586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	681b      	ldr	r3, [r3, #0]
 8108554:	685b      	ldr	r3, [r3, #4]
 8108556:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	430a      	orrs	r2, r1
 8108564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108566:	687b      	ldr	r3, [r7, #4]
 8108568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810856a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810856e:	d10a      	bne.n	8108586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	685b      	ldr	r3, [r3, #4]
 8108576:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	681b      	ldr	r3, [r3, #0]
 8108582:	430a      	orrs	r2, r1
 8108584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810858a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810858e:	2b00      	cmp	r3, #0
 8108590:	d00a      	beq.n	81085a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	681b      	ldr	r3, [r3, #0]
 8108596:	685b      	ldr	r3, [r3, #4]
 8108598:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810859c:	687b      	ldr	r3, [r7, #4]
 810859e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	430a      	orrs	r2, r1
 81085a6:	605a      	str	r2, [r3, #4]
  }
}
 81085a8:	bf00      	nop
 81085aa:	370c      	adds	r7, #12
 81085ac:	46bd      	mov	sp, r7
 81085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085b2:	4770      	bx	lr

081085b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81085b4:	b580      	push	{r7, lr}
 81085b6:	b098      	sub	sp, #96	@ 0x60
 81085b8:	af02      	add	r7, sp, #8
 81085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	2200      	movs	r2, #0
 81085c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81085c4:	f7f9 fb50 	bl	8101c68 <HAL_GetTick>
 81085c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81085ca:	687b      	ldr	r3, [r7, #4]
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	f003 0308 	and.w	r3, r3, #8
 81085d4:	2b08      	cmp	r3, #8
 81085d6:	d12f      	bne.n	8108638 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81085d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81085dc:	9300      	str	r3, [sp, #0]
 81085de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81085e0:	2200      	movs	r2, #0
 81085e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81085e6:	6878      	ldr	r0, [r7, #4]
 81085e8:	f000 f88e 	bl	8108708 <UART_WaitOnFlagUntilTimeout>
 81085ec:	4603      	mov	r3, r0
 81085ee:	2b00      	cmp	r3, #0
 81085f0:	d022      	beq.n	8108638 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81085fa:	e853 3f00 	ldrex	r3, [r3]
 81085fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8108600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108606:	653b      	str	r3, [r7, #80]	@ 0x50
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	461a      	mov	r2, r3
 810860e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8108610:	647b      	str	r3, [r7, #68]	@ 0x44
 8108612:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8108616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108618:	e841 2300 	strex	r3, r2, [r1]
 810861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810861e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108620:	2b00      	cmp	r3, #0
 8108622:	d1e6      	bne.n	81085f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	2220      	movs	r2, #32
 8108628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	2200      	movs	r2, #0
 8108630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108634:	2303      	movs	r3, #3
 8108636:	e063      	b.n	8108700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108638:	687b      	ldr	r3, [r7, #4]
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	f003 0304 	and.w	r3, r3, #4
 8108642:	2b04      	cmp	r3, #4
 8108644:	d149      	bne.n	81086da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108646:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810864a:	9300      	str	r3, [sp, #0]
 810864c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810864e:	2200      	movs	r2, #0
 8108650:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8108654:	6878      	ldr	r0, [r7, #4]
 8108656:	f000 f857 	bl	8108708 <UART_WaitOnFlagUntilTimeout>
 810865a:	4603      	mov	r3, r0
 810865c:	2b00      	cmp	r3, #0
 810865e:	d03c      	beq.n	81086da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	681b      	ldr	r3, [r3, #0]
 8108664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108668:	e853 3f00 	ldrex	r3, [r3]
 810866c:	623b      	str	r3, [r7, #32]
   return(result);
 810866e:	6a3b      	ldr	r3, [r7, #32]
 8108670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	681b      	ldr	r3, [r3, #0]
 810867a:	461a      	mov	r2, r3
 810867c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810867e:	633b      	str	r3, [r7, #48]	@ 0x30
 8108680:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8108684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108686:	e841 2300 	strex	r3, r2, [r1]
 810868a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810868e:	2b00      	cmp	r3, #0
 8108690:	d1e6      	bne.n	8108660 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	681b      	ldr	r3, [r3, #0]
 8108696:	3308      	adds	r3, #8
 8108698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810869a:	693b      	ldr	r3, [r7, #16]
 810869c:	e853 3f00 	ldrex	r3, [r3]
 81086a0:	60fb      	str	r3, [r7, #12]
   return(result);
 81086a2:	68fb      	ldr	r3, [r7, #12]
 81086a4:	f023 0301 	bic.w	r3, r3, #1
 81086a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	3308      	adds	r3, #8
 81086b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81086b2:	61fa      	str	r2, [r7, #28]
 81086b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81086b6:	69b9      	ldr	r1, [r7, #24]
 81086b8:	69fa      	ldr	r2, [r7, #28]
 81086ba:	e841 2300 	strex	r3, r2, [r1]
 81086be:	617b      	str	r3, [r7, #20]
   return(result);
 81086c0:	697b      	ldr	r3, [r7, #20]
 81086c2:	2b00      	cmp	r3, #0
 81086c4:	d1e5      	bne.n	8108692 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	2220      	movs	r2, #32
 81086ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	2200      	movs	r2, #0
 81086d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81086d6:	2303      	movs	r3, #3
 81086d8:	e012      	b.n	8108700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81086da:	687b      	ldr	r3, [r7, #4]
 81086dc:	2220      	movs	r2, #32
 81086de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81086e2:	687b      	ldr	r3, [r7, #4]
 81086e4:	2220      	movs	r2, #32
 81086e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81086ea:	687b      	ldr	r3, [r7, #4]
 81086ec:	2200      	movs	r2, #0
 81086ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	2200      	movs	r2, #0
 81086f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	2200      	movs	r2, #0
 81086fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81086fe:	2300      	movs	r3, #0
}
 8108700:	4618      	mov	r0, r3
 8108702:	3758      	adds	r7, #88	@ 0x58
 8108704:	46bd      	mov	sp, r7
 8108706:	bd80      	pop	{r7, pc}

08108708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108708:	b580      	push	{r7, lr}
 810870a:	b084      	sub	sp, #16
 810870c:	af00      	add	r7, sp, #0
 810870e:	60f8      	str	r0, [r7, #12]
 8108710:	60b9      	str	r1, [r7, #8]
 8108712:	603b      	str	r3, [r7, #0]
 8108714:	4613      	mov	r3, r2
 8108716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108718:	e04f      	b.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810871a:	69bb      	ldr	r3, [r7, #24]
 810871c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108720:	d04b      	beq.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108722:	f7f9 faa1 	bl	8101c68 <HAL_GetTick>
 8108726:	4602      	mov	r2, r0
 8108728:	683b      	ldr	r3, [r7, #0]
 810872a:	1ad3      	subs	r3, r2, r3
 810872c:	69ba      	ldr	r2, [r7, #24]
 810872e:	429a      	cmp	r2, r3
 8108730:	d302      	bcc.n	8108738 <UART_WaitOnFlagUntilTimeout+0x30>
 8108732:	69bb      	ldr	r3, [r7, #24]
 8108734:	2b00      	cmp	r3, #0
 8108736:	d101      	bne.n	810873c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108738:	2303      	movs	r3, #3
 810873a:	e04e      	b.n	81087da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810873c:	68fb      	ldr	r3, [r7, #12]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	681b      	ldr	r3, [r3, #0]
 8108742:	f003 0304 	and.w	r3, r3, #4
 8108746:	2b00      	cmp	r3, #0
 8108748:	d037      	beq.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
 810874a:	68bb      	ldr	r3, [r7, #8]
 810874c:	2b80      	cmp	r3, #128	@ 0x80
 810874e:	d034      	beq.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8108750:	68bb      	ldr	r3, [r7, #8]
 8108752:	2b40      	cmp	r3, #64	@ 0x40
 8108754:	d031      	beq.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108756:	68fb      	ldr	r3, [r7, #12]
 8108758:	681b      	ldr	r3, [r3, #0]
 810875a:	69db      	ldr	r3, [r3, #28]
 810875c:	f003 0308 	and.w	r3, r3, #8
 8108760:	2b08      	cmp	r3, #8
 8108762:	d110      	bne.n	8108786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108764:	68fb      	ldr	r3, [r7, #12]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	2208      	movs	r2, #8
 810876a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810876c:	68f8      	ldr	r0, [r7, #12]
 810876e:	f000 f838 	bl	81087e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108772:	68fb      	ldr	r3, [r7, #12]
 8108774:	2208      	movs	r2, #8
 8108776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810877a:	68fb      	ldr	r3, [r7, #12]
 810877c:	2200      	movs	r2, #0
 810877e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8108782:	2301      	movs	r3, #1
 8108784:	e029      	b.n	81087da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	681b      	ldr	r3, [r3, #0]
 810878a:	69db      	ldr	r3, [r3, #28]
 810878c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8108790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108794:	d111      	bne.n	81087ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108796:	68fb      	ldr	r3, [r7, #12]
 8108798:	681b      	ldr	r3, [r3, #0]
 810879a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810879e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81087a0:	68f8      	ldr	r0, [r7, #12]
 81087a2:	f000 f81e 	bl	81087e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81087a6:	68fb      	ldr	r3, [r7, #12]
 81087a8:	2220      	movs	r2, #32
 81087aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81087ae:	68fb      	ldr	r3, [r7, #12]
 81087b0:	2200      	movs	r2, #0
 81087b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81087b6:	2303      	movs	r3, #3
 81087b8:	e00f      	b.n	81087da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81087ba:	68fb      	ldr	r3, [r7, #12]
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	69da      	ldr	r2, [r3, #28]
 81087c0:	68bb      	ldr	r3, [r7, #8]
 81087c2:	4013      	ands	r3, r2
 81087c4:	68ba      	ldr	r2, [r7, #8]
 81087c6:	429a      	cmp	r2, r3
 81087c8:	bf0c      	ite	eq
 81087ca:	2301      	moveq	r3, #1
 81087cc:	2300      	movne	r3, #0
 81087ce:	b2db      	uxtb	r3, r3
 81087d0:	461a      	mov	r2, r3
 81087d2:	79fb      	ldrb	r3, [r7, #7]
 81087d4:	429a      	cmp	r2, r3
 81087d6:	d0a0      	beq.n	810871a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81087d8:	2300      	movs	r3, #0
}
 81087da:	4618      	mov	r0, r3
 81087dc:	3710      	adds	r7, #16
 81087de:	46bd      	mov	sp, r7
 81087e0:	bd80      	pop	{r7, pc}

081087e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81087e2:	b480      	push	{r7}
 81087e4:	b095      	sub	sp, #84	@ 0x54
 81087e6:	af00      	add	r7, sp, #0
 81087e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	681b      	ldr	r3, [r3, #0]
 81087ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81087f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81087f2:	e853 3f00 	ldrex	r3, [r3]
 81087f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81087fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	681b      	ldr	r3, [r3, #0]
 8108804:	461a      	mov	r2, r3
 8108806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108808:	643b      	str	r3, [r7, #64]	@ 0x40
 810880a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810880c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810880e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108810:	e841 2300 	strex	r3, r2, [r1]
 8108814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8108816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108818:	2b00      	cmp	r3, #0
 810881a:	d1e6      	bne.n	81087ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	3308      	adds	r3, #8
 8108822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108824:	6a3b      	ldr	r3, [r7, #32]
 8108826:	e853 3f00 	ldrex	r3, [r3]
 810882a:	61fb      	str	r3, [r7, #28]
   return(result);
 810882c:	69fb      	ldr	r3, [r7, #28]
 810882e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108832:	f023 0301 	bic.w	r3, r3, #1
 8108836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	3308      	adds	r3, #8
 810883e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108840:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8108842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8108846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108848:	e841 2300 	strex	r3, r2, [r1]
 810884c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108850:	2b00      	cmp	r3, #0
 8108852:	d1e3      	bne.n	810881c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108858:	2b01      	cmp	r3, #1
 810885a:	d118      	bne.n	810888e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	681b      	ldr	r3, [r3, #0]
 8108860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108862:	68fb      	ldr	r3, [r7, #12]
 8108864:	e853 3f00 	ldrex	r3, [r3]
 8108868:	60bb      	str	r3, [r7, #8]
   return(result);
 810886a:	68bb      	ldr	r3, [r7, #8]
 810886c:	f023 0310 	bic.w	r3, r3, #16
 8108870:	647b      	str	r3, [r7, #68]	@ 0x44
 8108872:	687b      	ldr	r3, [r7, #4]
 8108874:	681b      	ldr	r3, [r3, #0]
 8108876:	461a      	mov	r2, r3
 8108878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810887a:	61bb      	str	r3, [r7, #24]
 810887c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810887e:	6979      	ldr	r1, [r7, #20]
 8108880:	69ba      	ldr	r2, [r7, #24]
 8108882:	e841 2300 	strex	r3, r2, [r1]
 8108886:	613b      	str	r3, [r7, #16]
   return(result);
 8108888:	693b      	ldr	r3, [r7, #16]
 810888a:	2b00      	cmp	r3, #0
 810888c:	d1e6      	bne.n	810885c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	2220      	movs	r2, #32
 8108892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	2200      	movs	r2, #0
 810889a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	2200      	movs	r2, #0
 81088a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81088a2:	bf00      	nop
 81088a4:	3754      	adds	r7, #84	@ 0x54
 81088a6:	46bd      	mov	sp, r7
 81088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088ac:	4770      	bx	lr

081088ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81088ae:	b480      	push	{r7}
 81088b0:	b085      	sub	sp, #20
 81088b2:	af00      	add	r7, sp, #0
 81088b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81088bc:	2b01      	cmp	r3, #1
 81088be:	d101      	bne.n	81088c4 <HAL_UARTEx_DisableFifoMode+0x16>
 81088c0:	2302      	movs	r3, #2
 81088c2:	e027      	b.n	8108914 <HAL_UARTEx_DisableFifoMode+0x66>
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	2201      	movs	r2, #1
 81088c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	2224      	movs	r2, #36	@ 0x24
 81088d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	681b      	ldr	r3, [r3, #0]
 81088e0:	681a      	ldr	r2, [r3, #0]
 81088e2:	687b      	ldr	r3, [r7, #4]
 81088e4:	681b      	ldr	r3, [r3, #0]
 81088e6:	f022 0201 	bic.w	r2, r2, #1
 81088ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81088ec:	68fb      	ldr	r3, [r7, #12]
 81088ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81088f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	2200      	movs	r2, #0
 81088f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	681b      	ldr	r3, [r3, #0]
 81088fe:	68fa      	ldr	r2, [r7, #12]
 8108900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108902:	687b      	ldr	r3, [r7, #4]
 8108904:	2220      	movs	r2, #32
 8108906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	2200      	movs	r2, #0
 810890e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108912:	2300      	movs	r3, #0
}
 8108914:	4618      	mov	r0, r3
 8108916:	3714      	adds	r7, #20
 8108918:	46bd      	mov	sp, r7
 810891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810891e:	4770      	bx	lr

08108920 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108920:	b580      	push	{r7, lr}
 8108922:	b084      	sub	sp, #16
 8108924:	af00      	add	r7, sp, #0
 8108926:	6078      	str	r0, [r7, #4]
 8108928:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8108930:	2b01      	cmp	r3, #1
 8108932:	d101      	bne.n	8108938 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108934:	2302      	movs	r3, #2
 8108936:	e02d      	b.n	8108994 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	2201      	movs	r2, #1
 810893c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	2224      	movs	r2, #36	@ 0x24
 8108944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	681b      	ldr	r3, [r3, #0]
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	681a      	ldr	r2, [r3, #0]
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	f022 0201 	bic.w	r2, r2, #1
 810895e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	681b      	ldr	r3, [r3, #0]
 8108964:	689b      	ldr	r3, [r3, #8]
 8108966:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	681b      	ldr	r3, [r3, #0]
 810896e:	683a      	ldr	r2, [r7, #0]
 8108970:	430a      	orrs	r2, r1
 8108972:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108974:	6878      	ldr	r0, [r7, #4]
 8108976:	f000 f84f 	bl	8108a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810897a:	687b      	ldr	r3, [r7, #4]
 810897c:	681b      	ldr	r3, [r3, #0]
 810897e:	68fa      	ldr	r2, [r7, #12]
 8108980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	2220      	movs	r2, #32
 8108986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	2200      	movs	r2, #0
 810898e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108992:	2300      	movs	r3, #0
}
 8108994:	4618      	mov	r0, r3
 8108996:	3710      	adds	r7, #16
 8108998:	46bd      	mov	sp, r7
 810899a:	bd80      	pop	{r7, pc}

0810899c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810899c:	b580      	push	{r7, lr}
 810899e:	b084      	sub	sp, #16
 81089a0:	af00      	add	r7, sp, #0
 81089a2:	6078      	str	r0, [r7, #4]
 81089a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81089ac:	2b01      	cmp	r3, #1
 81089ae:	d101      	bne.n	81089b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81089b0:	2302      	movs	r3, #2
 81089b2:	e02d      	b.n	8108a10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81089b4:	687b      	ldr	r3, [r7, #4]
 81089b6:	2201      	movs	r2, #1
 81089b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	2224      	movs	r2, #36	@ 0x24
 81089c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81089c4:	687b      	ldr	r3, [r7, #4]
 81089c6:	681b      	ldr	r3, [r3, #0]
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81089cc:	687b      	ldr	r3, [r7, #4]
 81089ce:	681b      	ldr	r3, [r3, #0]
 81089d0:	681a      	ldr	r2, [r3, #0]
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	681b      	ldr	r3, [r3, #0]
 81089d6:	f022 0201 	bic.w	r2, r2, #1
 81089da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	681b      	ldr	r3, [r3, #0]
 81089e0:	689b      	ldr	r3, [r3, #8]
 81089e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81089e6:	687b      	ldr	r3, [r7, #4]
 81089e8:	681b      	ldr	r3, [r3, #0]
 81089ea:	683a      	ldr	r2, [r7, #0]
 81089ec:	430a      	orrs	r2, r1
 81089ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81089f0:	6878      	ldr	r0, [r7, #4]
 81089f2:	f000 f811 	bl	8108a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	681b      	ldr	r3, [r3, #0]
 81089fa:	68fa      	ldr	r2, [r7, #12]
 81089fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	2220      	movs	r2, #32
 8108a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108a06:	687b      	ldr	r3, [r7, #4]
 8108a08:	2200      	movs	r2, #0
 8108a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108a0e:	2300      	movs	r3, #0
}
 8108a10:	4618      	mov	r0, r3
 8108a12:	3710      	adds	r7, #16
 8108a14:	46bd      	mov	sp, r7
 8108a16:	bd80      	pop	{r7, pc}

08108a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108a18:	b480      	push	{r7}
 8108a1a:	b085      	sub	sp, #20
 8108a1c:	af00      	add	r7, sp, #0
 8108a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108a24:	2b00      	cmp	r3, #0
 8108a26:	d108      	bne.n	8108a3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	2201      	movs	r2, #1
 8108a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	2201      	movs	r2, #1
 8108a34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108a38:	e031      	b.n	8108a9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108a3a:	2310      	movs	r3, #16
 8108a3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108a3e:	2310      	movs	r3, #16
 8108a40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	689b      	ldr	r3, [r3, #8]
 8108a48:	0e5b      	lsrs	r3, r3, #25
 8108a4a:	b2db      	uxtb	r3, r3
 8108a4c:	f003 0307 	and.w	r3, r3, #7
 8108a50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	689b      	ldr	r3, [r3, #8]
 8108a58:	0f5b      	lsrs	r3, r3, #29
 8108a5a:	b2db      	uxtb	r3, r3
 8108a5c:	f003 0307 	and.w	r3, r3, #7
 8108a60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108a62:	7bbb      	ldrb	r3, [r7, #14]
 8108a64:	7b3a      	ldrb	r2, [r7, #12]
 8108a66:	4911      	ldr	r1, [pc, #68]	@ (8108aac <UARTEx_SetNbDataToProcess+0x94>)
 8108a68:	5c8a      	ldrb	r2, [r1, r2]
 8108a6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108a6e:	7b3a      	ldrb	r2, [r7, #12]
 8108a70:	490f      	ldr	r1, [pc, #60]	@ (8108ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8108a72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8108a78:	b29a      	uxth	r2, r3
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108a80:	7bfb      	ldrb	r3, [r7, #15]
 8108a82:	7b7a      	ldrb	r2, [r7, #13]
 8108a84:	4909      	ldr	r1, [pc, #36]	@ (8108aac <UARTEx_SetNbDataToProcess+0x94>)
 8108a86:	5c8a      	ldrb	r2, [r1, r2]
 8108a88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108a8c:	7b7a      	ldrb	r2, [r7, #13]
 8108a8e:	4908      	ldr	r1, [pc, #32]	@ (8108ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8108a90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108a92:	fb93 f3f2 	sdiv	r3, r3, r2
 8108a96:	b29a      	uxth	r2, r3
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8108a9e:	bf00      	nop
 8108aa0:	3714      	adds	r7, #20
 8108aa2:	46bd      	mov	sp, r7
 8108aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108aa8:	4770      	bx	lr
 8108aaa:	bf00      	nop
 8108aac:	08109adc 	.word	0x08109adc
 8108ab0:	08109ae4 	.word	0x08109ae4

08108ab4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8108ab4:	b480      	push	{r7}
 8108ab6:	b083      	sub	sp, #12
 8108ab8:	af00      	add	r7, sp, #0
 8108aba:	6078      	str	r0, [r7, #4]
 8108abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8108abe:	683b      	ldr	r3, [r7, #0]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	2b00      	cmp	r3, #0
 8108ac4:	d123      	bne.n	8108b0e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	681b      	ldr	r3, [r3, #0]
 8108aca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108ace:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108ad2:	683a      	ldr	r2, [r7, #0]
 8108ad4:	6851      	ldr	r1, [r2, #4]
 8108ad6:	683a      	ldr	r2, [r7, #0]
 8108ad8:	6892      	ldr	r2, [r2, #8]
 8108ada:	4311      	orrs	r1, r2
 8108adc:	683a      	ldr	r2, [r7, #0]
 8108ade:	68d2      	ldr	r2, [r2, #12]
 8108ae0:	4311      	orrs	r1, r2
 8108ae2:	683a      	ldr	r2, [r7, #0]
 8108ae4:	6912      	ldr	r2, [r2, #16]
 8108ae6:	4311      	orrs	r1, r2
 8108ae8:	683a      	ldr	r2, [r7, #0]
 8108aea:	6952      	ldr	r2, [r2, #20]
 8108aec:	4311      	orrs	r1, r2
 8108aee:	683a      	ldr	r2, [r7, #0]
 8108af0:	6992      	ldr	r2, [r2, #24]
 8108af2:	4311      	orrs	r1, r2
 8108af4:	683a      	ldr	r2, [r7, #0]
 8108af6:	69d2      	ldr	r2, [r2, #28]
 8108af8:	4311      	orrs	r1, r2
 8108afa:	683a      	ldr	r2, [r7, #0]
 8108afc:	6a12      	ldr	r2, [r2, #32]
 8108afe:	4311      	orrs	r1, r2
 8108b00:	683a      	ldr	r2, [r7, #0]
 8108b02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8108b04:	430a      	orrs	r2, r1
 8108b06:	431a      	orrs	r2, r3
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	601a      	str	r2, [r3, #0]
 8108b0c:	e028      	b.n	8108b60 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8108b0e:	687b      	ldr	r3, [r7, #4]
 8108b10:	681b      	ldr	r3, [r3, #0]
 8108b12:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8108b16:	683b      	ldr	r3, [r7, #0]
 8108b18:	69d9      	ldr	r1, [r3, #28]
 8108b1a:	683b      	ldr	r3, [r7, #0]
 8108b1c:	6a1b      	ldr	r3, [r3, #32]
 8108b1e:	4319      	orrs	r1, r3
 8108b20:	683b      	ldr	r3, [r7, #0]
 8108b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b24:	430b      	orrs	r3, r1
 8108b26:	431a      	orrs	r2, r3
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	685b      	ldr	r3, [r3, #4]
 8108b30:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108b34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108b38:	683a      	ldr	r2, [r7, #0]
 8108b3a:	6851      	ldr	r1, [r2, #4]
 8108b3c:	683a      	ldr	r2, [r7, #0]
 8108b3e:	6892      	ldr	r2, [r2, #8]
 8108b40:	4311      	orrs	r1, r2
 8108b42:	683a      	ldr	r2, [r7, #0]
 8108b44:	68d2      	ldr	r2, [r2, #12]
 8108b46:	4311      	orrs	r1, r2
 8108b48:	683a      	ldr	r2, [r7, #0]
 8108b4a:	6912      	ldr	r2, [r2, #16]
 8108b4c:	4311      	orrs	r1, r2
 8108b4e:	683a      	ldr	r2, [r7, #0]
 8108b50:	6952      	ldr	r2, [r2, #20]
 8108b52:	4311      	orrs	r1, r2
 8108b54:	683a      	ldr	r2, [r7, #0]
 8108b56:	6992      	ldr	r2, [r2, #24]
 8108b58:	430a      	orrs	r2, r1
 8108b5a:	431a      	orrs	r2, r3
 8108b5c:	687b      	ldr	r3, [r7, #4]
 8108b5e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8108b60:	2300      	movs	r3, #0
}
 8108b62:	4618      	mov	r0, r3
 8108b64:	370c      	adds	r7, #12
 8108b66:	46bd      	mov	sp, r7
 8108b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b6c:	4770      	bx	lr

08108b6e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8108b6e:	b480      	push	{r7}
 8108b70:	b085      	sub	sp, #20
 8108b72:	af00      	add	r7, sp, #0
 8108b74:	60f8      	str	r0, [r7, #12]
 8108b76:	60b9      	str	r1, [r7, #8]
 8108b78:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8108b7a:	687b      	ldr	r3, [r7, #4]
 8108b7c:	2b00      	cmp	r3, #0
 8108b7e:	d128      	bne.n	8108bd2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8108b80:	68fb      	ldr	r3, [r7, #12]
 8108b82:	689b      	ldr	r3, [r3, #8]
 8108b84:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8108b88:	68bb      	ldr	r3, [r7, #8]
 8108b8a:	681b      	ldr	r3, [r3, #0]
 8108b8c:	1e59      	subs	r1, r3, #1
 8108b8e:	68bb      	ldr	r3, [r7, #8]
 8108b90:	685b      	ldr	r3, [r3, #4]
 8108b92:	3b01      	subs	r3, #1
 8108b94:	011b      	lsls	r3, r3, #4
 8108b96:	4319      	orrs	r1, r3
 8108b98:	68bb      	ldr	r3, [r7, #8]
 8108b9a:	689b      	ldr	r3, [r3, #8]
 8108b9c:	3b01      	subs	r3, #1
 8108b9e:	021b      	lsls	r3, r3, #8
 8108ba0:	4319      	orrs	r1, r3
 8108ba2:	68bb      	ldr	r3, [r7, #8]
 8108ba4:	68db      	ldr	r3, [r3, #12]
 8108ba6:	3b01      	subs	r3, #1
 8108ba8:	031b      	lsls	r3, r3, #12
 8108baa:	4319      	orrs	r1, r3
 8108bac:	68bb      	ldr	r3, [r7, #8]
 8108bae:	691b      	ldr	r3, [r3, #16]
 8108bb0:	3b01      	subs	r3, #1
 8108bb2:	041b      	lsls	r3, r3, #16
 8108bb4:	4319      	orrs	r1, r3
 8108bb6:	68bb      	ldr	r3, [r7, #8]
 8108bb8:	695b      	ldr	r3, [r3, #20]
 8108bba:	3b01      	subs	r3, #1
 8108bbc:	051b      	lsls	r3, r3, #20
 8108bbe:	4319      	orrs	r1, r3
 8108bc0:	68bb      	ldr	r3, [r7, #8]
 8108bc2:	699b      	ldr	r3, [r3, #24]
 8108bc4:	3b01      	subs	r3, #1
 8108bc6:	061b      	lsls	r3, r3, #24
 8108bc8:	430b      	orrs	r3, r1
 8108bca:	431a      	orrs	r2, r3
 8108bcc:	68fb      	ldr	r3, [r7, #12]
 8108bce:	609a      	str	r2, [r3, #8]
 8108bd0:	e02f      	b.n	8108c32 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8108bd2:	68fb      	ldr	r3, [r7, #12]
 8108bd4:	689b      	ldr	r3, [r3, #8]
 8108bd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8108bda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108bde:	68ba      	ldr	r2, [r7, #8]
 8108be0:	68d2      	ldr	r2, [r2, #12]
 8108be2:	3a01      	subs	r2, #1
 8108be4:	0311      	lsls	r1, r2, #12
 8108be6:	68ba      	ldr	r2, [r7, #8]
 8108be8:	6952      	ldr	r2, [r2, #20]
 8108bea:	3a01      	subs	r2, #1
 8108bec:	0512      	lsls	r2, r2, #20
 8108bee:	430a      	orrs	r2, r1
 8108bf0:	431a      	orrs	r2, r3
 8108bf2:	68fb      	ldr	r3, [r7, #12]
 8108bf4:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8108bf6:	68fb      	ldr	r3, [r7, #12]
 8108bf8:	68db      	ldr	r3, [r3, #12]
 8108bfa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8108bfe:	68bb      	ldr	r3, [r7, #8]
 8108c00:	681b      	ldr	r3, [r3, #0]
 8108c02:	1e59      	subs	r1, r3, #1
 8108c04:	68bb      	ldr	r3, [r7, #8]
 8108c06:	685b      	ldr	r3, [r3, #4]
 8108c08:	3b01      	subs	r3, #1
 8108c0a:	011b      	lsls	r3, r3, #4
 8108c0c:	4319      	orrs	r1, r3
 8108c0e:	68bb      	ldr	r3, [r7, #8]
 8108c10:	689b      	ldr	r3, [r3, #8]
 8108c12:	3b01      	subs	r3, #1
 8108c14:	021b      	lsls	r3, r3, #8
 8108c16:	4319      	orrs	r1, r3
 8108c18:	68bb      	ldr	r3, [r7, #8]
 8108c1a:	691b      	ldr	r3, [r3, #16]
 8108c1c:	3b01      	subs	r3, #1
 8108c1e:	041b      	lsls	r3, r3, #16
 8108c20:	4319      	orrs	r1, r3
 8108c22:	68bb      	ldr	r3, [r7, #8]
 8108c24:	699b      	ldr	r3, [r3, #24]
 8108c26:	3b01      	subs	r3, #1
 8108c28:	061b      	lsls	r3, r3, #24
 8108c2a:	430b      	orrs	r3, r1
 8108c2c:	431a      	orrs	r2, r3
 8108c2e:	68fb      	ldr	r3, [r7, #12]
 8108c30:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8108c32:	2300      	movs	r3, #0
}
 8108c34:	4618      	mov	r0, r3
 8108c36:	3714      	adds	r7, #20
 8108c38:	46bd      	mov	sp, r7
 8108c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c3e:	4770      	bx	lr

08108c40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8108c40:	b084      	sub	sp, #16
 8108c42:	b480      	push	{r7}
 8108c44:	b085      	sub	sp, #20
 8108c46:	af00      	add	r7, sp, #0
 8108c48:	6078      	str	r0, [r7, #4]
 8108c4a:	f107 001c 	add.w	r0, r7, #28
 8108c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8108c52:	2300      	movs	r3, #0
 8108c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8108c56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8108c58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8108c5a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8108c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8108c5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8108c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8108c62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8108c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8108c66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8108c68:	68fa      	ldr	r2, [r7, #12]
 8108c6a:	4313      	orrs	r3, r2
 8108c6c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	685a      	ldr	r2, [r3, #4]
 8108c72:	4b07      	ldr	r3, [pc, #28]	@ (8108c90 <SDMMC_Init+0x50>)
 8108c74:	4013      	ands	r3, r2
 8108c76:	68fa      	ldr	r2, [r7, #12]
 8108c78:	431a      	orrs	r2, r3
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8108c7e:	2300      	movs	r3, #0
}
 8108c80:	4618      	mov	r0, r3
 8108c82:	3714      	adds	r7, #20
 8108c84:	46bd      	mov	sp, r7
 8108c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c8a:	b004      	add	sp, #16
 8108c8c:	4770      	bx	lr
 8108c8e:	bf00      	nop
 8108c90:	ffc02c00 	.word	0xffc02c00

08108c94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8108c94:	b480      	push	{r7}
 8108c96:	b083      	sub	sp, #12
 8108c98:	af00      	add	r7, sp, #0
 8108c9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8108c9c:	687b      	ldr	r3, [r7, #4]
 8108c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8108ca2:	4618      	mov	r0, r3
 8108ca4:	370c      	adds	r7, #12
 8108ca6:	46bd      	mov	sp, r7
 8108ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cac:	4770      	bx	lr

08108cae <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8108cae:	b480      	push	{r7}
 8108cb0:	b083      	sub	sp, #12
 8108cb2:	af00      	add	r7, sp, #0
 8108cb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8108cb6:	687b      	ldr	r3, [r7, #4]
 8108cb8:	681b      	ldr	r3, [r3, #0]
 8108cba:	f043 0203 	orr.w	r2, r3, #3
 8108cbe:	687b      	ldr	r3, [r7, #4]
 8108cc0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8108cc2:	2300      	movs	r3, #0
}
 8108cc4:	4618      	mov	r0, r3
 8108cc6:	370c      	adds	r7, #12
 8108cc8:	46bd      	mov	sp, r7
 8108cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cce:	4770      	bx	lr

08108cd0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8108cd0:	b480      	push	{r7}
 8108cd2:	b083      	sub	sp, #12
 8108cd4:	af00      	add	r7, sp, #0
 8108cd6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8108cd8:	687b      	ldr	r3, [r7, #4]
 8108cda:	681b      	ldr	r3, [r3, #0]
 8108cdc:	f003 0303 	and.w	r3, r3, #3
}
 8108ce0:	4618      	mov	r0, r3
 8108ce2:	370c      	adds	r7, #12
 8108ce4:	46bd      	mov	sp, r7
 8108ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cea:	4770      	bx	lr

08108cec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8108cec:	b480      	push	{r7}
 8108cee:	b085      	sub	sp, #20
 8108cf0:	af00      	add	r7, sp, #0
 8108cf2:	6078      	str	r0, [r7, #4]
 8108cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8108cf6:	2300      	movs	r3, #0
 8108cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8108cfa:	683b      	ldr	r3, [r7, #0]
 8108cfc:	681a      	ldr	r2, [r3, #0]
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108d02:	683b      	ldr	r3, [r7, #0]
 8108d04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8108d06:	683b      	ldr	r3, [r7, #0]
 8108d08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108d0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8108d0c:	683b      	ldr	r3, [r7, #0]
 8108d0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8108d10:	431a      	orrs	r2, r3
                       Command->CPSM);
 8108d12:	683b      	ldr	r3, [r7, #0]
 8108d14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8108d16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108d18:	68fa      	ldr	r2, [r7, #12]
 8108d1a:	4313      	orrs	r3, r2
 8108d1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	68da      	ldr	r2, [r3, #12]
 8108d22:	4b06      	ldr	r3, [pc, #24]	@ (8108d3c <SDMMC_SendCommand+0x50>)
 8108d24:	4013      	ands	r3, r2
 8108d26:	68fa      	ldr	r2, [r7, #12]
 8108d28:	431a      	orrs	r2, r3
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8108d2e:	2300      	movs	r3, #0
}
 8108d30:	4618      	mov	r0, r3
 8108d32:	3714      	adds	r7, #20
 8108d34:	46bd      	mov	sp, r7
 8108d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d3a:	4770      	bx	lr
 8108d3c:	fffee0c0 	.word	0xfffee0c0

08108d40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8108d40:	b480      	push	{r7}
 8108d42:	b083      	sub	sp, #12
 8108d44:	af00      	add	r7, sp, #0
 8108d46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8108d48:	687b      	ldr	r3, [r7, #4]
 8108d4a:	691b      	ldr	r3, [r3, #16]
 8108d4c:	b2db      	uxtb	r3, r3
}
 8108d4e:	4618      	mov	r0, r3
 8108d50:	370c      	adds	r7, #12
 8108d52:	46bd      	mov	sp, r7
 8108d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d58:	4770      	bx	lr

08108d5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8108d5a:	b480      	push	{r7}
 8108d5c:	b085      	sub	sp, #20
 8108d5e:	af00      	add	r7, sp, #0
 8108d60:	6078      	str	r0, [r7, #4]
 8108d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	3314      	adds	r3, #20
 8108d68:	461a      	mov	r2, r3
 8108d6a:	683b      	ldr	r3, [r7, #0]
 8108d6c:	4413      	add	r3, r2
 8108d6e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8108d70:	68fb      	ldr	r3, [r7, #12]
 8108d72:	681b      	ldr	r3, [r3, #0]
}
 8108d74:	4618      	mov	r0, r3
 8108d76:	3714      	adds	r7, #20
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d7e:	4770      	bx	lr

08108d80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8108d80:	b480      	push	{r7}
 8108d82:	b085      	sub	sp, #20
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	6078      	str	r0, [r7, #4]
 8108d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8108d8a:	2300      	movs	r3, #0
 8108d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8108d8e:	683b      	ldr	r3, [r7, #0]
 8108d90:	681a      	ldr	r2, [r3, #0]
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8108d96:	683b      	ldr	r3, [r7, #0]
 8108d98:	685a      	ldr	r2, [r3, #4]
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108d9e:	683b      	ldr	r3, [r7, #0]
 8108da0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8108da2:	683b      	ldr	r3, [r7, #0]
 8108da4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108da6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8108da8:	683b      	ldr	r3, [r7, #0]
 8108daa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8108dac:	431a      	orrs	r2, r3
                       Data->DPSM);
 8108dae:	683b      	ldr	r3, [r7, #0]
 8108db0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8108db2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108db4:	68fa      	ldr	r2, [r7, #12]
 8108db6:	4313      	orrs	r3, r2
 8108db8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108dbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8108dc2:	68fb      	ldr	r3, [r7, #12]
 8108dc4:	431a      	orrs	r2, r3
 8108dc6:	687b      	ldr	r3, [r7, #4]
 8108dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8108dca:	2300      	movs	r3, #0

}
 8108dcc:	4618      	mov	r0, r3
 8108dce:	3714      	adds	r7, #20
 8108dd0:	46bd      	mov	sp, r7
 8108dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dd6:	4770      	bx	lr

08108dd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8108dd8:	b580      	push	{r7, lr}
 8108dda:	b088      	sub	sp, #32
 8108ddc:	af00      	add	r7, sp, #0
 8108dde:	6078      	str	r0, [r7, #4]
 8108de0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8108de2:	683b      	ldr	r3, [r7, #0]
 8108de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8108de6:	2310      	movs	r3, #16
 8108de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108df0:	2300      	movs	r3, #0
 8108df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108df8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108dfa:	f107 0308 	add.w	r3, r7, #8
 8108dfe:	4619      	mov	r1, r3
 8108e00:	6878      	ldr	r0, [r7, #4]
 8108e02:	f7ff ff73 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8108e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108e0a:	2110      	movs	r1, #16
 8108e0c:	6878      	ldr	r0, [r7, #4]
 8108e0e:	f000 f935 	bl	810907c <SDMMC_GetCmdResp1>
 8108e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108e14:	69fb      	ldr	r3, [r7, #28]
}
 8108e16:	4618      	mov	r0, r3
 8108e18:	3720      	adds	r7, #32
 8108e1a:	46bd      	mov	sp, r7
 8108e1c:	bd80      	pop	{r7, pc}

08108e1e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8108e1e:	b580      	push	{r7, lr}
 8108e20:	b088      	sub	sp, #32
 8108e22:	af00      	add	r7, sp, #0
 8108e24:	6078      	str	r0, [r7, #4]
 8108e26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8108e28:	683b      	ldr	r3, [r7, #0]
 8108e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8108e2c:	2307      	movs	r3, #7
 8108e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108e36:	2300      	movs	r3, #0
 8108e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108e40:	f107 0308 	add.w	r3, r7, #8
 8108e44:	4619      	mov	r1, r3
 8108e46:	6878      	ldr	r0, [r7, #4]
 8108e48:	f7ff ff50 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8108e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108e50:	2107      	movs	r1, #7
 8108e52:	6878      	ldr	r0, [r7, #4]
 8108e54:	f000 f912 	bl	810907c <SDMMC_GetCmdResp1>
 8108e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108e5a:	69fb      	ldr	r3, [r7, #28]
}
 8108e5c:	4618      	mov	r0, r3
 8108e5e:	3720      	adds	r7, #32
 8108e60:	46bd      	mov	sp, r7
 8108e62:	bd80      	pop	{r7, pc}

08108e64 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8108e64:	b580      	push	{r7, lr}
 8108e66:	b088      	sub	sp, #32
 8108e68:	af00      	add	r7, sp, #0
 8108e6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8108e6c:	2300      	movs	r3, #0
 8108e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8108e70:	2300      	movs	r3, #0
 8108e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8108e74:	2300      	movs	r3, #0
 8108e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108e78:	2300      	movs	r3, #0
 8108e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108e82:	f107 0308 	add.w	r3, r7, #8
 8108e86:	4619      	mov	r1, r3
 8108e88:	6878      	ldr	r0, [r7, #4]
 8108e8a:	f7ff ff2f 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8108e8e:	6878      	ldr	r0, [r7, #4]
 8108e90:	f000 fa70 	bl	8109374 <SDMMC_GetCmdError>
 8108e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108e96:	69fb      	ldr	r3, [r7, #28]
}
 8108e98:	4618      	mov	r0, r3
 8108e9a:	3720      	adds	r7, #32
 8108e9c:	46bd      	mov	sp, r7
 8108e9e:	bd80      	pop	{r7, pc}

08108ea0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8108ea0:	b580      	push	{r7, lr}
 8108ea2:	b088      	sub	sp, #32
 8108ea4:	af00      	add	r7, sp, #0
 8108ea6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8108ea8:	2300      	movs	r3, #0
 8108eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8108eac:	2302      	movs	r3, #2
 8108eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8108eb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8108eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108eb6:	2300      	movs	r3, #0
 8108eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108ebe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108ec0:	f107 0308 	add.w	r3, r7, #8
 8108ec4:	4619      	mov	r1, r3
 8108ec6:	6878      	ldr	r0, [r7, #4]
 8108ec8:	f7ff ff10 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8108ecc:	6878      	ldr	r0, [r7, #4]
 8108ece:	f000 f9c7 	bl	8109260 <SDMMC_GetCmdResp2>
 8108ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108ed4:	69fb      	ldr	r3, [r7, #28]
}
 8108ed6:	4618      	mov	r0, r3
 8108ed8:	3720      	adds	r7, #32
 8108eda:	46bd      	mov	sp, r7
 8108edc:	bd80      	pop	{r7, pc}

08108ede <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108ede:	b580      	push	{r7, lr}
 8108ee0:	b088      	sub	sp, #32
 8108ee2:	af00      	add	r7, sp, #0
 8108ee4:	6078      	str	r0, [r7, #4]
 8108ee6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8108ee8:	683b      	ldr	r3, [r7, #0]
 8108eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8108eec:	2309      	movs	r3, #9
 8108eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8108ef0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8108ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108ef6:	2300      	movs	r3, #0
 8108ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108f00:	f107 0308 	add.w	r3, r7, #8
 8108f04:	4619      	mov	r1, r3
 8108f06:	6878      	ldr	r0, [r7, #4]
 8108f08:	f7ff fef0 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8108f0c:	6878      	ldr	r0, [r7, #4]
 8108f0e:	f000 f9a7 	bl	8109260 <SDMMC_GetCmdResp2>
 8108f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108f14:	69fb      	ldr	r3, [r7, #28]
}
 8108f16:	4618      	mov	r0, r3
 8108f18:	3720      	adds	r7, #32
 8108f1a:	46bd      	mov	sp, r7
 8108f1c:	bd80      	pop	{r7, pc}

08108f1e <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8108f1e:	b580      	push	{r7, lr}
 8108f20:	b088      	sub	sp, #32
 8108f22:	af00      	add	r7, sp, #0
 8108f24:	6078      	str	r0, [r7, #4]
 8108f26:	460b      	mov	r3, r1
 8108f28:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8108f2a:	887b      	ldrh	r3, [r7, #2]
 8108f2c:	041b      	lsls	r3, r3, #16
 8108f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8108f30:	2303      	movs	r3, #3
 8108f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108f3a:	2300      	movs	r3, #0
 8108f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108f44:	f107 0308 	add.w	r3, r7, #8
 8108f48:	4619      	mov	r1, r3
 8108f4a:	6878      	ldr	r0, [r7, #4]
 8108f4c:	f7ff fece 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8108f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108f54:	2103      	movs	r1, #3
 8108f56:	6878      	ldr	r0, [r7, #4]
 8108f58:	f000 f890 	bl	810907c <SDMMC_GetCmdResp1>
 8108f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108f5e:	69fb      	ldr	r3, [r7, #28]
}
 8108f60:	4618      	mov	r0, r3
 8108f62:	3720      	adds	r7, #32
 8108f64:	46bd      	mov	sp, r7
 8108f66:	bd80      	pop	{r7, pc}

08108f68 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108f68:	b580      	push	{r7, lr}
 8108f6a:	b088      	sub	sp, #32
 8108f6c:	af00      	add	r7, sp, #0
 8108f6e:	6078      	str	r0, [r7, #4]
 8108f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8108f72:	683b      	ldr	r3, [r7, #0]
 8108f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8108f76:	230d      	movs	r3, #13
 8108f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108f7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108f80:	2300      	movs	r3, #0
 8108f82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108f88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108f8a:	f107 0308 	add.w	r3, r7, #8
 8108f8e:	4619      	mov	r1, r3
 8108f90:	6878      	ldr	r0, [r7, #4]
 8108f92:	f7ff feab 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8108f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108f9a:	210d      	movs	r1, #13
 8108f9c:	6878      	ldr	r0, [r7, #4]
 8108f9e:	f000 f86d 	bl	810907c <SDMMC_GetCmdResp1>
 8108fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108fa4:	69fb      	ldr	r3, [r7, #28]
}
 8108fa6:	4618      	mov	r0, r3
 8108fa8:	3720      	adds	r7, #32
 8108faa:	46bd      	mov	sp, r7
 8108fac:	bd80      	pop	{r7, pc}

08108fae <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108fae:	b580      	push	{r7, lr}
 8108fb0:	b088      	sub	sp, #32
 8108fb2:	af00      	add	r7, sp, #0
 8108fb4:	6078      	str	r0, [r7, #4]
 8108fb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8108fb8:	683b      	ldr	r3, [r7, #0]
 8108fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8108fbc:	2301      	movs	r3, #1
 8108fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108fc6:	2300      	movs	r3, #0
 8108fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108fce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108fd0:	f107 0308 	add.w	r3, r7, #8
 8108fd4:	4619      	mov	r1, r3
 8108fd6:	6878      	ldr	r0, [r7, #4]
 8108fd8:	f7ff fe88 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8108fdc:	6878      	ldr	r0, [r7, #4]
 8108fde:	f000 f989 	bl	81092f4 <SDMMC_GetCmdResp3>
 8108fe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108fe4:	69fb      	ldr	r3, [r7, #28]
}
 8108fe6:	4618      	mov	r0, r3
 8108fe8:	3720      	adds	r7, #32
 8108fea:	46bd      	mov	sp, r7
 8108fec:	bd80      	pop	{r7, pc}

08108fee <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108fee:	b580      	push	{r7, lr}
 8108ff0:	b088      	sub	sp, #32
 8108ff2:	af00      	add	r7, sp, #0
 8108ff4:	6078      	str	r0, [r7, #4]
 8108ff6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8108ff8:	683b      	ldr	r3, [r7, #0]
 8108ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8108ffc:	2306      	movs	r3, #6
 8108ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109000:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109006:	2300      	movs	r3, #0
 8109008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810900a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810900e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109010:	f107 0308 	add.w	r3, r7, #8
 8109014:	4619      	mov	r1, r3
 8109016:	6878      	ldr	r0, [r7, #4]
 8109018:	f7ff fe68 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 810901c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109020:	2106      	movs	r1, #6
 8109022:	6878      	ldr	r0, [r7, #4]
 8109024:	f000 f82a 	bl	810907c <SDMMC_GetCmdResp1>
 8109028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810902a:	69fb      	ldr	r3, [r7, #28]
}
 810902c:	4618      	mov	r0, r3
 810902e:	3720      	adds	r7, #32
 8109030:	46bd      	mov	sp, r7
 8109032:	bd80      	pop	{r7, pc}

08109034 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8109034:	b580      	push	{r7, lr}
 8109036:	b088      	sub	sp, #32
 8109038:	af00      	add	r7, sp, #0
 810903a:	6078      	str	r0, [r7, #4]
 810903c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810903e:	683b      	ldr	r3, [r7, #0]
 8109040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8109042:	2308      	movs	r3, #8
 8109044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810904a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810904c:	2300      	movs	r3, #0
 810904e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109054:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109056:	f107 0308 	add.w	r3, r7, #8
 810905a:	4619      	mov	r1, r3
 810905c:	6878      	ldr	r0, [r7, #4]
 810905e:	f7ff fe45 	bl	8108cec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8109062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109066:	2108      	movs	r1, #8
 8109068:	6878      	ldr	r0, [r7, #4]
 810906a:	f000 f807 	bl	810907c <SDMMC_GetCmdResp1>
 810906e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109070:	69fb      	ldr	r3, [r7, #28]
}
 8109072:	4618      	mov	r0, r3
 8109074:	3720      	adds	r7, #32
 8109076:	46bd      	mov	sp, r7
 8109078:	bd80      	pop	{r7, pc}
	...

0810907c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810907c:	b580      	push	{r7, lr}
 810907e:	b088      	sub	sp, #32
 8109080:	af00      	add	r7, sp, #0
 8109082:	60f8      	str	r0, [r7, #12]
 8109084:	460b      	mov	r3, r1
 8109086:	607a      	str	r2, [r7, #4]
 8109088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810908a:	4b70      	ldr	r3, [pc, #448]	@ (810924c <SDMMC_GetCmdResp1+0x1d0>)
 810908c:	681b      	ldr	r3, [r3, #0]
 810908e:	4a70      	ldr	r2, [pc, #448]	@ (8109250 <SDMMC_GetCmdResp1+0x1d4>)
 8109090:	fba2 2303 	umull	r2, r3, r2, r3
 8109094:	0a5a      	lsrs	r2, r3, #9
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	fb02 f303 	mul.w	r3, r2, r3
 810909c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810909e:	69fb      	ldr	r3, [r7, #28]
 81090a0:	1e5a      	subs	r2, r3, #1
 81090a2:	61fa      	str	r2, [r7, #28]
 81090a4:	2b00      	cmp	r3, #0
 81090a6:	d102      	bne.n	81090ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 81090a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81090ac:	e0c9      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 81090ae:	68fb      	ldr	r3, [r7, #12]
 81090b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81090b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 81090b4:	69ba      	ldr	r2, [r7, #24]
 81090b6:	4b67      	ldr	r3, [pc, #412]	@ (8109254 <SDMMC_GetCmdResp1+0x1d8>)
 81090b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81090ba:	2b00      	cmp	r3, #0
 81090bc:	d0ef      	beq.n	810909e <SDMMC_GetCmdResp1+0x22>
 81090be:	69bb      	ldr	r3, [r7, #24]
 81090c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81090c4:	2b00      	cmp	r3, #0
 81090c6:	d1ea      	bne.n	810909e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81090c8:	68fb      	ldr	r3, [r7, #12]
 81090ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81090cc:	f003 0304 	and.w	r3, r3, #4
 81090d0:	2b00      	cmp	r3, #0
 81090d2:	d004      	beq.n	81090de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81090d4:	68fb      	ldr	r3, [r7, #12]
 81090d6:	2204      	movs	r2, #4
 81090d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81090da:	2304      	movs	r3, #4
 81090dc:	e0b1      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81090de:	68fb      	ldr	r3, [r7, #12]
 81090e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81090e2:	f003 0301 	and.w	r3, r3, #1
 81090e6:	2b00      	cmp	r3, #0
 81090e8:	d004      	beq.n	81090f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81090ea:	68fb      	ldr	r3, [r7, #12]
 81090ec:	2201      	movs	r2, #1
 81090ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81090f0:	2301      	movs	r3, #1
 81090f2:	e0a6      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81090f4:	68fb      	ldr	r3, [r7, #12]
 81090f6:	4a58      	ldr	r2, [pc, #352]	@ (8109258 <SDMMC_GetCmdResp1+0x1dc>)
 81090f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81090fa:	68f8      	ldr	r0, [r7, #12]
 81090fc:	f7ff fe20 	bl	8108d40 <SDMMC_GetCommandResponse>
 8109100:	4603      	mov	r3, r0
 8109102:	461a      	mov	r2, r3
 8109104:	7afb      	ldrb	r3, [r7, #11]
 8109106:	4293      	cmp	r3, r2
 8109108:	d001      	beq.n	810910e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810910a:	2301      	movs	r3, #1
 810910c:	e099      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810910e:	2100      	movs	r1, #0
 8109110:	68f8      	ldr	r0, [r7, #12]
 8109112:	f7ff fe22 	bl	8108d5a <SDMMC_GetResponse>
 8109116:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8109118:	697a      	ldr	r2, [r7, #20]
 810911a:	4b50      	ldr	r3, [pc, #320]	@ (810925c <SDMMC_GetCmdResp1+0x1e0>)
 810911c:	4013      	ands	r3, r2
 810911e:	2b00      	cmp	r3, #0
 8109120:	d101      	bne.n	8109126 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8109122:	2300      	movs	r3, #0
 8109124:	e08d      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8109126:	697b      	ldr	r3, [r7, #20]
 8109128:	2b00      	cmp	r3, #0
 810912a:	da02      	bge.n	8109132 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810912c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8109130:	e087      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8109132:	697b      	ldr	r3, [r7, #20]
 8109134:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109138:	2b00      	cmp	r3, #0
 810913a:	d001      	beq.n	8109140 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810913c:	2340      	movs	r3, #64	@ 0x40
 810913e:	e080      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8109140:	697b      	ldr	r3, [r7, #20]
 8109142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109146:	2b00      	cmp	r3, #0
 8109148:	d001      	beq.n	810914e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810914a:	2380      	movs	r3, #128	@ 0x80
 810914c:	e079      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810914e:	697b      	ldr	r3, [r7, #20]
 8109150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109154:	2b00      	cmp	r3, #0
 8109156:	d002      	beq.n	810915e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8109158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810915c:	e071      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810915e:	697b      	ldr	r3, [r7, #20]
 8109160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109164:	2b00      	cmp	r3, #0
 8109166:	d002      	beq.n	810916e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8109168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810916c:	e069      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810916e:	697b      	ldr	r3, [r7, #20]
 8109170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8109174:	2b00      	cmp	r3, #0
 8109176:	d002      	beq.n	810917e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8109178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810917c:	e061      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810917e:	697b      	ldr	r3, [r7, #20]
 8109180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8109184:	2b00      	cmp	r3, #0
 8109186:	d002      	beq.n	810918e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8109188:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810918c:	e059      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810918e:	697b      	ldr	r3, [r7, #20]
 8109190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109194:	2b00      	cmp	r3, #0
 8109196:	d002      	beq.n	810919e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8109198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810919c:	e051      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810919e:	697b      	ldr	r3, [r7, #20]
 81091a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81091a4:	2b00      	cmp	r3, #0
 81091a6:	d002      	beq.n	81091ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 81091a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81091ac:	e049      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 81091ae:	697b      	ldr	r3, [r7, #20]
 81091b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81091b4:	2b00      	cmp	r3, #0
 81091b6:	d002      	beq.n	81091be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 81091b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81091bc:	e041      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 81091be:	697b      	ldr	r3, [r7, #20]
 81091c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81091c4:	2b00      	cmp	r3, #0
 81091c6:	d002      	beq.n	81091ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 81091c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81091cc:	e039      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 81091ce:	697b      	ldr	r3, [r7, #20]
 81091d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	d002      	beq.n	81091de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 81091d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 81091dc:	e031      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 81091de:	697b      	ldr	r3, [r7, #20]
 81091e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81091e4:	2b00      	cmp	r3, #0
 81091e6:	d002      	beq.n	81091ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 81091e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 81091ec:	e029      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 81091ee:	697b      	ldr	r3, [r7, #20]
 81091f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81091f4:	2b00      	cmp	r3, #0
 81091f6:	d002      	beq.n	81091fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 81091f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 81091fc:	e021      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 81091fe:	697b      	ldr	r3, [r7, #20]
 8109200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109204:	2b00      	cmp	r3, #0
 8109206:	d002      	beq.n	810920e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8109208:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810920c:	e019      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810920e:	697b      	ldr	r3, [r7, #20]
 8109210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109214:	2b00      	cmp	r3, #0
 8109216:	d002      	beq.n	810921e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8109218:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810921c:	e011      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810921e:	697b      	ldr	r3, [r7, #20]
 8109220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8109224:	2b00      	cmp	r3, #0
 8109226:	d002      	beq.n	810922e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8109228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810922c:	e009      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810922e:	697b      	ldr	r3, [r7, #20]
 8109230:	f003 0308 	and.w	r3, r3, #8
 8109234:	2b00      	cmp	r3, #0
 8109236:	d002      	beq.n	810923e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8109238:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810923c:	e001      	b.n	8109242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810923e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8109242:	4618      	mov	r0, r3
 8109244:	3720      	adds	r7, #32
 8109246:	46bd      	mov	sp, r7
 8109248:	bd80      	pop	{r7, pc}
 810924a:	bf00      	nop
 810924c:	10000000 	.word	0x10000000
 8109250:	10624dd3 	.word	0x10624dd3
 8109254:	00200045 	.word	0x00200045
 8109258:	002000c5 	.word	0x002000c5
 810925c:	fdffe008 	.word	0xfdffe008

08109260 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8109260:	b480      	push	{r7}
 8109262:	b085      	sub	sp, #20
 8109264:	af00      	add	r7, sp, #0
 8109266:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8109268:	4b1f      	ldr	r3, [pc, #124]	@ (81092e8 <SDMMC_GetCmdResp2+0x88>)
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	4a1f      	ldr	r2, [pc, #124]	@ (81092ec <SDMMC_GetCmdResp2+0x8c>)
 810926e:	fba2 2303 	umull	r2, r3, r2, r3
 8109272:	0a5b      	lsrs	r3, r3, #9
 8109274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109278:	fb02 f303 	mul.w	r3, r2, r3
 810927c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810927e:	68fb      	ldr	r3, [r7, #12]
 8109280:	1e5a      	subs	r2, r3, #1
 8109282:	60fa      	str	r2, [r7, #12]
 8109284:	2b00      	cmp	r3, #0
 8109286:	d102      	bne.n	810928e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810928c:	e026      	b.n	81092dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109292:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109294:	68bb      	ldr	r3, [r7, #8]
 8109296:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810929a:	2b00      	cmp	r3, #0
 810929c:	d0ef      	beq.n	810927e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810929e:	68bb      	ldr	r3, [r7, #8]
 81092a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	d1ea      	bne.n	810927e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81092ac:	f003 0304 	and.w	r3, r3, #4
 81092b0:	2b00      	cmp	r3, #0
 81092b2:	d004      	beq.n	81092be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81092b4:	687b      	ldr	r3, [r7, #4]
 81092b6:	2204      	movs	r2, #4
 81092b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81092ba:	2304      	movs	r3, #4
 81092bc:	e00e      	b.n	81092dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81092c2:	f003 0301 	and.w	r3, r3, #1
 81092c6:	2b00      	cmp	r3, #0
 81092c8:	d004      	beq.n	81092d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81092ca:	687b      	ldr	r3, [r7, #4]
 81092cc:	2201      	movs	r2, #1
 81092ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81092d0:	2301      	movs	r3, #1
 81092d2:	e003      	b.n	81092dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	4a06      	ldr	r2, [pc, #24]	@ (81092f0 <SDMMC_GetCmdResp2+0x90>)
 81092d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 81092da:	2300      	movs	r3, #0
}
 81092dc:	4618      	mov	r0, r3
 81092de:	3714      	adds	r7, #20
 81092e0:	46bd      	mov	sp, r7
 81092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092e6:	4770      	bx	lr
 81092e8:	10000000 	.word	0x10000000
 81092ec:	10624dd3 	.word	0x10624dd3
 81092f0:	002000c5 	.word	0x002000c5

081092f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 81092f4:	b480      	push	{r7}
 81092f6:	b085      	sub	sp, #20
 81092f8:	af00      	add	r7, sp, #0
 81092fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81092fc:	4b1a      	ldr	r3, [pc, #104]	@ (8109368 <SDMMC_GetCmdResp3+0x74>)
 81092fe:	681b      	ldr	r3, [r3, #0]
 8109300:	4a1a      	ldr	r2, [pc, #104]	@ (810936c <SDMMC_GetCmdResp3+0x78>)
 8109302:	fba2 2303 	umull	r2, r3, r2, r3
 8109306:	0a5b      	lsrs	r3, r3, #9
 8109308:	f241 3288 	movw	r2, #5000	@ 0x1388
 810930c:	fb02 f303 	mul.w	r3, r2, r3
 8109310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8109312:	68fb      	ldr	r3, [r7, #12]
 8109314:	1e5a      	subs	r2, r3, #1
 8109316:	60fa      	str	r2, [r7, #12]
 8109318:	2b00      	cmp	r3, #0
 810931a:	d102      	bne.n	8109322 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810931c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109320:	e01b      	b.n	810935a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8109322:	687b      	ldr	r3, [r7, #4]
 8109324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109326:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109328:	68bb      	ldr	r3, [r7, #8]
 810932a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810932e:	2b00      	cmp	r3, #0
 8109330:	d0ef      	beq.n	8109312 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8109332:	68bb      	ldr	r3, [r7, #8]
 8109334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109338:	2b00      	cmp	r3, #0
 810933a:	d1ea      	bne.n	8109312 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109340:	f003 0304 	and.w	r3, r3, #4
 8109344:	2b00      	cmp	r3, #0
 8109346:	d004      	beq.n	8109352 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	2204      	movs	r2, #4
 810934c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810934e:	2304      	movs	r3, #4
 8109350:	e003      	b.n	810935a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	4a06      	ldr	r2, [pc, #24]	@ (8109370 <SDMMC_GetCmdResp3+0x7c>)
 8109356:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8109358:	2300      	movs	r3, #0
}
 810935a:	4618      	mov	r0, r3
 810935c:	3714      	adds	r7, #20
 810935e:	46bd      	mov	sp, r7
 8109360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109364:	4770      	bx	lr
 8109366:	bf00      	nop
 8109368:	10000000 	.word	0x10000000
 810936c:	10624dd3 	.word	0x10624dd3
 8109370:	002000c5 	.word	0x002000c5

08109374 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8109374:	b480      	push	{r7}
 8109376:	b085      	sub	sp, #20
 8109378:	af00      	add	r7, sp, #0
 810937a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810937c:	4b11      	ldr	r3, [pc, #68]	@ (81093c4 <SDMMC_GetCmdError+0x50>)
 810937e:	681b      	ldr	r3, [r3, #0]
 8109380:	4a11      	ldr	r2, [pc, #68]	@ (81093c8 <SDMMC_GetCmdError+0x54>)
 8109382:	fba2 2303 	umull	r2, r3, r2, r3
 8109386:	0a5b      	lsrs	r3, r3, #9
 8109388:	f241 3288 	movw	r2, #5000	@ 0x1388
 810938c:	fb02 f303 	mul.w	r3, r2, r3
 8109390:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8109392:	68fb      	ldr	r3, [r7, #12]
 8109394:	1e5a      	subs	r2, r3, #1
 8109396:	60fa      	str	r2, [r7, #12]
 8109398:	2b00      	cmp	r3, #0
 810939a:	d102      	bne.n	81093a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810939c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81093a0:	e009      	b.n	81093b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 81093a2:	687b      	ldr	r3, [r7, #4]
 81093a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81093a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81093aa:	2b00      	cmp	r3, #0
 81093ac:	d0f1      	beq.n	8109392 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	4a06      	ldr	r2, [pc, #24]	@ (81093cc <SDMMC_GetCmdError+0x58>)
 81093b2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 81093b4:	2300      	movs	r3, #0
}
 81093b6:	4618      	mov	r0, r3
 81093b8:	3714      	adds	r7, #20
 81093ba:	46bd      	mov	sp, r7
 81093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093c0:	4770      	bx	lr
 81093c2:	bf00      	nop
 81093c4:	10000000 	.word	0x10000000
 81093c8:	10624dd3 	.word	0x10624dd3
 81093cc:	002000c5 	.word	0x002000c5

081093d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81093d0:	b084      	sub	sp, #16
 81093d2:	b580      	push	{r7, lr}
 81093d4:	b084      	sub	sp, #16
 81093d6:	af00      	add	r7, sp, #0
 81093d8:	6078      	str	r0, [r7, #4]
 81093da:	f107 001c 	add.w	r0, r7, #28
 81093de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81093e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 81093e6:	2b01      	cmp	r3, #1
 81093e8:	d123      	bne.n	8109432 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81093ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	68db      	ldr	r3, [r3, #12]
 81093fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 81093fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109402:	687a      	ldr	r2, [r7, #4]
 8109404:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	68db      	ldr	r3, [r3, #12]
 810940a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8109412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8109416:	2b01      	cmp	r3, #1
 8109418:	d105      	bne.n	8109426 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	68db      	ldr	r3, [r3, #12]
 810941e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8109422:	687b      	ldr	r3, [r7, #4]
 8109424:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8109426:	6878      	ldr	r0, [r7, #4]
 8109428:	f000 faa6 	bl	8109978 <USB_CoreReset>
 810942c:	4603      	mov	r3, r0
 810942e:	73fb      	strb	r3, [r7, #15]
 8109430:	e01b      	b.n	810946a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	68db      	ldr	r3, [r3, #12]
 8109436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810943e:	6878      	ldr	r0, [r7, #4]
 8109440:	f000 fa9a 	bl	8109978 <USB_CoreReset>
 8109444:	4603      	mov	r3, r0
 8109446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8109448:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810944c:	2b00      	cmp	r3, #0
 810944e:	d106      	bne.n	810945e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	639a      	str	r2, [r3, #56]	@ 0x38
 810945c:	e005      	b.n	810946a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109462:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8109466:	687b      	ldr	r3, [r7, #4]
 8109468:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810946a:	7fbb      	ldrb	r3, [r7, #30]
 810946c:	2b01      	cmp	r3, #1
 810946e:	d118      	bne.n	81094a2 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109474:	b29a      	uxth	r2, r3
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810947a:	687b      	ldr	r3, [r7, #4]
 810947c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810947e:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8109482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109486:	687a      	ldr	r2, [r7, #4]
 8109488:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810948a:	687b      	ldr	r3, [r7, #4]
 810948c:	689b      	ldr	r3, [r3, #8]
 810948e:	f043 0206 	orr.w	r2, r3, #6
 8109492:	687b      	ldr	r3, [r7, #4]
 8109494:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	689b      	ldr	r3, [r3, #8]
 810949a:	f043 0220 	orr.w	r2, r3, #32
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 81094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 81094a4:	4618      	mov	r0, r3
 81094a6:	3710      	adds	r7, #16
 81094a8:	46bd      	mov	sp, r7
 81094aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81094ae:	b004      	add	sp, #16
 81094b0:	4770      	bx	lr

081094b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81094b2:	b480      	push	{r7}
 81094b4:	b083      	sub	sp, #12
 81094b6:	af00      	add	r7, sp, #0
 81094b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	689b      	ldr	r3, [r3, #8]
 81094be:	f023 0201 	bic.w	r2, r3, #1
 81094c2:	687b      	ldr	r3, [r7, #4]
 81094c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81094c6:	2300      	movs	r3, #0
}
 81094c8:	4618      	mov	r0, r3
 81094ca:	370c      	adds	r7, #12
 81094cc:	46bd      	mov	sp, r7
 81094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094d2:	4770      	bx	lr

081094d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 81094d4:	b580      	push	{r7, lr}
 81094d6:	b084      	sub	sp, #16
 81094d8:	af00      	add	r7, sp, #0
 81094da:	6078      	str	r0, [r7, #4]
 81094dc:	460b      	mov	r3, r1
 81094de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 81094e0:	2300      	movs	r3, #0
 81094e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	68db      	ldr	r3, [r3, #12]
 81094e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 81094f0:	78fb      	ldrb	r3, [r7, #3]
 81094f2:	2b01      	cmp	r3, #1
 81094f4:	d115      	bne.n	8109522 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	68db      	ldr	r3, [r3, #12]
 81094fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 81094fe:	687b      	ldr	r3, [r7, #4]
 8109500:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8109502:	200a      	movs	r0, #10
 8109504:	f7f8 fbbc 	bl	8101c80 <HAL_Delay>
      ms += 10U;
 8109508:	68fb      	ldr	r3, [r7, #12]
 810950a:	330a      	adds	r3, #10
 810950c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810950e:	6878      	ldr	r0, [r7, #4]
 8109510:	f000 fa24 	bl	810995c <USB_GetMode>
 8109514:	4603      	mov	r3, r0
 8109516:	2b01      	cmp	r3, #1
 8109518:	d01e      	beq.n	8109558 <USB_SetCurrentMode+0x84>
 810951a:	68fb      	ldr	r3, [r7, #12]
 810951c:	2bc7      	cmp	r3, #199	@ 0xc7
 810951e:	d9f0      	bls.n	8109502 <USB_SetCurrentMode+0x2e>
 8109520:	e01a      	b.n	8109558 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8109522:	78fb      	ldrb	r3, [r7, #3]
 8109524:	2b00      	cmp	r3, #0
 8109526:	d115      	bne.n	8109554 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	68db      	ldr	r3, [r3, #12]
 810952c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8109534:	200a      	movs	r0, #10
 8109536:	f7f8 fba3 	bl	8101c80 <HAL_Delay>
      ms += 10U;
 810953a:	68fb      	ldr	r3, [r7, #12]
 810953c:	330a      	adds	r3, #10
 810953e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8109540:	6878      	ldr	r0, [r7, #4]
 8109542:	f000 fa0b 	bl	810995c <USB_GetMode>
 8109546:	4603      	mov	r3, r0
 8109548:	2b00      	cmp	r3, #0
 810954a:	d005      	beq.n	8109558 <USB_SetCurrentMode+0x84>
 810954c:	68fb      	ldr	r3, [r7, #12]
 810954e:	2bc7      	cmp	r3, #199	@ 0xc7
 8109550:	d9f0      	bls.n	8109534 <USB_SetCurrentMode+0x60>
 8109552:	e001      	b.n	8109558 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8109554:	2301      	movs	r3, #1
 8109556:	e005      	b.n	8109564 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8109558:	68fb      	ldr	r3, [r7, #12]
 810955a:	2bc8      	cmp	r3, #200	@ 0xc8
 810955c:	d101      	bne.n	8109562 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810955e:	2301      	movs	r3, #1
 8109560:	e000      	b.n	8109564 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8109562:	2300      	movs	r3, #0
}
 8109564:	4618      	mov	r0, r3
 8109566:	3710      	adds	r7, #16
 8109568:	46bd      	mov	sp, r7
 810956a:	bd80      	pop	{r7, pc}

0810956c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810956c:	b084      	sub	sp, #16
 810956e:	b580      	push	{r7, lr}
 8109570:	b086      	sub	sp, #24
 8109572:	af00      	add	r7, sp, #0
 8109574:	6078      	str	r0, [r7, #4]
 8109576:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810957a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810957e:	2300      	movs	r3, #0
 8109580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8109586:	2300      	movs	r3, #0
 8109588:	613b      	str	r3, [r7, #16]
 810958a:	e009      	b.n	81095a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810958c:	687a      	ldr	r2, [r7, #4]
 810958e:	693b      	ldr	r3, [r7, #16]
 8109590:	3340      	adds	r3, #64	@ 0x40
 8109592:	009b      	lsls	r3, r3, #2
 8109594:	4413      	add	r3, r2
 8109596:	2200      	movs	r2, #0
 8109598:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810959a:	693b      	ldr	r3, [r7, #16]
 810959c:	3301      	adds	r3, #1
 810959e:	613b      	str	r3, [r7, #16]
 81095a0:	693b      	ldr	r3, [r7, #16]
 81095a2:	2b0e      	cmp	r3, #14
 81095a4:	d9f2      	bls.n	810958c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81095a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	d11c      	bne.n	81095e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81095ae:	68fb      	ldr	r3, [r7, #12]
 81095b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81095b4:	685b      	ldr	r3, [r3, #4]
 81095b6:	68fa      	ldr	r2, [r7, #12]
 81095b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81095bc:	f043 0302 	orr.w	r3, r3, #2
 81095c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81095c2:	687b      	ldr	r3, [r7, #4]
 81095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81095c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81095ce:	687b      	ldr	r3, [r7, #4]
 81095d0:	681b      	ldr	r3, [r3, #0]
 81095d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81095e2:	687b      	ldr	r3, [r7, #4]
 81095e4:	601a      	str	r2, [r3, #0]
 81095e6:	e005      	b.n	81095f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81095ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81095f4:	68fb      	ldr	r3, [r7, #12]
 81095f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 81095fa:	461a      	mov	r2, r3
 81095fc:	2300      	movs	r3, #0
 81095fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8109600:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8109604:	2b01      	cmp	r3, #1
 8109606:	d10d      	bne.n	8109624 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8109608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810960c:	2b00      	cmp	r3, #0
 810960e:	d104      	bne.n	810961a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8109610:	2100      	movs	r1, #0
 8109612:	6878      	ldr	r0, [r7, #4]
 8109614:	f000 f968 	bl	81098e8 <USB_SetDevSpeed>
 8109618:	e008      	b.n	810962c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810961a:	2101      	movs	r1, #1
 810961c:	6878      	ldr	r0, [r7, #4]
 810961e:	f000 f963 	bl	81098e8 <USB_SetDevSpeed>
 8109622:	e003      	b.n	810962c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8109624:	2103      	movs	r1, #3
 8109626:	6878      	ldr	r0, [r7, #4]
 8109628:	f000 f95e 	bl	81098e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810962c:	2110      	movs	r1, #16
 810962e:	6878      	ldr	r0, [r7, #4]
 8109630:	f000 f8fa 	bl	8109828 <USB_FlushTxFifo>
 8109634:	4603      	mov	r3, r0
 8109636:	2b00      	cmp	r3, #0
 8109638:	d001      	beq.n	810963e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810963a:	2301      	movs	r3, #1
 810963c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810963e:	6878      	ldr	r0, [r7, #4]
 8109640:	f000 f924 	bl	810988c <USB_FlushRxFifo>
 8109644:	4603      	mov	r3, r0
 8109646:	2b00      	cmp	r3, #0
 8109648:	d001      	beq.n	810964e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810964a:	2301      	movs	r3, #1
 810964c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810964e:	68fb      	ldr	r3, [r7, #12]
 8109650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109654:	461a      	mov	r2, r3
 8109656:	2300      	movs	r3, #0
 8109658:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810965a:	68fb      	ldr	r3, [r7, #12]
 810965c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109660:	461a      	mov	r2, r3
 8109662:	2300      	movs	r3, #0
 8109664:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8109666:	68fb      	ldr	r3, [r7, #12]
 8109668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810966c:	461a      	mov	r2, r3
 810966e:	2300      	movs	r3, #0
 8109670:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109672:	2300      	movs	r3, #0
 8109674:	613b      	str	r3, [r7, #16]
 8109676:	e043      	b.n	8109700 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8109678:	693b      	ldr	r3, [r7, #16]
 810967a:	015a      	lsls	r2, r3, #5
 810967c:	68fb      	ldr	r3, [r7, #12]
 810967e:	4413      	add	r3, r2
 8109680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109684:	681b      	ldr	r3, [r3, #0]
 8109686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810968a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810968e:	d118      	bne.n	81096c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8109690:	693b      	ldr	r3, [r7, #16]
 8109692:	2b00      	cmp	r3, #0
 8109694:	d10a      	bne.n	81096ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8109696:	693b      	ldr	r3, [r7, #16]
 8109698:	015a      	lsls	r2, r3, #5
 810969a:	68fb      	ldr	r3, [r7, #12]
 810969c:	4413      	add	r3, r2
 810969e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81096a2:	461a      	mov	r2, r3
 81096a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81096a8:	6013      	str	r3, [r2, #0]
 81096aa:	e013      	b.n	81096d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81096ac:	693b      	ldr	r3, [r7, #16]
 81096ae:	015a      	lsls	r2, r3, #5
 81096b0:	68fb      	ldr	r3, [r7, #12]
 81096b2:	4413      	add	r3, r2
 81096b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81096b8:	461a      	mov	r2, r3
 81096ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81096be:	6013      	str	r3, [r2, #0]
 81096c0:	e008      	b.n	81096d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81096c2:	693b      	ldr	r3, [r7, #16]
 81096c4:	015a      	lsls	r2, r3, #5
 81096c6:	68fb      	ldr	r3, [r7, #12]
 81096c8:	4413      	add	r3, r2
 81096ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81096ce:	461a      	mov	r2, r3
 81096d0:	2300      	movs	r3, #0
 81096d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81096d4:	693b      	ldr	r3, [r7, #16]
 81096d6:	015a      	lsls	r2, r3, #5
 81096d8:	68fb      	ldr	r3, [r7, #12]
 81096da:	4413      	add	r3, r2
 81096dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81096e0:	461a      	mov	r2, r3
 81096e2:	2300      	movs	r3, #0
 81096e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81096e6:	693b      	ldr	r3, [r7, #16]
 81096e8:	015a      	lsls	r2, r3, #5
 81096ea:	68fb      	ldr	r3, [r7, #12]
 81096ec:	4413      	add	r3, r2
 81096ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81096f2:	461a      	mov	r2, r3
 81096f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 81096f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81096fa:	693b      	ldr	r3, [r7, #16]
 81096fc:	3301      	adds	r3, #1
 81096fe:	613b      	str	r3, [r7, #16]
 8109700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8109704:	461a      	mov	r2, r3
 8109706:	693b      	ldr	r3, [r7, #16]
 8109708:	4293      	cmp	r3, r2
 810970a:	d3b5      	bcc.n	8109678 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810970c:	2300      	movs	r3, #0
 810970e:	613b      	str	r3, [r7, #16]
 8109710:	e043      	b.n	810979a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8109712:	693b      	ldr	r3, [r7, #16]
 8109714:	015a      	lsls	r2, r3, #5
 8109716:	68fb      	ldr	r3, [r7, #12]
 8109718:	4413      	add	r3, r2
 810971a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810971e:	681b      	ldr	r3, [r3, #0]
 8109720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109728:	d118      	bne.n	810975c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810972a:	693b      	ldr	r3, [r7, #16]
 810972c:	2b00      	cmp	r3, #0
 810972e:	d10a      	bne.n	8109746 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8109730:	693b      	ldr	r3, [r7, #16]
 8109732:	015a      	lsls	r2, r3, #5
 8109734:	68fb      	ldr	r3, [r7, #12]
 8109736:	4413      	add	r3, r2
 8109738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810973c:	461a      	mov	r2, r3
 810973e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109742:	6013      	str	r3, [r2, #0]
 8109744:	e013      	b.n	810976e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8109746:	693b      	ldr	r3, [r7, #16]
 8109748:	015a      	lsls	r2, r3, #5
 810974a:	68fb      	ldr	r3, [r7, #12]
 810974c:	4413      	add	r3, r2
 810974e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109752:	461a      	mov	r2, r3
 8109754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8109758:	6013      	str	r3, [r2, #0]
 810975a:	e008      	b.n	810976e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810975c:	693b      	ldr	r3, [r7, #16]
 810975e:	015a      	lsls	r2, r3, #5
 8109760:	68fb      	ldr	r3, [r7, #12]
 8109762:	4413      	add	r3, r2
 8109764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109768:	461a      	mov	r2, r3
 810976a:	2300      	movs	r3, #0
 810976c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810976e:	693b      	ldr	r3, [r7, #16]
 8109770:	015a      	lsls	r2, r3, #5
 8109772:	68fb      	ldr	r3, [r7, #12]
 8109774:	4413      	add	r3, r2
 8109776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810977a:	461a      	mov	r2, r3
 810977c:	2300      	movs	r3, #0
 810977e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8109780:	693b      	ldr	r3, [r7, #16]
 8109782:	015a      	lsls	r2, r3, #5
 8109784:	68fb      	ldr	r3, [r7, #12]
 8109786:	4413      	add	r3, r2
 8109788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810978c:	461a      	mov	r2, r3
 810978e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8109792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109794:	693b      	ldr	r3, [r7, #16]
 8109796:	3301      	adds	r3, #1
 8109798:	613b      	str	r3, [r7, #16]
 810979a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810979e:	461a      	mov	r2, r3
 81097a0:	693b      	ldr	r3, [r7, #16]
 81097a2:	4293      	cmp	r3, r2
 81097a4:	d3b5      	bcc.n	8109712 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 81097a6:	68fb      	ldr	r3, [r7, #12]
 81097a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81097ac:	691b      	ldr	r3, [r3, #16]
 81097ae:	68fa      	ldr	r2, [r7, #12]
 81097b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81097b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81097b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	2200      	movs	r2, #0
 81097be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 81097c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81097c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81097cc:	2b00      	cmp	r3, #0
 81097ce:	d105      	bne.n	81097dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	699b      	ldr	r3, [r3, #24]
 81097d4:	f043 0210 	orr.w	r2, r3, #16
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	699a      	ldr	r2, [r3, #24]
 81097e0:	4b10      	ldr	r3, [pc, #64]	@ (8109824 <USB_DevInit+0x2b8>)
 81097e2:	4313      	orrs	r3, r2
 81097e4:	687a      	ldr	r2, [r7, #4]
 81097e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81097e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 81097ec:	2b00      	cmp	r3, #0
 81097ee:	d005      	beq.n	81097fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	699b      	ldr	r3, [r3, #24]
 81097f4:	f043 0208 	orr.w	r2, r3, #8
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 81097fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8109800:	2b01      	cmp	r3, #1
 8109802:	d107      	bne.n	8109814 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	699b      	ldr	r3, [r3, #24]
 8109808:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810980c:	f043 0304 	orr.w	r3, r3, #4
 8109810:	687a      	ldr	r2, [r7, #4]
 8109812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8109814:	7dfb      	ldrb	r3, [r7, #23]
}
 8109816:	4618      	mov	r0, r3
 8109818:	3718      	adds	r7, #24
 810981a:	46bd      	mov	sp, r7
 810981c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109820:	b004      	add	sp, #16
 8109822:	4770      	bx	lr
 8109824:	803c3800 	.word	0x803c3800

08109828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8109828:	b480      	push	{r7}
 810982a:	b085      	sub	sp, #20
 810982c:	af00      	add	r7, sp, #0
 810982e:	6078      	str	r0, [r7, #4]
 8109830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8109832:	2300      	movs	r3, #0
 8109834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	3301      	adds	r3, #1
 810983a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810983c:	68fb      	ldr	r3, [r7, #12]
 810983e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8109842:	d901      	bls.n	8109848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8109844:	2303      	movs	r3, #3
 8109846:	e01b      	b.n	8109880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	691b      	ldr	r3, [r3, #16]
 810984c:	2b00      	cmp	r3, #0
 810984e:	daf2      	bge.n	8109836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8109850:	2300      	movs	r3, #0
 8109852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8109854:	683b      	ldr	r3, [r7, #0]
 8109856:	019b      	lsls	r3, r3, #6
 8109858:	f043 0220 	orr.w	r2, r3, #32
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8109860:	68fb      	ldr	r3, [r7, #12]
 8109862:	3301      	adds	r3, #1
 8109864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8109866:	68fb      	ldr	r3, [r7, #12]
 8109868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810986c:	d901      	bls.n	8109872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810986e:	2303      	movs	r3, #3
 8109870:	e006      	b.n	8109880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	691b      	ldr	r3, [r3, #16]
 8109876:	f003 0320 	and.w	r3, r3, #32
 810987a:	2b20      	cmp	r3, #32
 810987c:	d0f0      	beq.n	8109860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810987e:	2300      	movs	r3, #0
}
 8109880:	4618      	mov	r0, r3
 8109882:	3714      	adds	r7, #20
 8109884:	46bd      	mov	sp, r7
 8109886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810988a:	4770      	bx	lr

0810988c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810988c:	b480      	push	{r7}
 810988e:	b085      	sub	sp, #20
 8109890:	af00      	add	r7, sp, #0
 8109892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109894:	2300      	movs	r3, #0
 8109896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8109898:	68fb      	ldr	r3, [r7, #12]
 810989a:	3301      	adds	r3, #1
 810989c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810989e:	68fb      	ldr	r3, [r7, #12]
 81098a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81098a4:	d901      	bls.n	81098aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 81098a6:	2303      	movs	r3, #3
 81098a8:	e018      	b.n	81098dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81098aa:	687b      	ldr	r3, [r7, #4]
 81098ac:	691b      	ldr	r3, [r3, #16]
 81098ae:	2b00      	cmp	r3, #0
 81098b0:	daf2      	bge.n	8109898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 81098b2:	2300      	movs	r3, #0
 81098b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	2210      	movs	r2, #16
 81098ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81098bc:	68fb      	ldr	r3, [r7, #12]
 81098be:	3301      	adds	r3, #1
 81098c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81098c2:	68fb      	ldr	r3, [r7, #12]
 81098c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81098c8:	d901      	bls.n	81098ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 81098ca:	2303      	movs	r3, #3
 81098cc:	e006      	b.n	81098dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 81098ce:	687b      	ldr	r3, [r7, #4]
 81098d0:	691b      	ldr	r3, [r3, #16]
 81098d2:	f003 0310 	and.w	r3, r3, #16
 81098d6:	2b10      	cmp	r3, #16
 81098d8:	d0f0      	beq.n	81098bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 81098da:	2300      	movs	r3, #0
}
 81098dc:	4618      	mov	r0, r3
 81098de:	3714      	adds	r7, #20
 81098e0:	46bd      	mov	sp, r7
 81098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098e6:	4770      	bx	lr

081098e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 81098e8:	b480      	push	{r7}
 81098ea:	b085      	sub	sp, #20
 81098ec:	af00      	add	r7, sp, #0
 81098ee:	6078      	str	r0, [r7, #4]
 81098f0:	460b      	mov	r3, r1
 81098f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 81098f8:	68fb      	ldr	r3, [r7, #12]
 81098fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81098fe:	681a      	ldr	r2, [r3, #0]
 8109900:	78fb      	ldrb	r3, [r7, #3]
 8109902:	68f9      	ldr	r1, [r7, #12]
 8109904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8109908:	4313      	orrs	r3, r2
 810990a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810990c:	2300      	movs	r3, #0
}
 810990e:	4618      	mov	r0, r3
 8109910:	3714      	adds	r7, #20
 8109912:	46bd      	mov	sp, r7
 8109914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109918:	4770      	bx	lr

0810991a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810991a:	b480      	push	{r7}
 810991c:	b085      	sub	sp, #20
 810991e:	af00      	add	r7, sp, #0
 8109920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8109926:	68fb      	ldr	r3, [r7, #12]
 8109928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810992c:	681b      	ldr	r3, [r3, #0]
 810992e:	68fa      	ldr	r2, [r7, #12]
 8109930:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8109934:	f023 0303 	bic.w	r3, r3, #3
 8109938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810993a:	68fb      	ldr	r3, [r7, #12]
 810993c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109940:	685b      	ldr	r3, [r3, #4]
 8109942:	68fa      	ldr	r2, [r7, #12]
 8109944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8109948:	f043 0302 	orr.w	r3, r3, #2
 810994c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810994e:	2300      	movs	r3, #0
}
 8109950:	4618      	mov	r0, r3
 8109952:	3714      	adds	r7, #20
 8109954:	46bd      	mov	sp, r7
 8109956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810995a:	4770      	bx	lr

0810995c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810995c:	b480      	push	{r7}
 810995e:	b083      	sub	sp, #12
 8109960:	af00      	add	r7, sp, #0
 8109962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	695b      	ldr	r3, [r3, #20]
 8109968:	f003 0301 	and.w	r3, r3, #1
}
 810996c:	4618      	mov	r0, r3
 810996e:	370c      	adds	r7, #12
 8109970:	46bd      	mov	sp, r7
 8109972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109976:	4770      	bx	lr

08109978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8109978:	b480      	push	{r7}
 810997a:	b085      	sub	sp, #20
 810997c:	af00      	add	r7, sp, #0
 810997e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109980:	2300      	movs	r3, #0
 8109982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8109984:	68fb      	ldr	r3, [r7, #12]
 8109986:	3301      	adds	r3, #1
 8109988:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810998a:	68fb      	ldr	r3, [r7, #12]
 810998c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8109990:	d901      	bls.n	8109996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8109992:	2303      	movs	r3, #3
 8109994:	e01b      	b.n	81099ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	691b      	ldr	r3, [r3, #16]
 810999a:	2b00      	cmp	r3, #0
 810999c:	daf2      	bge.n	8109984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810999e:	2300      	movs	r3, #0
 81099a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	691b      	ldr	r3, [r3, #16]
 81099a6:	f043 0201 	orr.w	r2, r3, #1
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81099ae:	68fb      	ldr	r3, [r7, #12]
 81099b0:	3301      	adds	r3, #1
 81099b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81099ba:	d901      	bls.n	81099c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 81099bc:	2303      	movs	r3, #3
 81099be:	e006      	b.n	81099ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 81099c0:	687b      	ldr	r3, [r7, #4]
 81099c2:	691b      	ldr	r3, [r3, #16]
 81099c4:	f003 0301 	and.w	r3, r3, #1
 81099c8:	2b01      	cmp	r3, #1
 81099ca:	d0f0      	beq.n	81099ae <USB_CoreReset+0x36>

  return HAL_OK;
 81099cc:	2300      	movs	r3, #0
}
 81099ce:	4618      	mov	r0, r3
 81099d0:	3714      	adds	r7, #20
 81099d2:	46bd      	mov	sp, r7
 81099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099d8:	4770      	bx	lr

081099da <memset>:
 81099da:	4402      	add	r2, r0
 81099dc:	4603      	mov	r3, r0
 81099de:	4293      	cmp	r3, r2
 81099e0:	d100      	bne.n	81099e4 <memset+0xa>
 81099e2:	4770      	bx	lr
 81099e4:	f803 1b01 	strb.w	r1, [r3], #1
 81099e8:	e7f9      	b.n	81099de <memset+0x4>
	...

081099ec <__libc_init_array>:
 81099ec:	b570      	push	{r4, r5, r6, lr}
 81099ee:	4d0d      	ldr	r5, [pc, #52]	@ (8109a24 <__libc_init_array+0x38>)
 81099f0:	4c0d      	ldr	r4, [pc, #52]	@ (8109a28 <__libc_init_array+0x3c>)
 81099f2:	1b64      	subs	r4, r4, r5
 81099f4:	10a4      	asrs	r4, r4, #2
 81099f6:	2600      	movs	r6, #0
 81099f8:	42a6      	cmp	r6, r4
 81099fa:	d109      	bne.n	8109a10 <__libc_init_array+0x24>
 81099fc:	4d0b      	ldr	r5, [pc, #44]	@ (8109a2c <__libc_init_array+0x40>)
 81099fe:	4c0c      	ldr	r4, [pc, #48]	@ (8109a30 <__libc_init_array+0x44>)
 8109a00:	f000 f826 	bl	8109a50 <_init>
 8109a04:	1b64      	subs	r4, r4, r5
 8109a06:	10a4      	asrs	r4, r4, #2
 8109a08:	2600      	movs	r6, #0
 8109a0a:	42a6      	cmp	r6, r4
 8109a0c:	d105      	bne.n	8109a1a <__libc_init_array+0x2e>
 8109a0e:	bd70      	pop	{r4, r5, r6, pc}
 8109a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8109a14:	4798      	blx	r3
 8109a16:	3601      	adds	r6, #1
 8109a18:	e7ee      	b.n	81099f8 <__libc_init_array+0xc>
 8109a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8109a1e:	4798      	blx	r3
 8109a20:	3601      	adds	r6, #1
 8109a22:	e7f2      	b.n	8109a0a <__libc_init_array+0x1e>
 8109a24:	08109af4 	.word	0x08109af4
 8109a28:	08109af4 	.word	0x08109af4
 8109a2c:	08109af4 	.word	0x08109af4
 8109a30:	08109af8 	.word	0x08109af8

08109a34 <memcpy>:
 8109a34:	440a      	add	r2, r1
 8109a36:	4291      	cmp	r1, r2
 8109a38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8109a3c:	d100      	bne.n	8109a40 <memcpy+0xc>
 8109a3e:	4770      	bx	lr
 8109a40:	b510      	push	{r4, lr}
 8109a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109a4a:	4291      	cmp	r1, r2
 8109a4c:	d1f9      	bne.n	8109a42 <memcpy+0xe>
 8109a4e:	bd10      	pop	{r4, pc}

08109a50 <_init>:
 8109a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109a52:	bf00      	nop
 8109a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109a56:	bc08      	pop	{r3}
 8109a58:	469e      	mov	lr, r3
 8109a5a:	4770      	bx	lr

08109a5c <_fini>:
 8109a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109a5e:	bf00      	nop
 8109a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109a62:	bc08      	pop	{r3}
 8109a64:	469e      	mov	lr, r3
 8109a66:	4770      	bx	lr
